
<SfToolbar CssClass="btns">
    <ToolbarItems>
        <ToolbarItem Align="ItemAlign.Right">
            <Template>
                <SfButton IconCss="e-icons e-print" OnClick="Print">Imprimer</SfButton>
            </Template>
        </ToolbarItem>
        <ToolbarItem Align="ItemAlign.Right">
            <Template>
                <SfButton IconCss="e-icons e-save" IsPrimary="true" OnClick="@(args => Submit(true))">Enregistrer</SfButton>
            </Template>
        </ToolbarItem>
    </ToolbarItems>
</SfToolbar>
<div>
    <GridRow>
        <GridCol Xs="24" Md="24">
            <EditForm @ref=form Model="@row" Context="EditContext">
                <FluentValidationValidator TValidator="ConsommationChantierValidator" />
                <div class="validation-group">
                    <ValidationSummary />
                </div>
                <Form Model="@row" Size="@AntSizeLDSType.Small" Layout="@FormLayout.Horizontal" LabelColSpan="6" Context="FormContext">
                    <SfTab CssClass="e-fill">
                        <TabEvents Selecting="@(args => fn.DisableTabSelect(args))"/><TabItems>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="Entéte"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    <GridRow>
                                        <GridCol Xs="24" Md="8">
                                            <Card>
                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Date" LabelColSpan="9">
                                                    <SfDatePicker Readonly="@(lignes.Count() != 0)" TValue="DateTime?" @bind-Value="@row.DO_Date" />
                                                </FormItem>
                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Numéro" LabelColSpan="9">
                                                    <SfTextBox @bind-Value="@row.DO_Piece" Readonly />
                                                </FormItem>
                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Statut" LabelColSpan="9">
                                                    <SfDropDownList TValue="short?" TItem="Items" DataSource="@fn.GetDocumentStatut(row.DO_Type??0).Distinct()" @bind-Value="@row.DO_Statut">
                                                        <DropDownListEvents TValue="short?" TItem="Items" />
                                                        <DropDownListFieldSettings Text="Name" Value="ShortId" />
                                                    </SfDropDownList>
                                                </FormItem>
                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Dépot" LabelColSpan="9">
                                                    @{
                                                        var us = db.API_T_Depot_User.Where(a => a.User == sc.User.Id).Select(a => a.Depot);
                                                        var depot = db.F_DEPOT.Where(a => sc.IsInRole("Super Admin", "Admin") || us.Contains(a.cbMarq));

                                                    }
                                                    <SfDropDownList Readonly="@(lignes.Count() != 0)" TValue="int?" TItem="F_DEPOT" DataSource="@(depot)" @bind-Value="@row.DE_No">
                                                        <DropDownListEvents TValue="int?" TItem="F_DEPOT" />
                                                        <DropDownListFieldSettings Text="DE_Intitule" Value="DE_No" />
                                                    </SfDropDownList>
                                                </FormItem>

                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Demandeur" LabelColSpan="9">
                                                    <SfTextBox @bind-Value="@row.Demandeur" Readonly />
                                                </FormItem>
                                            </Card>
                                        </GridCol>
                                        @if(IsConsommation) 
                                        {
                                            <GridCol Xs="24" Md="16">
                                                <Card>
                                                    <FormItem LabelAlign="AntLabelAlignType.Left" Label="M. Ouvrage" LabelColSpan="5">
                                                        <SfDropDownList AllowFiltering TValue="string" TItem="F_COMPTET" DataSource="@tiers" @bind-Value="@row.DO_Tiers" Readonly="@(lignes.Count() != 0)">
                                                            <DropDownListEvents TValue="string" TItem="F_COMPTET" />
                                                            <DropDownListFieldSettings Text="CT_Intitule" Value="CT_Num" />
                                                        </SfDropDownList>
                                                    </FormItem>
                                                    <FormItem LabelAlign="AntLabelAlignType.Left" Label="Objet" LabelColSpan="5">
                                                        <SfDropDownList AllowFiltering TValue="string" TItem="API_T_Projet" DataSource="@db.API_T_Projet.Where(a => !(a.IsAppelOffre??false) && a.CT_Num == row.DO_Tiers)" @bind-Value="@row.CA_Num" Readonly="@(lignes.Count() != 0)">
                                                            <DropDownListEvents TValue="string" TItem="API_T_Projet" />
                                                            <DropDownListFieldSettings Text="Objet" Value="CA_Num" />
                                                        </SfDropDownList>
                                                    </FormItem>
                                                    <FormItem LabelAlign="AntLabelAlignType.Left" Label="N° Marché" LabelColSpan="5">
                                                        <SfDropDownList AllowFiltering TValue="string" TItem="API_T_Projet" DataSource="@db.API_T_Projet.Where(a => !(a.IsAppelOffre??false) && a.CT_Num == row.DO_Tiers)" @bind-Value="@row.CA_Num" Readonly="@(lignes.Count() != 0)">
                                                            <DropDownListEvents TValue="string" TItem="API_T_Projet" />
                                                            <DropDownListFieldSettings Text="NumeroMarche" Value="CA_Num" />
                                                        </SfDropDownList>
                                                    </FormItem>
                                                    <FormItem LabelAlign="AntLabelAlignType.Left" Label="Affaire" LabelColSpan="5">
                                                        <SfDropDownList AllowFiltering TValue="string" TItem="API_T_Projet" DataSource="@db.API_T_Projet.Where(a => !(a.IsAppelOffre??false) && a.CT_Num == row.DO_Tiers)" @bind-Value="@row.CA_Num" Readonly="@(lignes.Count() != 0)">
                                                            <DropDownListEvents TValue="string" TItem="API_T_Projet" />
                                                            <DropDownListFieldSettings Text="CA_Num" Value="CA_Num" />
                                                        </SfDropDownList>
                                                    </FormItem>


                                                </Card>
                                            </GridCol>
                                        }
                                        @if(IsDemandeAchat)
                                        {
                                            <GridCol Xs="24" Md="16">
                                                <Card>
                                                    <FormItem LabelAlign="AntLabelAlignType.Left" Label="M. Ouvrage" LabelColSpan="6">
                                                        <SfDropDownList AllowFiltering TValue="string" TItem="F_COMPTET" DataSource="@tiers" @bind-Value="@ct_num" Readonly="@(lignes.Count() != 0)">
                                                            <DropDownListEvents TValue="string" TItem="F_COMPTET" />
                                                            <DropDownListFieldSettings Text="CT_Intitule" Value="CT_Num" />
                                                        </SfDropDownList>
                                                    </FormItem>
                                                    <FormItem LabelAlign="AntLabelAlignType.Left" Label="Objet" LabelColSpan="6">
                                                        <SfDropDownList AllowFiltering TValue="string" TItem="API_T_Projet" DataSource="@db.API_T_Projet.Where(a => !(a.IsAppelOffre??false) && a.CT_Num == ct_num)" @bind-Value="@row.CA_Num">
                                                            <DropDownListEvents ValueChange="MarcheChanged" TValue="string" TItem="API_T_Projet" />
                                                            <DropDownListFieldSettings Text="Objet" Value="CA_Num" />
                                                        </SfDropDownList>
                                                    </FormItem>
                                                    <FormItem LabelAlign="AntLabelAlignType.Left" Label="N° Marché" LabelColSpan="6">
                                                        <SfDropDownList AllowFiltering TValue="string" TItem="API_T_Projet" DataSource="@db.API_T_Projet.Where(a => !(a.IsAppelOffre??false) && a.CT_Num == ct_num)" @bind-Value="@row.CA_Num">
                                                            <DropDownListEvents ValueChange="MarcheChanged" TValue="string" TItem="API_T_Projet" />
                                                            <DropDownListFieldSettings Text="NumeroMarche" Value="CA_Num" />
                                                        </SfDropDownList>
                                                    </FormItem>
                                                    <FormItem LabelAlign="AntLabelAlignType.Left" Label="Affaire" LabelColSpan="6">
                                                        <SfDropDownList AllowFiltering TValue="string" TItem="API_T_Projet" DataSource="@db.API_T_Projet.Where(a => !(a.IsAppelOffre??false) && a.CT_Num == ct_num)" @bind-Value="@row.CA_Num">
                                                            <DropDownListEvents ValueChange="MarcheChanged" TValue="string" TItem="API_T_Projet" />
                                                            <DropDownListFieldSettings Text="CA_Num" Value="CA_Num" />
                                                        </SfDropDownList>
                                                    </FormItem>
                                                    <FormItem LabelAlign="AntLabelAlignType.Left" Label="Chef Chantier" LabelColSpan="6">
                                                        <SfTextBox @bind-Value="@row.ChefChantier" Readonly />
                                                    </FormItem>

                                                </Card>
                                            </GridCol>
                                        }
                                        
                                    </GridRow>
                                </ContentTemplate>
                            </TabItem>
                        </TabItems>
                    </SfTab>
                </Form>
            </EditForm>

        </GridCol>

        
        <GridCol Xs="24" Md="24">
            <Card>
                <div style="height: 48vh;">
                    <SfGrid Height="100%" @ref=@MainGrid AllowRowDragAndDrop="true" Toolbar="@(new List<string>() { "Add", "Delete" })" AllowResizing AllowSorting AllowReordering AllowSelection AllowMultiSorting ShowColumnChooser="true" AllowPdfExport="true" AllowExcelExport="true" DataSource="@lignes">
                        <GridEvents OnActionBegin="OnActionBegin" QueryCellInfo="CustomizeCell" RowDropped="RowDropHandler" TValue="F_DOCLIGNE" OnActionComplete="Edit" RowSelecting="RowSelect"></GridEvents>
                        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row"></GridSelectionSettings>
                        <GridEditSettings AllowAdding AllowDeleting ShowDeleteConfirmDialog AllowEditing="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" AllowNextRowEdit>
                            <HeaderTemplate>

                            </HeaderTemplate>
                        </GridEditSettings>
                        <GridTemplates>
                            <EmptyRecordTemplate>
                                <Empty></Empty>
                            </EmptyRecordTemplate>
                        </GridTemplates>
                        <GridColumns>
                            <GridColumn AllowEditing="false" Width="10" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="cbMarq" HeaderText="#" Visible="false" IsPrimaryKey="true" />
                            <GridColumn AllowEditing="false" Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="AR_Ref" HeaderText="Référence" />
                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="DL_Design" HeaderText="Désignation" />
                            <GridColumn Width="70" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="EU_Enumere" HeaderText="Unité">
                                <EditTemplate>
                                    <SfDropDownList TValue="string" TItem="P_UNITE" DataSource="@(db.P_UNITE.Where(a => a.U_Intitule != "").ToList())" @bind-Value="@((context as F_DOCLIGNE).EU_Enumere)">
                                        <DropDownListEvents TValue="string" TItem="P_UNITE" />
                                        <DropDownListFieldSettings Text="U_Intitule" Value="U_Intitule" />
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Width="80" EditType="EditType.NumericEdit" EditorSettings="@(parameters)" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="DL_Qte" HeaderText="Qté" Format="N2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
                            <GridColumn Width="80" EditType="EditType.NumericEdit" EditorSettings="@(parameters)" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="DL_PrixUnitaire" HeaderText="PU" Format="N2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Visible="false">
                                <EditTemplate>

                                </EditTemplate>
                            </GridColumn>
                            <GridColumn AllowEditing="false" Width="80" EditorSettings="@(parameters)" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="DL_MontantHT" HeaderText="Montant HT" Format="N2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Visible="false">
                                <EditTemplate>

                                </EditTemplate>
                            </GridColumn>
                        </GridColumns>


                    </SfGrid>
                </div>

            </Card>

        </GridCol>
    </GridRow>
</div>



@code {
    [CascadingParameter]
    public SessionDT session { get; set; } = new SessionDT();
    [Parameter] public int cbMarq { get; set; }
    [Parameter] public int DO_Type { get; set; } = 0;
    [Parameter] public int DO_Domaine { get; set; } = 0;
    DB db = new DB();
    public F_DOCENTETE row = new F_DOCENTETE();
    NumericEditCellParams parameters = new NumericEditCellParams() { Params = new NumericTextBoxModel<object>() { Decimals = 2, Format = "N2" } };
    SfGrid<F_DOCLIGNE> MainGrid;

    List<F_COMPTET> tiers = new List<F_COMPTET>();
    List<F_DOCLIGNE> lignes = new List<F_DOCLIGNE>();
    bool loading = true;
    double index = 0;
    string ct_num = "";
    EditForm form = new EditForm();
    [Parameter] public bool IsConsommation { get; set; } = false;
    [Parameter] public bool IsDemandeAchat { get; set; } = false;
    private async Task UpdateLignes()
    {
        lignes = db.F_DOCLIGNE.Where(a => a.DO_Type == row.DO_Type && a.DO_Piece == row.DO_Piece).OrderBy(a => a.cbMarq).ToList();
        int index = 1000;
        foreach (F_DOCLIGNE item in lignes)
        {
            item.DL_Ligne = index;
            index = index + 1000;
        }
        db.SaveChanges();
    }
    protected override async Task OnInitializedAsync()
    {
        db = session.db;
        var zn = db.API_T_Site_User.Where(a => a.User == sc.User.Id).Select(a => a.Site);
        if(zn.Count() != 0)
        {
            var pr = db.API_T_Projet.Where(a => zn.Contains(a.Site)).Select(a => a.CT_Num).ToList();
            if (pr.Count() != 0)
            {
                tiers = db.F_COMPTET.Where(a => a.CT_Type == 0 && (pr.Contains((a.CT_Num??"")))).OrderBy(a => a.CT_Intitule).ToList();
            }

        }



        if (cbMarq == 0)
        {
            row = new F_DOCENTETE();
            fn.FillDO(row);
            row.DE_No = db.F_DEPOT.Where(a => a.DP_NoDefaut == 1).SingleOrDefault().DE_No;
            row.DO_Date = DateTime.Today.Date;
            var user = sdb.AspNetUsers.Where(a => a.Id == sc.User.Id);
            if(user.Count() != 0)
            {
                row.Demandeur = user.First().Intitule;
            }

            if(IsConsommation)
            {
                row.DO_Domaine = 4;
                row.DO_Type = (short)DO_Type;
                string piece = "CS0000001";
                row.DO_Statut = 2;

                var dt1 = db.API_T_HistoriquePiece.Where(a => a.Piece.StartsWith("CS0") && a.DO_Type == (short)DO_Type).Select(a => a.Piece).ToList();
                var dt2 = db.F_DOCENTETE.Where(a => a.DO_Piece.StartsWith("CS0") && a.DO_Type == (short)DO_Type).Select(a => a.DO_Piece).ToList();
                var dt = dt1.Union(dt2);
                if (dt.Count() != 0)
                {
                    piece = fn.getNextCode(dt.Max());
                }
                row.DO_Piece = piece;
            }
            if (IsDemandeAchat)
            {
                row.DO_Domaine = 1;
                row.DO_Type = (short)DO_Type;
                string piece = "DA0000001";
                row.DO_Statut = 2;

                var dt = db.API_T_HistoriquePiece.Where(a => a.Piece.StartsWith("DA0") && a.DO_Type == (short)DO_Type).ToList();
                if (dt.Count != 0)
                {
                    piece = fn.getNextCode(dt.Max(a => a.Piece));
                }
                row.DO_Piece = piece;
                var comptes = db.F_COMPTEG.Where(a => a.CG_Num == "44110000");
                if (comptes.Count() == 0)
                {
                    var compte = new F_COMPTEG();
                    fn.FillCG(compte);
                    compte.CG_Num = "44110000";
                    compte.CG_Intitule = "Fournisseurs";
                    compte.CG_Classement = "Fournisseurs";
                    db.Add(compte);
                    db.SaveChanges();

                }
                var divers = db.F_COMPTET.Where(a => a.CT_Intitule == "FOURNISSEUR DIVER");
                if (divers.Count() == 0)
                {
                    var diver = new F_COMPTET();
                    fn.FillCT(diver);
                    diver.CT_Intitule = "FOURNISSEUR DIVER";
                    diver.CT_Classement = "FOURNISSEUR DIVER";
                    diver.CG_NumPrinc = "44110000";
                    diver.CT_Type = 1;

                    string num = "FRS000001";
                    var nums = db.F_COMPTET.Where(a => a.CT_Type == 1 && (a.CT_Num.EndsWith("0") || a.CT_Num.EndsWith("1") || a.CT_Num.EndsWith("2") || a.CT_Num.EndsWith("3") || a.CT_Num.EndsWith("4") || a.CT_Num.EndsWith("5") || a.CT_Num.EndsWith("6") || a.CT_Num.EndsWith("7") || a.CT_Num.EndsWith("8") || a.CT_Num.EndsWith("9")));
                    if (nums.Count() != 0)
                    {
                        num = fn.getNextCode(nums.Max(a => a.CT_Num));
                    }
                    diver.CT_Num = num;
                    diver.CT_NumPayeur = num;
                    db.Add(diver);
                    db.SaveChanges();
                    row.CG_Num = "44110000";
                    row.CT_NumPayeur = diver.CT_Num;
                    row.DO_Tiers = diver.CT_Num;
                }
                else
                {
                    row.CG_Num = "44110000";
                    row.CT_NumPayeur = divers.First().CT_Num;
                    row.DO_Tiers = divers.First().CT_Num;
                }
            }
            row.CT_NumPayeur = row.DO_Tiers;
        }
        else
        {

            row = db.F_DOCENTETE.Where(a => a.cbMarq == cbMarq).SingleOrDefault();
            if(IsDemandeAchat)
            {
                var dt = db.API_T_Projet.Where(a => a.CA_Num == row.CA_Num);
                if(dt.Count() != 0)
                {
                    ct_num = dt.First().CT_Num;
                }
            }
            await UpdateLignes();

        }
    }
    private async Task MarcheChanged(ChangeEventArgs<string, API_T_Projet> args)
    {
        var dt = db.API_T_Projet.Where(a => a.CA_Num == args.Value);
        if(dt.Count() != 0)
        {
            var user = sdb.AspNetUsers.Where(a => a.Id == dt.First().Utilisateur);
            if(user.Count() != 0)
            {
                row.ChefChantier = user.First().Intitule;
            }
        }
    }
    private async Task Print()
    {
        if (form.EditContext.Validate())
        {
            if (cbMarq == 0)
            {
                await Submit(false);
            }
            List<JSReportParameter> parameters = new List<JSReportParameter>();

            if (row.DO_Domaine == 4)
            {
                parameters.Add(new JSReportParameter { Name = "id", Values = new List<string>() { this.cbMarq.ToString() } });

                await DialogService.OpenAsync<ReportViewer>(row.DO_Piece,
                new Dictionary<string, object>() { { "ReportName", "reports\\projets\\ConsommationChantier" }, { "parameters", parameters } },
                new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "900px", Height = "95%" });
            }
            if (row.DO_Type == 10)
            {
                parameters.Add(new JSReportParameter { Name = "id", Values = new List<string>() { this.cbMarq.ToString() } });
                parameters.Add(new JSReportParameter { Name = "demandeur", Values = new List<string>() { row.Demandeur ?? "" } });
                parameters.Add(new JSReportParameter { Name = "chefchantier", Values = new List<string>() { row.ChefChantier ?? "" } });
                await DialogService.OpenAsync<ReportViewer>(row.DO_Piece,
                new Dictionary<string, object>() { { "ReportName", "reports\\projets\\DemandeAchat" }, { "parameters", parameters } },
                new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "900px", Height = "95%" });
            }
        }



    }
    private async Task Add()
    {
        if (form.EditContext.Validate())
        {
            if (cbMarq == 0)
            {
                await Submit(false);
            }

            string depot = "";
            var de = db.F_DEPOT.Where(a => a.DE_No == row.DE_No);
            if (de.Count() != 0)
            {
                depot = de.First().DE_Intitule;
            }
            await DialogService.OpenAsync<SelectArticleStock>(depot,
            new Dictionary<string, object>() { { "src", "document" }, { "cbMarq", this.cbMarq }, { "de_no", row.DE_No }, },
            new Radzen.DialogOptions() { Width = "900px", Height = "95%", Resizable = true });

            await UpdateLignes();
        }


    }
    private async Task Edit(ActionEventArgs<F_DOCLIGNE> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            var dt = args.Data;

            if (dt.DL_CodeTaxe1 != null)
            {
                dt.DL_Taxe1 = db.F_TAXE.Where(a => a.TA_Code == dt.DL_CodeTaxe1).SingleOrDefault().TA_Taux;
            }
            else
            {
                dt.DL_Taxe1 = 0;
            }
            dt.DL_PUTTC = dt.DL_PrixUnitaire + (dt.DL_PrixUnitaire * dt.DL_Taxe1 / 100);
            dt.DL_MontantHT = dt.DL_Qte * (dt.DL_PrixUnitaire - (dt.DL_Remise01REM_Valeur * dt.DL_PrixUnitaire / 100));
            dt.DL_MontantTTC = dt.DL_MontantHT + (dt.DL_MontantHT * dt.DL_Taxe1 / 100);
            dt.EU_Qte = dt.DL_Qte;
            dt.DL_QteBC = dt.DL_Qte;

            //Save F_DOCLIGNE Changes
            var local = db.Set<F_DOCLIGNE>().Local.FirstOrDefault(a => a.cbMarq == dt.cbMarq);
            if (local != null)
            {
                db.Entry(local).State = EntityState.Detached;
            }
            db.Entry(dt).State = EntityState.Modified;
            fn.DisableTriggers(db, "F_DOCLIGNE", "UPD");
            db.SaveChanges();
            fn.EnableTriggers(db, "F_DOCLIGNE", "UPD");

            //Save F_DOCENTETE Changes
            row.DO_TotalHT = lignes.Sum(a => a.DL_MontantHT);

            db.F_DOCENTETE.Update(row);
            fn.DisableTriggers(db, "F_DOCENTETE", "UPD");
            db.SaveChanges();
            fn.EnableTriggers(db, "F_DOCENTETE", "UPD");

            var ar = db.API_V_ARTICLE.Where(a => a.AR_Ref == dt.AR_Ref);
            if (ar.Count() != 0)
            {
                await UpdateStock(ar.First());
            }

        }
    }
    protected async Task Delete()
    {

    }
    private async Task Submit(bool close)
    {
        if (form.EditContext.Validate())
        {
            try
            {
                if (cbMarq == 0)
                {


                    //row.esc

                    var hist = new API_T_HistoriquePiece();
                    hist.DO_Domaine = row.DO_Domaine??0;
                    hist.DO_Type = row.DO_Type??0;
                    hist.Piece = row.DO_Piece;
                    hist.Date = row.DO_Date;
                    hist.CreatedAt = DateTime.Now;
                    hist.Tab = "F_DOCLIGNE";


                    db.F_DOCENTETE.Add(row);
                    db.API_T_HistoriquePiece.Add(hist);
                    fn.DisableTriggers(db, "F_DOCENTETE", "INS");
                    
                    db.SaveChanges();
                    fn.EnableTriggers(db, "F_DOCENTETE", "INS");
                    db.Database.ExecuteSqlRaw("ENABLE TRIGGER [TG_INS_CPTAF_DOCENTETE] ON F_DOCENTETE");


                    cbMarq = row.cbMarq;

                }
                else
                {

                    db.F_DOCENTETE.Update(row);
                    fn.DisableTriggers(db, "F_DOCENTETE", "UPD");
                    db.SaveChanges();
                    fn.EnableTriggers(db, "F_DOCENTETE", "UPD");
                }
                if (close == true)
                {
                    DialogService.Close();
                }
                //Message.Success("Les données sont enregistrées avec succès");
            }
            catch (Exception ex)
            {
                await Message.Warning(ex.ToString());
            }
        }

    }
    private async Task RowDropHandler(RowDroppedEventArgs<F_DOCLIGNE> args)
    {
        try
        {
            loading = true;
            await Task.Delay(1);

            fn.DisableTriggers(db, "F_DOCLIGNE", "UPD");
            foreach (F_DOCLIGNE dt in MainGrid.GetCurrentViewRecordsAsync().Result)
            {
                double index = MainGrid.GetRowIndexByPrimaryKeyAsync(dt.cbMarq).Result;
                string q1 = "UPDATE F_DOCLIGNE SET DL_Ligne = {0} WHERE cbMarq = {1}";
                db.Database.ExecuteSqlRaw(q1, (index + 1) * 1000, dt.cbMarq);
            }

            fn.EnableTriggers(db, "F_DOCLIGNE", "UPD");
            loading = false;
            await Task.Delay(1);
        }
        catch (Exception ex)
        {
            await Message.Error(ex.ToString());
        }

    }
    public async Task RowSelect(RowSelectingEventArgs<F_DOCLIGNE> args)
    {
        try
        {
            index = args.RowIndex;
        }
        catch (Exception ex)
        {
            await Message.Error(ex.ToString());
        }

    }
    public void CustomizeCell(Syncfusion.Blazor.Grids.QueryCellInfoEventArgs<F_DOCLIGNE> args)
    {
        try
        {
            var dt = args.Data;
            if (dt.AR_Ref == null && args.Column.Field == "DL_Design")
            {
                args.Cell.AddClass(new string[] { "td-bold" });
            }
        }
        catch (Exception ex)
        {
            Message.Error(ex.ToString());
        }


    }
    private async Task OnActionBegin(ActionEventArgs<F_DOCLIGNE> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            args.Cancel = true;
        }

        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            if (form.EditContext.Validate())
            {
                await Add();
            }

        }

    }
    private async Task UpdateStock(API_V_ARTICLE args)
    {
        fn.DisableTriggers(db, "F_ARTSTOCK", "INS");
        fn.DisableTriggers(db, "F_ARTSTOCK", "UPD");
        string q00 = @"INSERT INTO F_ARTSTOCK ([AR_Ref],[DE_No],[AS_QteMini],[AS_QteMaxi],[AS_MontSto],[AS_QteSto],[AS_QteRes],[AS_QteCom],[AS_Principal],[AS_QteResCM],[AS_QteComCM]
                    ,[AS_QtePrepa],[DP_NoPrincipal],[DP_NoControle],[AS_QteAControler],[AS_Mouvemente],[cbProt])

            SELECT
            b.AR_Ref,a.DE_No,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0,0.000000,
            0.000000,0.000000,0,0,0,0,0


            FROM F_DEPOT a
            INNER JOIN F_ARTICLE b ON 1 = 1
            LEFT JOIN F_ARTSTOCK de ON a.DE_No = de.DE_No AND b.AR_Ref = de.AR_Ref


            WHERE b.AR_Ref = {0} AND de.AR_Ref IS NULL";

        string q1 = @"UPDATE a SET a.AS_QteSto = ISNULL(b.Qte,0), a.AS_MontSto = ISNULL(c.PU,0) * ISNULL(b.Qte,0)

						FROM F_ARTSTOCK a
						LEFT JOIN
						(SELECT
						a.DE_No,
						a.AR_Ref,
						SUM(CASE WHEN a.DL_MvtStock = 1 THEN a.DL_Qte ELSE -a.DL_Qte END) Qte
						FROM F_DOCLIGNE a
						WHERE a.DL_MvtStock IN (1,3)
						GROUP BY
						a.DE_No,
						a.AR_Ref) b ON a.DE_No = b.DE_No AND a.AR_Ref = b.AR_Ref

						LEFT JOIN
						(
						(SELECT
						a.DE_No,
						a.AR_Ref,
						CASE WHEN SUM(a.DL_Qte) != 0 THEN SUM(a.DL_MontantHT)/SUM(a.DL_Qte) ELSE 0 END PU
						FROM F_DOCLIGNE a
						WHERE a.DL_MvtStock = 1
						GROUP BY a.AR_Ref,
						a.DE_No)
						) c ON a.DE_No = c.DE_No AND a.AR_Ref = c.AR_Ref WHERE a.AR_Ref = {0}";
        db.Database.ExecuteSqlRaw(q00, args.AR_Ref);
        db.Database.ExecuteSqlRaw(q1, args.AR_Ref);
        fn.EnableTriggers(db, "F_ARTSTOCK", "INS");
        fn.EnableTriggers(db, "F_ARTSTOCK", "UPD");
    }
}
