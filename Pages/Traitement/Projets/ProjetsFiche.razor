<SfToolbar CssClass="btns">
    <ToolbarItems>
        @if(!IsAppelOffre) 
        {
          <ToolbarItem Align="ItemAlign.Right">
            <Template>
                <SfDropDownButton IconCss="e-icons e-print" Content="Imprimer">
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="Fiche projet"></DropDownMenuItem>
                        <DropDownMenuItem Text="Bordoreaux des prix"></DropDownMenuItem>
                        <DropDownMenuItem Text="Achats"></DropDownMenuItem>
                        <DropDownMenuItem Text="Livraisons"></DropDownMenuItem>
                        <DropDownMenuItem Text="Attachements"></DropDownMenuItem>
                        <DropDownMenuItem Text="Depenses de caisse"></DropDownMenuItem>
                        <DropDownMenuItem Text="Consommations gasoil"></DropDownMenuItem>
                        <DropDownMenuItem Text="Depenses matériels"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfDropDownButton>
            </Template>
            </ToolbarItem>
        }
        else
        {
            <ToolbarItem Align="ItemAlign.Right">
                <Template>
                    <SfButton IsPrimary OnClick="EtapeSuivante" IconCss="e-icons e-bullet-6">Etape suivante (Marché)</SfButton>
                </Template>
            </ToolbarItem>
        }

        <ToolbarItem Align="ItemAlign.Right">
            <Template>
                <SfButton OnClick="@(args => Submit(true))" IconCss="e-icons e-save" IsPrimary="true">Enregistrer</SfButton>
            </Template>
        </ToolbarItem>
    </ToolbarItems>
</SfToolbar>
<div >
    <GridRow>
        <GridCol Xs="24" Md="24">
            <EditForm @ref=form Model="@row" Context="EditContext">
                <FluentValidationValidator TValidator="ProjetValidator" />
                <div class="validation-group">
                    <ValidationSummary />
                </div>
                <Form Model="@row" Size="@AntSizeLDSType.Small" Layout="@FormLayout.Horizontal" LabelColSpan="6" Context="row">
                    <SfTab CssClass="e-fill">
                        <TabEvents Selecting="@(args => fn.DisableTabSelect(args))"/><TabItems>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="Identification"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    <GridRow>
                                        <GridCol Xs="24" Md="24">
                                            <Card>
                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Maitre d'ouvrage" Required LabelColSpan="@(3*getCol())">
                                                     <div class="ls-parent">
                                                         <div class="ls-child-left">
                                                             <SfDropDownList FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" Readonly="@(!IsAppelOffre)" AllowFiltering TValue="string" TItem="F_COMPTET" DataSource="@(clients)" @bind-Value="@row.CT_Num">
                                                                 <DropDownListEvents TValue="string" TItem="F_COMPTET" />
                                                                 <DropDownListFieldSettings Text="CT_Intitule" Value="CT_Num" />
                                                             </SfDropDownList>
                                                         </div>
                                                         <div class="ls-child-right">
                                                             <RadzenButton Icon="reorder" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                         </div>
                                                     </div>

                                                    </FormItem>
                                                </Card>
                                                </GridCol>
                                                <GridCol Xs="24" Md="24">
                                                      <SfRichTextEditor ShowCharCount="true" AutoSaveOnIdle="true" @bind-Value="@(row.ObjetDetail)" Placeholder="Objet">
                                                            <RichTextEditorToolbarSettings Items="@Tools" />
                                                            <RichTextEditorQuickToolbarSettings Table="@TableQuickToolbarItems" />
                                                 <RichTextEditorEvents ValueChange="@(args => row.Objet = RemoveHtmlTags(args.Value))"></RichTextEditorEvents>
                                                 
                                                    </SfRichTextEditor>
                                                </GridCol>
                                                <Divider></Divider>
                                                <GridCol Xs="24" Md="24">
                                                <Card Title="Appel d'offre">
                                                <GridRow>
                                                    <GridCol Xs="24" Md="@(6*getCol())">
                                                        <Card>

                                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Zone" LabelColSpan="12" Required>
                                                                 <div class="ls-parent">
                                                                     <div class="ls-child-left">
                                                                         <SfDropDownList FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering TValue="int" TItem="API_T_Site" DataSource="@(zones)" @bind-Value="@row.Site">
                                                                             <DropDownListEvents TValue="int" TItem="API_T_Site" />
                                                                             <DropDownListFieldSettings Text="Intitule" Value="id" />
                                                                         </SfDropDownList>
                                                                     </div>
                                                                     <div class="ls-child-right">
                                                                         <RadzenButton Icon="reorder" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                     </div>
                                                                 </div>

                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Ville" LabelColSpan="12" Required>
                                                                 <div class="ls-parent">
                                                                     <div class="ls-child-left">
                                                                         <SfDropDownList FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering TValue="int" TItem="API_T_Ville" DataSource="@(villes)" @bind-Value="@row.Ville">
                                                                             <DropDownListEvents TValue="int" TItem="API_T_Ville" />
                                                                             <DropDownListFieldSettings Text="Intitule" Value="id" />
                                                                         </SfDropDownList>
                                                                     </div>
                                                                     <div class="ls-child-right">
                                                                         <RadzenButton Icon="reorder" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                     </div>
                                                                 </div>

                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Code Affaire" Required LabelColSpan="12">
                                                                <SfTextBox Readonly @bind-Value="@(row.CA_Num)" />
                                                            </FormItem>
                                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Soumissionnement" LabelColSpan="12">
                                                                <SfDropDownList TValue="int?" TItem="Items" DataSource="@helpers.ModeSoumission()" @bind-Value="@row.ModeSoumission">
                                                                    <DropDownListEvents TValue="int?" TItem="Items" />
                                                                    <DropDownListFieldSettings Text="Name" Value="Id" />
                                                                </SfDropDownList>
                                                            </FormItem>
                                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Chef Chantier" LabelColSpan="12">
                                                                <SfDropDownList FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" TValue="string" TItem="AspNetUser" DataSource="@EtendueService.GetAspNetUsers().Result" @bind-Value="@row.Utilisateur">
                                                                    <DropDownListEvents TValue="string" TItem="AspNetUser" />
                                                                    <DropDownListFieldSettings Text="UserName" Value="Id" />
                                                                </SfDropDownList>
                                                            </FormItem>

                                                        </Card>
                                                    </GridCol>
                                                    <GridCol Xs="24" Md="@(6*getCol())">
                                                        <Card>

                                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="N° Appel d'offre" LabelColSpan="12">
                                                                <SfTextBox @bind-Value="@row.NumeroAppelOffre"/>
                                                            </FormItem>
                                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Montant Estimé" LabelColSpan="12">
                                                                <SfNumericTextBox @bind-Value="@(row.MontantAppelOffreEstime)" ShowSpinButton="false" Decimals="2" Format="N2" />
                                                            </FormItem>
                                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Type" LabelColSpan="12">
                                                                <SfDropDownList TValue="int?" TItem="Items" DataSource="@helpers.TypeAppelOffre()" @bind-Value="@row.TypeAppelOffre">
                                                                    <DropDownListEvents TValue="int?" TItem="Items" />
                                                                    <DropDownListFieldSettings Text="Name" Value="Id" />
                                                                </SfDropDownList>
                                                            </FormItem>
                                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Publication" LabelColSpan="12">
                                                                <SfDatePicker TValue="DateTime?" @bind-Value="@(row.DatePublication)" />
                                                            </FormItem>
                                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Ouverture des pils" LabelColSpan="12">
                                                                <SfDatePicker TValue="DateTime?" @bind-Value="@(row.DateOuverturePils)" />
                                                            </FormItem>
                                                        </Card>
                                                    </GridCol>
                                                    <GridCol Xs="24" Md="@(12*getCol())">
                                                        <Card>
                                                            <h5>Caution Provisoire</h5>
                                                            <div class="no-border small-grid" style="height: 150px;">
                                                              <SfGrid AllowSelection Toolbar="@(new List<string>() { "Add", "Delete" })" DataSource="@(Cautions)" Height="100%">
                                                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                                                                <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
                                                                                                                                        <HeaderTemplate>

                                                                    </HeaderTemplate>
                                                                </GridEditSettings>
                                                                <GridEvents OnActionBegin="@(args=>UpdateCaution(args,0))" TValue="API_T_Caution"></GridEvents>
                                                                <GridColumns>
                                                                    <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_Caution.id) HeaderText="#" IsPrimaryKey="true" Visible="false" IsIdentity="true"></GridColumn>
                                                                    <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="150" Field=@nameof(API_T_Caution.Type) HeaderText="Type">
                                                                        <Template Context="caution">
                                                                            @{
                                                                                var dt = (fn.TypeCaution().Where(a => a.Id == (caution as API_T_Caution).Type)?.SingleOrDefault());
                                                                                <div>@dt?.Name</div>
                                                                            }
                                                                        </Template>
                                                                        <EditTemplate Context="caution">
                                                                            <SfDropDownList Placeholder="Type" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Always" DataSource="@(fn.TypeCaution().Where(a => a.Id == 0))" TValue="int?" TItem="Items" @bind-Value="@((caution as API_T_Caution).Type)">
                                                                                <DropDownListEvents TValue="int?" TItem="Items" />
                                                                                <DropDownListFieldSettings Text="Name" Value="Id" />
                                                                            </SfDropDownList>
                                                                        </EditTemplate>
                                                                    </GridColumn>
                                                                    <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="80" Field=@nameof(API_T_Caution.DateRetraitBanque) HeaderText="Retrait" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                    <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="80" Field=@nameof(API_T_Caution.DateRetourBanque) HeaderText="Retour" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                    <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="180" Field=@nameof(API_T_Caution.Banque) HeaderText="Banque"></GridColumn>
                                                                    <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="80" Field=@nameof(API_T_Caution.MontantEstime) HeaderText="Montant" Format="### ### ##0.00;-### ### ##0.00;#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" EditorSettings="@fn.cellParams()"></GridColumn>
                                                                    <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="120" Field=@nameof(API_T_Caution.Reference) HeaderText="Réf"></GridColumn>
                                                                    <GridColumn ShowInColumnChooser="false" AllowEditing="false" AllowAdding="false" Width="60" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right">
                                                                        <Template Context="caution">
                                                                            @{
                                                                                var dt = (caution as API_T_Caution);
                                                                                <RadzenButton Disabled=@(dt.Fichier == null) Icon="visibility" Click="@(args => ShowFile(dt.Fichier))" ButtonStyle="ButtonStyle.Light" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                                <RadzenButton Click="@(args => UploadFile("Caution", dt.id,null))" Icon="upload_file" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                            }

                                                                        </Template>
                                                                        <EditTemplate>

                                                                        </EditTemplate>
                                                                    </GridColumn>
                                                                </GridColumns>
                                                            </SfGrid>
                                                            </div>
                                                            
                                                        </Card>
                                                    </GridCol>
                                                </GridRow>
                                            </Card>
                                        </GridCol>
                                        @if (!IsAppelOffre)
                                        {
                                            <Divider></Divider>
                                            <GridCol Xs="24" Md="24">
                                                <Card Title="Marché">
                                                    <GridRow>
                                                        <GridCol Xs="24" Md="6">
                                                            <Card Style="height: 200px;">
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="N° Marché" Required LabelColSpan="12">
                                                                <SfTextBox @bind-Value="@(row.NumeroMarche)" />
                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Ordre de service" LabelColSpan="12">
                                                                <SfDatePicker TValue="DateTime?" @bind-Value="@(row.DateOrdreService)" />
                                                                </FormItem>

                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Ordre notification " LabelColSpan="12">
                                                                <SfDatePicker TValue="DateTime?" @bind-Value="@(row.DateOrdreNotification)" />
                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Enregistrement" LabelColSpan="12">
                                                                <SfDatePicker TValue="DateTime?" @bind-Value="@(row.DateEnregistrement)" />
                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Récéption déf prévue" LabelColSpan="12">
                                                                <SfDatePicker TValue="DateTime?" @bind-Value="@(row.DateReceptionDefinitivePrevue)" />
                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Réception déf effective" LabelColSpan="12">
                                                                <SfDatePicker TValue="DateTime?" @bind-Value="@(row.DateReceptionDefinitiveEffective)" />
                                                                </FormItem>
                                                                 <FormItem LabelAlign="AntLabelAlignType.Left" Label="Résultat marché" LabelColSpan="12">
                                                                    <SfDropDownList TValue="int" TItem="Items" DataSource="@helpers.ResultatMarche()" @bind-Value="@row.ResultatMarche">
                                                                    <DropDownListEvents TValue="int" TItem="Items" />
                                                                    <DropDownListFieldSettings Text="Name" Value="Id" />
                                                                </SfDropDownList>
                                                                </FormItem>

                                                                </Card>
                                                                </GridCol>
                                                                <GridCol Xs="24" Md="6">
                                                                <Card Style="height: 200px;">

                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Type Marché" LabelColSpan="12">
                                                                <SfDropDownList TValue="int" TItem="Items" DataSource="@helpers.TypeMarche()" @bind-Value="@row.TypeMarche">
                                                                    <DropDownListEvents TValue="int" TItem="Items" />
                                                                    <DropDownListFieldSettings Text="Name" Value="Id" />
                                                                </SfDropDownList>
                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Situation Marché" LabelColSpan="12">

                                                                <SfDropDownList TValue="int" TItem="Items" DataSource="@helpers.SituationMarche()" @bind-Value="@row.SituationMarche">
                                                                    <DropDownListEvents TValue="int" TItem="Items" />
                                                                    <DropDownListFieldSettings Text="Name" Value="Id" />
                                                                </SfDropDownList>
                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Phase Marché" LabelColSpan="12">
                                                                <SfDropDownList TValue="int" TItem="Items" DataSource="@helpers.PhaseMarche()" @bind-Value="@row.PhaseMarche">
                                                                    <DropDownListEvents TValue="int" TItem="Items" />
                                                                    <DropDownListFieldSettings Text="Name" Value="Id" />
                                                                </SfDropDownList>
                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Cout marché" LabelColSpan="12">
                                                                <SfNumericTextBox @bind-Value="@(row.CoutMarchePrevisionnel)" ShowSpinButton="false" Decimals="2" Format="N2" />
                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Montant TTC" LabelColSpan="12">
                                                                <SfNumericTextBox @bind-Value="@(row.TotalMarcheTTC)" ShowSpinButton="false" Decimals="2" Format="N2" />
                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="Montant HT" LabelColSpan="12">
                                                                <SfNumericTextBox @bind-Value="@(row.TotalMarcheHT)" ShowSpinButton="false" Decimals="2" Format="N2" />
                                                                </FormItem>
                                                                <FormItem LabelAlign="AntLabelAlignType.Left" Label="PV" LabelColSpan="12">
                                                                    <RadzenButton Click="@(args => ShowFile(row.ResultatMarchePV))" Disabled=@(row.ResultatMarchePV == null) Icon="visibility" ButtonStyle="ButtonStyle.Light" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                    <RadzenButton Click="@(args => UploadFile("Projet", row.id,"ResultatMarchePV"))" Icon="upload_file" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                </FormItem>
                                                                </Card>
                                                                </GridCol>
                                                                <GridCol Xs="24" Md="12">
                                                                <Card>
                                                                <h5>Caution</h5>
                                                                <div class="no-border small-grid" style="height: 150px;">
                                                                     <SfGrid AllowSelection Toolbar="@(new List<string>() { "Add", "Delete" })" DataSource="@(CautionsMarche)" Height="100%">
                                                                         <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                                                                         <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
                                                                             <HeaderTemplate>

                                                                             </HeaderTemplate>
                                                                         </GridEditSettings>
                                                                         <GridEvents OnActionBegin="@(args=>UpdateCaution(args,1))" TValue="API_T_Caution"></GridEvents>
                                                                         <GridColumns>
                                                                             <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_Caution.id) HeaderText="#" IsPrimaryKey="true" Visible="false" IsIdentity="true"></GridColumn>
                                                                             <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="130" Field=@nameof(API_T_Caution.Type) HeaderText="Type">
                                                                                 <Template Context="caution">
                                                                                     @{
                                                                                        var dt = (fn.TypeCaution().Where(a => a.Id == (caution as API_T_Caution).Type)?.SingleOrDefault());
                                                                                        <div>@dt?.Name</div>
                                                                                    }

                                                                                </Template>
                                                                                <EditTemplate Context="caution">
                                                                                    <SfDropDownList Placeholder="Type" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Always" DataSource="@(fn.TypeCaution().Where(a => a.Id != 0))" TValue="int?" TItem="Items" @bind-Value="@((caution as API_T_Caution).Type)">
                                                                                        <DropDownListEvents TValue="int?" TItem="Items" />
                                                                                        <DropDownListFieldSettings Text="Name" Value="Id" />
                                                                                    </SfDropDownList>
                                                                                </EditTemplate>
                                                                            </GridColumn>
                                                                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="60" Field=@nameof(API_T_Caution.DateRetraitBanque) HeaderText="Retrait" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="60" Field=@nameof(API_T_Caution.DateRetourBanque) HeaderText="Retour" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="60" Field=@nameof(API_T_Caution.DateDepotClient) HeaderText="D.Client" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="60" Field=@nameof(API_T_Caution.DateAnnulationPrevue) HeaderText="Annul" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="120" Field=@nameof(API_T_Caution.Banque) HeaderText="Banque"></GridColumn>
                                                                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="60" Field=@nameof(API_T_Caution.MontantEstime) HeaderText="Montant" Format="### ### ##0.00;-### ### ##0.00;#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" EditorSettings="@fn.cellParams()"></GridColumn>
                                                                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="60" Field=@nameof(API_T_Caution.Taux) HeaderText="Taux" Format="### ### ##0.00;-### ### ##0.00;#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" EditorSettings="@fn.cellParams()"></GridColumn>
                                                                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="90" Field=@nameof(API_T_Caution.Reference) HeaderText="Réf"></GridColumn>
                                                                            <GridColumn ShowInColumnChooser="false" AllowEditing="false" AllowAdding="false" Width="50" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right">
                                                                                <Template Context="caution">
                                                                                    @{
                                                                                        var dt = (caution as API_T_Caution);
                                                                                        <RadzenButton Disabled=@(dt.Fichier == null) Icon="visibility" Click="@(args => ShowFile(dt.Fichier))" ButtonStyle="ButtonStyle.Light" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                                        <RadzenButton Click="@(args => UploadFile("Caution", dt.id,null))" Icon="upload_file" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                                    }

                                                                                </Template>
                                                                                <EditTemplate>

                                                                                </EditTemplate>
                                                                            </GridColumn>



                                                                        </GridColumns>
                                                                    </SfGrid>
                                                                </div>
                                                                
                                                            </Card>
                                                        </GridCol>


                                                    </GridRow>
                                                </Card>
                                            </GridCol>
                                        }


                                    </GridRow>
                                </ContentTemplate>
                            </TabItem>
                            @if (!IsAppelOffre)
                            {
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Assurances"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <GridRow>
                                           <GridCol Xs="24" Md="24">
                                               <div style="height: 70vh;" class="no-border">
                                                   <SfGrid Height="100%" AllowSelection Toolbar="@(new List<string>() { "Add", "Delete" })" DataSource="@(Assurances)">
                                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                                                    <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
                                                                                                                            <HeaderTemplate>

                                                                    </HeaderTemplate>
                                                    </GridEditSettings>
                                                    <GridEvents OnActionBegin="UpdateAssurance" TValue="API_T_Assurance"></GridEvents>
                                                    <GridColumns>
                                                        <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_Assurance.id) HeaderText="#" IsPrimaryKey="true" Visible="false" IsIdentity="true"></GridColumn>
                                                        <GridColumn Width="150" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderText="Type">
                                                            <Template Context="date">
                                                                @{
                                                                        var dt = (fn.TypeAssurance().Where(a => a.Id == (date as API_T_Assurance).Type));
                                                                    }
                                                                    @if (dt.Count() != 0)
                                                                    {
                                                                        <div>@dt.First().Name</div>
                                                                    }
                                                                </Template>
                                                                <EditTemplate Context="date">
                                                                    <SfDropDownList Placeholder="Type" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Always" DataSource="@(fn.TypeAssurance())" TValue="int" TItem="Items" @bind-Value="@((date as API_T_Assurance).Type)">
                                                                        <DropDownListEvents TValue="int" TItem="Items" />
                                                                        <DropDownListFieldSettings Text="Name" Value="Id" />
                                                                    </SfDropDownList>
                                                                </EditTemplate>
                                                            </GridColumn>
                                                        <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_Assurance.Fournisseur) HeaderText="Fournisseur"></GridColumn>
                                                            <GridColumn Width="150" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderText="Mode Paiement">
                                                            <Template Context="date">
                                                                @{
                                                                    var dt = (db.API_T_Information.Where(a => a.id == (date as API_T_Assurance).ModePaiement));
                                                                    }
                                                                    @if (dt.Count() != 0)
                                                                    {
                                                                        <div>@dt.First().Valeur</div>
                                                                    }
                                                                </Template>
                                                                <EditTemplate Context="date">
                                                                <SfDropDownList Placeholder="Mode Paiement" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Always" DataSource="@(db.API_T_Information.Where(a => a.Tab == 6).OrderBy(a => a.Valeur).ToList())" TValue="int?" TItem="API_T_Information" @bind-Value="@((date as API_T_Assurance).ModePaiement)">
                                                                        <DropDownListEvents TValue="int?" TItem="API_T_Information" />
                                                                        <DropDownListFieldSettings Text="Valeur" Value="id" />
                                                                    </SfDropDownList>
                                                                </EditTemplate>
                                                            </GridColumn>
                                                        <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="150" Field=@nameof(API_T_Assurance.DateDebut) HeaderText="Date Début" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                        <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="150" Field=@nameof(API_T_Assurance.DateFin) HeaderText="Date Fin" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                            <GridColumn ShowInColumnChooser="false" AllowEditing="false" AllowAdding="false" Width="60" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right">
                                                                <Template Context="cs">
                                                                    @{
                                                                        var dt = (cs as API_T_Assurance);
                                                                        <RadzenButton Disabled=@(dt.Fichier == null) Icon="visibility" Click="@(args => ShowFile(dt.Fichier))" ButtonStyle="ButtonStyle.Light" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                        <RadzenButton Click="@(args => UploadFile("Assurance", dt.id,null))" Icon="upload_file" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                    }

                                                                </Template>
                                                                                                                                        <EditTemplate>

                                                                        </EditTemplate>
                                                            </GridColumn>
                                                    </GridColumns>
                                                </SfGrid>
                                                </div>
                                               
                                           </GridCol>
                                        </GridRow>
                                    </ContentTemplate>
                                </TabItem>
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Dates"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <div class="no-border">
                                           <GridRow>
                                            <GridCol Xs="24" Md="12">
                                                <Card Title="Planning décomptes">
                                                        <SfGrid class="small-grid" AllowSelection Toolbar="@(new List<string>() { "Add", "Delete" })" DataSource="@(ProjetPlanningDecomptes)">
                                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                                                    <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
                                                                                                                            <HeaderTemplate>

                                                                    </HeaderTemplate>
                                                    </GridEditSettings>
                                                    <GridEvents OnActionBegin="UpdateProjetPlanningDecompte" TValue="API_T_ProjetPlanningDecompte"></GridEvents>
                                                    <GridColumns>
                                                        <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_ProjetPlanningDecompte.id) HeaderText="#" IsPrimaryKey="true" Visible="false" IsIdentity="true"></GridColumn>
                                                        <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_ProjetPlanningDecompte.Description) HeaderText="Description"></GridColumn>
                                                        <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="150" Field=@nameof(API_T_ProjetPlanningDecompte.DatePrevue) HeaderText="Date Prévue" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                            <GridColumn ShowInColumnChooser="false" AllowEditing="false" AllowAdding="false" Width="60" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right">
                                                                <Template Context="cs">
                                                                    @{
                                                                        var dt = (cs as API_T_ProjetPlanningDecompte);
                                                                        <RadzenButton Disabled=@(dt.Fichier == null) Icon="visibility" Click="@(args => ShowFile(dt.Fichier))" ButtonStyle="ButtonStyle.Light" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                        <RadzenButton Click="@(args => UploadFile("ProjetPlanningDecompte", dt.id,null))" Icon="upload_file" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                    }

                                                                </Template>
                                                                                                                                        <EditTemplate>

                                                                        </EditTemplate>
                                                            </GridColumn>
                                                    </GridColumns>
                                                    </SfGrid>
                                                    </Card>
<Card Title="Réceptions">
                                                        <SfGrid class="small-grid" Toolbar="@(new List<string>() { "Add", "Delete" })" DataSource="@(ProjetReceptions)">
                                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                                                    <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
                                                                                                                            <HeaderTemplate>

                                                                    </HeaderTemplate>
                                                    </GridEditSettings>
                                                    <GridEvents OnActionBegin="UpdateProjetReception" TValue="API_T_ProjetReception"></GridEvents>
                                                    <GridColumns>
                                                        <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_ProjetReception.id) HeaderText="#" IsPrimaryKey="true" Visible="false" IsIdentity="true"></GridColumn>
                                                        <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderText="Nature">
                                                            <Template Context="date">
                                                                @{
                                                                        var dt = (fn.Receptions().Where(a => a.Id == (date as API_T_ProjetReception).Type));
                                                                    }
                                                                    @if (dt.Count() != 0)
                                                                    {
                                                                        <div>@dt.First().Name</div>
                                                                    }
                                                                </Template>
                                                                <EditTemplate Context="date">
                                                                    <SfDropDownList Placeholder="Nature" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Always" DataSource="@(fn.Receptions())" TValue="int?" TItem="Items" @bind-Value="@((date as API_T_ProjetReception).Type)">
                                                                        <DropDownListEvents TValue="int?" TItem="Items" />
                                                                        <DropDownListFieldSettings Text="Name" Value="Id" />
                                                                    </SfDropDownList>
                                                                </EditTemplate>
                                                            </GridColumn>
                                                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="150" Field=@nameof(API_T_ProjetReception.DateReception) HeaderText="Date Récéption" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                                                                        <GridColumn ShowInColumnChooser="false" AllowEditing="false" AllowAdding="false" Width="60" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right">
                                                                <Template Context="cs">
                                                                    @{
                                                                        var dt = (cs as API_T_ProjetReception);
                                                                        <RadzenButton Disabled=@(dt.Fichier == null) Icon="visibility" Click="@(args => ShowFile(dt.Fichier))" ButtonStyle="ButtonStyle.Light" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                        <RadzenButton Click="@(args => UploadFile("ProjetReception", dt.id,null))" Icon="upload_file" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                    }

                                                                </Template>
                                                                    <EditTemplate>

                                                                    </EditTemplate>
                                                            </GridColumn>
                                                        </GridColumns>
                                                    </SfGrid>
                                                </Card>
                                                    <Card Title="Arréts/Reprises">
                                                        <SfGrid class="small-grid" Toolbar="@(new List<string>() { "Add", "Delete" })" DataSource="@(ProjetDates)">
                                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                                                            <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="@(!IsArret())" AllowDeleting="true" AllowEditing="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
                                                                <HeaderTemplate>

                                                                </HeaderTemplate>
                                                            </GridEditSettings>
                                                            <GridEvents OnActionBegin="UpdateProjetDate" TValue="API_T_ProjetDate"></GridEvents>
                                                            <GridColumns>
                                                                <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_ProjetDate.id) HeaderText="#" IsPrimaryKey="true" Visible="false" IsIdentity="true"></GridColumn>
                                                                <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="150" Field=@nameof(API_T_ProjetDate.DateArret) HeaderText="Date Arrét" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="150" Field=@nameof(API_T_ProjetDate.DateReprise) HeaderText="Date Reprise" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_ProjetDate.Motif) HeaderText="Motif"></GridColumn>
                                                                <GridColumn ShowInColumnChooser="false" AllowEditing="false" AllowAdding="false" Width="60" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right">
                                                                    <Template Context="cs">
                                                                        @{
                                                                            var dt = (cs as API_T_ProjetDate);
                                                                            <RadzenButton Disabled=@(dt.Fichier == null) Icon="visibility" Click="@(args => ShowFile(dt.Fichier))" ButtonStyle="ButtonStyle.Light" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                            <RadzenButton Click="@(args => UploadFile("ProjetDate", dt.id,null))" Icon="upload_file" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                        }

                                                                    </Template>
                                                                    <EditTemplate>

                                                                    </EditTemplate>
                                                                </GridColumn>
                                                            </GridColumns>
                                                        </SfGrid>
                                                    </Card>
                                                    <Card Title="Avenants officiels">
                                                        <SfGrid class="small-grid" Toolbar="@(new List<string>() { "Add", "Delete" })" DataSource="@(ProjetAvenants)">
                                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                                                            <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog"></GridEditSettings>
                                                            <GridEvents OnActionBegin="UpdateProjetAvenant" TValue="API_T_ProjetAvenant"></GridEvents>
                                                            <GridColumns>
                                                                <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_ProjetAvenant.id) HeaderText="#" IsPrimaryKey="true" Visible="false" IsIdentity="true">
                                                                    <HeaderTemplate>

                                                                    </HeaderTemplate>
                                                                </GridColumn>
                                                                <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_ProjetAvenant.Libelle) HeaderText="Libellé"></GridColumn>
                                                                <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="150" Field=@nameof(API_T_ProjetAvenant.DateAvenant) HeaderText="Date" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="150" Field=@nameof(API_T_ProjetAvenant.MontantAvenant) HeaderText="Montant" Format="N2" EditType="EditType.NumericEdit" EditorSettings="@(parameters)"></GridColumn>
                                                                <GridColumn ShowInColumnChooser="false" AllowEditing="false" AllowAdding="false" Width="60" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right">
                                                                    <Template Context="cs">
                                                                        @{
                                                                            var dt = (cs as API_T_ProjetAvenant);
                                                                            <RadzenButton Disabled=@(dt.Fichier == null) Icon="visibility" Click="@(args => ShowFile(dt.Fichier))" ButtonStyle="ButtonStyle.Light" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                            <RadzenButton Click="@(args => UploadFile("ProjetAvenant", dt.id,null))" Icon="upload_file" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                        }

                                                                    </Template>
                                                                    <EditTemplate>

                                                                    </EditTemplate>
                                                                </GridColumn>
                                                            </GridColumns>
                                                        </SfGrid>
                                                    </Card>
                                                    </GridCol>
                                                    <GridCol Xs="24" Md="12">
                                                        <div style="padding: 10px;">
                                                        <GridRow>
                                                            <GridCol Xs="24" Md="12">
                                                                <h5>Delai Estimé</h5>
                                                                <GridRow>
                                                                    <GridCol Xl="24" Md="24">
                                                                        <Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card" Title="Nbr Jours Estimés" TValue="int?" Value="@(((row.DateReceptionDefinitivePrevue??DateTime.Today)-(row.DateOrdreService??DateTime.Today)).Days)" ValueStyle="color: #DCE2DD ;" Suffix="JOURS" />
                                                                    </GridCol>
                                                                    <GridCol Xl="24" Md="24">
                                                                        <Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card" Title="Nbr Mois Estimés" TValue="int?" Value="@((((row.DateReceptionDefinitivePrevue??DateTime.Today)-(row.DateOrdreService??DateTime.Today)).Days)/30)" ValueStyle="color: #DCE2DD ;" Suffix="MOIS" />
                                                                    </GridCol>
                                                                    <GridCol Xl="24" Md="24">
                                                                        <Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card" Title="Nbr Années Estimés" TValue="int?" Value="@((((row.DateReceptionDefinitivePrevue??DateTime.Today)-(row.DateOrdreService??DateTime.Today)).Days)/365)" ValueStyle="color: #DCE2DD ;" Suffix="ANNEES" />
                                                                    </GridCol>
                                                                </GridRow>

                                                            </GridCol>
                                                            <GridCol Xs="24" Md="12">
                                                                <h5>Arréts</h5>
                                                                <GridRow>
                                                                    <GridCol Xl="24" Md="24">
                                                                        <Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card" Title="Statut" TValue="string" Value="@StautArret()" ValueStyle="color: #DCE2DD ;" />
                                                                    </GridCol>
                                                                    <GridCol Xl="24" Md="24">
                                                                        <Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card" Title="Nbr Jours arréts" TValue="int?" Value="@getArrets()" ValueStyle="color: #DCE2DD ;" Suffix="JOURS" />
                                                                    </GridCol>
                                                                    <GridCol Xl="24" Md="24">
                                                                        <Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card" Title="Nouvelle Récép. Prév." TValue="string" Value="@(((row.DateReceptionDefinitivePrevue??DateTime.Today).AddDays(getArrets())).ToShortDateString())" ValueStyle="color: #DCE2DD ;" />
                                                                    </GridCol>
                                                                </GridRow>

                                                            </GridCol>
                                                            <GridCol Xs="24" Md="24">
                                                                <h5>Réalisation</h5>
                                                                <Card>
                                                                    <SfProgressBar @ref="CircularInstance" Type="Syncfusion.Blazor.ProgressBar.ProgressType.Circular" ID="CircularSegment"
                                                                                   Height="200px" Width="100%" TrackThickness="15" ProgressThickness="15"
                                                                                   Value="@getDays()" Minimum="0" Maximum="@(((row.DateReceptionDefinitivePrevue??DateTime.Today) - (row.DateOrdreService??DateTime.Today)).Days)" StartAngle="220"
                                                                                   EndAngle="140" SegmentCount="50" GapWidth="5"
                                                                                   CornerRadius="CornerType.Square">
                                                                        <ProgressBarAnimation Enable="true" Duration="1000" Delay="0" />
                                                                        <ProgressBarAnnotations>
                                                                            <ProgressBarAnnotation>
                                                                                <ContentTemplate>
                                                                                    <div style='font-size:24px;font-weight:bold;color:#9A9A9A'>@getDays()/@(((row.DateReceptionDefinitivePrevue ?? DateTime.Today) - (row.DateOrdreService ?? DateTime.Today)).Days)</div>

                                                                                </ContentTemplate>
                                                                            </ProgressBarAnnotation>
                                                                        </ProgressBarAnnotations>
                                                                    </SfProgressBar>
                                                                </Card>

                                                            </GridCol>
                                                        </GridRow>
                                                        </div>
                                                    
                                            </GridCol>
  

                                        </GridRow>
                                        </div>
                                        

                                    </ContentTemplate>
                                </TabItem>
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Bordereau des prix"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        @{
                                            var dt = db.API_T_Bordereau.Where(a => a.Projet == this.id);
                                            int bd = 0;
                                            if (dt.Count() != 0)
                                            {
                                                bd = (dt?.First()?.id)??0;
                                                <BusinessWeb.Pages.Traitement.Projets.BordereauxPrix.BordereauxFiche id="@bd" IsDetail="true"></BusinessWeb.Pages.Traitement.Projets.BordereauxPrix.BordereauxFiche>
                                            }
                                            
                                        }
                                    </ContentTemplate>
                                </TabItem>
                                @if(1 == 0) {
                                   <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Achats"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <BusinessWeb.Pages.Traitement.Gestion.Documents.DocumentsListe IsProjet="true" CA_Num="@row.CA_Num" DO_Domaine="1" Title="LISTE DES ACHATS"></BusinessWeb.Pages.Traitement.Gestion.Documents.DocumentsListe>
                                    </ContentTemplate>
                                </TabItem>
                                }
                                @if(1 == 0) {
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Livraisons"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <BusinessWeb.Pages.Traitement.Gestion.Documents.DocumentsListe IsProjet="true" CA_Num="@row.CA_Num" DO_Domaine="0" Title="LISTE DES VENTES"></BusinessWeb.Pages.Traitement.Gestion.Documents.DocumentsListe>
                                        </ContentTemplate>
                                    </TabItem>
                                }
                               
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Attachements"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <BusinessWeb.Pages.Traitement.Projets.Attachements.AttachementsListe IsList="false" Projet="@id" IsAttachement="true" grid_height="78vh"></BusinessWeb.Pages.Traitement.Projets.Attachements.AttachementsListe>
                                    </ContentTemplate>
                                </TabItem>
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Décomptes"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <BusinessWeb.Pages.Traitement.Projets.Attachements.AttachementsListe IsList="false" Projet="@id" IsDecompte="true" grid_height="78vh"></BusinessWeb.Pages.Traitement.Projets.Attachements.AttachementsListe>
                                    </ContentTemplate>
                                </TabItem>
                                @if(1 == 0) 
                                {
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Caisse"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <BusinessWeb.Pages.Traitement.Caisse.CaisseView IsList="false" Projet="@id" type="1"></BusinessWeb.Pages.Traitement.Caisse.CaisseView>
                                        </ContentTemplate>
                                    </TabItem>
                                    <TabItem>
                                        <ChildContent>
                                            <TabHeader Text="Gasoil"></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <BusinessWeb.Pages.Traitement.Entretien.EntretiensListe IsList="false" Projet="@id" type="0"></BusinessWeb.Pages.Traitement.Entretien.EntretiensListe>
                                        </ContentTemplate>
                                    </TabItem>
                                }

                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Dossier administratif"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <Card Style="height: 100%;">
                                            <FilesManager table="DossierAdministratif" id="@id" societe="@session.Societe.id.ToString()" height="70vh"></FilesManager>
                                        </Card>
                                    </ContentTemplate>
                                </TabItem>
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Dossier technique"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <Card Style="height: 100%;">
                                            <FilesManager table="DossierTechnique" id="@id" societe="@session.Societe.id.ToString()" height="70vh"></FilesManager>
                                        </Card>
                                    </ContentTemplate>
                                </TabItem>
                            }

                        </TabItems>
                    </SfTab>
                </Form>
            </EditForm>
            

        </GridCol>

    </GridRow>
</div>




@code {
    [CascadingParameter]
    public SessionDT session { get; set; }
    DB db = new DB();

    [Parameter]
    public int id { get; set; }
    [Parameter]
    public bool IsAppelOffre { get; set; } = true;
    API_T_Projet row = new API_T_Projet();
    public SfProgressBar CircularInstance;
    List<F_COMPTET> clients = new List<F_COMPTET>();
    List<API_T_Site> zones = new List<API_T_Site>();
    List<API_T_Ville> villes = new List<API_T_Ville>();
    List<API_T_Caution> Cautions = new List<API_T_Caution>();
    List<API_T_Caution> CautionsMarche = new List<API_T_Caution>();
    List<API_T_ProjetAvenant> ProjetAvenants = new List<API_T_ProjetAvenant>();
    List<API_T_ProjetDate> ProjetDates = new List<API_T_ProjetDate>();
    List<API_T_Assurance> Assurances = new List<API_T_Assurance>();
    List<API_T_ProjetPlanningDecompte> ProjetPlanningDecomptes = new List<API_T_ProjetPlanningDecompte>();
    List<API_T_ProjetReception> ProjetReceptions = new List<API_T_ProjetReception>();
    NumericEditCellParams parameters = new NumericEditCellParams() { Params = new NumericTextBoxModel<object>() { Decimals = 2, Format = "N2" } };
    Helpers helpers = new Helpers();
    EditForm form = new EditForm();

    protected override async Task OnInitializedAsync()
    {
        db = session.db;
        clients = db.F_COMPTET.Where(a => a.CT_Type == 0).Select(a => new F_COMPTET { CT_Num = a.CT_Num, CT_Intitule = a.CT_Intitule + " (" + a.CT_Num + ")" }).ToList();
        zones = db.API_T_Site.ToList();
        villes = db.API_T_Ville.ToList();
        if (id == 0)
        {
            row = new API_T_Projet();
            string affaire = "AF00000001";

            var dt = db.F_COMPTEA.Where(a => a.CA_Num.StartsWith("AF")).ToList();
            if (dt.Count != 0)
            {
                affaire = helpers.getNextCode(dt.Max(a => a.CA_Num));
            }
            row.CA_Num = affaire;


        }
        else
        {
            row = db.API_T_Projet.Where(a => a.id == id).SingleOrDefault();
            await InitBD();
            await UpdateData();
        }
        IsAppelOffre = (row.IsAppelOffre ?? true);
        

    }

    static string RemoveHtmlTags(string input)
    {
        string pattern = @"<[^>]+>|&nbsp;";
        string cleanText = Regex.Replace((input??""), pattern, string.Empty);
        return cleanText;
    }

    private int getDays()
    {
        int days = 0;
        var dt = db.API_T_ProjetDate.AsNoTracking().Where(a => a.Projet == id);
        if (dt.Count() == 0)
        {
            days = (DateTime.Today - (row.DateOrdreService ?? DateTime.Today)).Days;
        }
        else
        {
            int arrets = 0;
            foreach (API_T_ProjetDate item in dt)
            {
                arrets = arrets + ((item.DateReprise ?? DateTime.Today) - (item.DateArret ?? DateTime.Today)).Days;
            }
            days = (DateTime.Today - row.DateOrdreService).Value.Days - arrets;
        }
        return days;
    }
    private int getArrets()
    {
        int arrets = 0;
        var dt = db.API_T_ProjetDate.AsNoTracking().Where(a => a.Projet == id);
        if(dt.Count() != 0)
        {
            foreach (API_T_ProjetDate item in dt)
            {
                arrets = arrets + ((item.DateReprise ?? DateTime.Today) - (item.DateArret ?? DateTime.Today)).Days;
            }
        }
        return arrets;
    }
    private bool IsArret()
    {
        bool rs = false;
        var dt = db.API_T_ProjetDate.AsNoTracking().Where(a => a.Projet == id);
        if (dt.Count() != 0)
        {
            rs = (dt.OrderByDescending(a => a.id).First().DateReprise == null);
        }
        return rs;
    }
    private string StautArret()
    {
        string rs = "En arrét";
        if (!IsArret())
        {
            rs = "En cours";
        }
        return rs;
    }

    private async Task UpdateData()
    {
        Cautions = db.API_T_Caution.Where(a => a.Projet == id && a.Etape == 0).AsNoTracking().OrderBy(a => a.id).ToList();
        CautionsMarche = db.API_T_Caution.Where(a => a.Projet == id && a.Etape == 1).AsNoTracking().OrderBy(a => a.id).ToList();
        ProjetPlanningDecomptes = db.API_T_ProjetPlanningDecompte.Where(a => a.Projet == id).AsNoTracking().OrderBy(a => a.DatePrevue).ToList();
        ProjetDates = db.API_T_ProjetDate.Where(a => a.Projet == id).AsNoTracking().OrderBy(a => a.DateArret).ToList();
        ProjetReceptions = db.API_T_ProjetReception.Where(a => a.Projet == id).AsNoTracking().OrderBy(a => a.DateReception).ToList();
        ProjetAvenants = db.API_T_ProjetAvenant.Where(a => a.Projet == id).AsNoTracking().OrderBy(a => a.DateAvenant).ToList();
        Assurances =  db.API_T_Assurance.Where(a => a.Projet == id).AsNoTracking().OrderBy(a => a.id).ToList();
    }
    private async Task Submit(bool close)
    {
        try
        {
            if(form.EditContext.Validate())
            {
                if (id == 0)
                {
                    string affaire = "AF00000001";

                    var dt = db.F_COMPTEA.Where(a => a.CA_Num.StartsWith("AF")).ToList();
                    if (dt.Count != 0)
                    {
                        affaire = helpers.getNextCode(dt.Max(a => a.CA_Num));
                    }
                    var ca = new F_COMPTEA();
                    fn.FillCA(ca);
                    ca.CA_Num = affaire;
                    ca.CA_Intitule = row.NumeroMarche ?? "";
                    row.CA_Intitule = row.NumeroMarche ?? "";
                    ca.N_Analytique = 3;
                    ca.CA_Classement = affaire;
                    db.F_COMPTEA.Add(ca);
                    db.SaveChanges();
                    row.CA_Num = affaire;
                    row.IsAppelOffre = IsAppelOffre;
                    db.API_T_Projet.Add(row);
                    db.SaveChanges();
                    id = row.id;

                    await InitBD();
                }
                else
                {
                    //var ca = db.F_COMPTEA.Where(a => a.CA_Num == row.CA_Num).SingleOrDefault();
                    //ca.CA_Intitule = row.CA_Intitule;
                    //db.F_COMPTEA.Update(ca);
                    db.API_T_Projet.Update(row);
                    db.SaveChanges();
                }
                if (close)
                {
                    DialogService.Close();
                }
            }


        }
        catch (Exception ex)
        {
            await Message.Error(ex.ToString());
        }
    }
    private int getCol()
    {
        if(IsAppelOffre) 
        {
            return 2;
        }
        {
            return 1;
        }
    }
    public async Task UpdateProjetPlanningDecompte(ActionEventArgs<API_T_ProjetPlanningDecompte> args)
    {
        if(form.EditContext.Validate()) {
            if (id == 0)
            {
                await Submit(false);
            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                if (args.Action == "Add")
                {


                    API_T_ProjetPlanningDecompte item = args.Data;
                    item.Projet = row.id;
                    db.Add(item);
                    db.SaveChanges();
                }
                if (args.Action != "Add")
                {
                    var local = db.Set<API_T_ProjetPlanningDecompte>().Local.FirstOrDefault(a => a.id == args.Data.id);
                    if (local != null)
                    {
                        db.Entry(local).State = EntityState.Detached;
                    }
                    db.Entry(args.Data).State = EntityState.Modified;
                    db.SaveChanges();


                }

            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
                var local = db.Set<API_T_ProjetPlanningDecompte>().Local.FirstOrDefault(a => a.id == args.Data.id);
                if (local != null)
                {
                    db.Entry(local).State = EntityState.Detached;
                }
                db.Entry(args.Data).State = EntityState.Deleted;
                db.SaveChanges();
            }
        }
        else 
        {
            args.Cancel = true;
        }

    }
    public async Task UpdateProjetReception(ActionEventArgs<API_T_ProjetReception> args)
    {
        if(form.EditContext.Validate()) {
            if (id == 0)
            {
                await Submit(false);
            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {

                if (args.Action == "Add")
                {
                    API_T_ProjetReception item = args.Data;
                    item.Projet = row.id;
                    db.Add(item);
                    db.SaveChanges();
                }
                if (args.Action != "Add")
                {
                    var local = db.Set<API_T_ProjetReception>().Local.FirstOrDefault(a => a.id == args.Data.id);
                    if (local != null)
                    {
                        db.Entry(local).State = EntityState.Detached;
                    }
                    db.Entry(args.Data).State = EntityState.Modified;
                    db.SaveChanges();


                }

            }

            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
                var local = db.Set<API_T_ProjetReception>().Local.FirstOrDefault(a => a.id == args.Data.id);
                if (local != null)
                {
                    db.Entry(local).State = EntityState.Detached;
                }
                db.Entry(args.Data).State = EntityState.Deleted;
                db.SaveChanges();
            }
        }
        else 
        {
            args.Cancel = true;
        }

    }
    public async Task UpdateProjetAvenant(ActionEventArgs<API_T_ProjetAvenant> args)
    {
        if(form.EditContext.Validate()) {
            if (id == 0)
            {
                await Submit(false);
            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {

                if (args.Action == "Add")
                {
                    API_T_ProjetAvenant item = args.Data;
                    item.Projet = row.id;
                    db.Add(item);
                    db.SaveChanges();
                }
                if (args.Action != "Add")
                {
                    var local = db.Set<API_T_ProjetAvenant>().Local.FirstOrDefault(a => a.id == args.Data.id);
                    if (local != null)
                    {
                        db.Entry(local).State = EntityState.Detached;
                    }
                    db.Entry(args.Data).State = EntityState.Modified;
                    db.SaveChanges();


                }

            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
                var local = db.Set<API_T_ProjetAvenant>().Local.FirstOrDefault(a => a.id == args.Data.id);
                if (local != null)
                {
                    db.Entry(local).State = EntityState.Detached;
                }
                db.Entry(args.Data).State = EntityState.Deleted;
                db.SaveChanges();
            }
        }
        else 
        {
            args.Cancel = true;
        }

    }
    public async Task UpdateAssurance(ActionEventArgs<API_T_Assurance> args)
    {
        if(form.EditContext.Validate()) 
        {
            if (id == 0)
            {
                await Submit(false);
            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {

                if (args.Action == "Add")
                {
                    API_T_Assurance item = args.Data;
                    item.Projet = row.id;
                    db.Add(item);
                    db.SaveChanges();
                    F_COMPTET ct = new F_COMPTET();
                }
                if (args.Action != "Add")
                {
                    var local = db.Set<API_T_Assurance>().Local.FirstOrDefault(a => a.id == args.Data.id);
                    if (local != null)
                    {
                        db.Entry(local).State = EntityState.Detached;
                    }
                    db.Entry(args.Data).State = EntityState.Modified;
                    db.SaveChanges();


                }

            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
                var local = db.Set<API_T_Assurance>().Local.FirstOrDefault(a => a.id == args.Data.id);
                if (local != null)
                {
                    db.Entry(local).State = EntityState.Detached;
                }
                db.Entry(args.Data).State = EntityState.Deleted;
                db.SaveChanges();
            }
        }
        else
        {
            args.Cancel = true;
        }

    }
    public async Task UpdateProjetDate(ActionEventArgs<API_T_ProjetDate> args)
    {
        if(form.EditContext.Validate()) 
        {
            if (id == 0)
            {
                await Submit(false);
            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {

                if (args.Action == "Add")
                {
                    API_T_ProjetDate item = args.Data;
                    item.Projet = row.id;
                    db.Add(item);
                    db.SaveChanges();
                }
                if (args.Action != "Add")
                {
                    var local = db.Set<API_T_ProjetDate>().Local.FirstOrDefault(a => a.id == args.Data.id);
                    if (local != null)
                    {
                        db.Entry(local).State = EntityState.Detached;
                    }
                    db.Entry(args.Data).State = EntityState.Modified;
                    db.SaveChanges();


                }

            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
                var local = db.Set<API_T_ProjetDate>().Local.FirstOrDefault(a => a.id == args.Data.id);
                if (local != null)
                {
                    db.Entry(local).State = EntityState.Detached;
                }
                db.Entry(args.Data).State = EntityState.Deleted;
                db.SaveChanges();
            }
        }
        else
        {
            args.Cancel = true;
        }

    }
    //// event for custom menu item
    private void OnMenuClick(MenuClickEventArgs<FileManagerDirectoryContent> args)
    {

        if (args.Item.Text == "Ouvert")
        {

        }
    }
    private void OnFileOpen(FileOpenEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.FileDetails.Name.ToUpper().EndsWith(".PDF"))
        {
            DialogService.OpenAsync<PdfViewer>(args.FileDetails.Name,
       new Dictionary<string, object>() { { "DocumentPath", helpers.getPath(session.Societe.id.ToString(), "Projet", this.id.ToString()) + "/" + args.FileDetails.Name } },
       new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "800px", Height = "95%" });
        }
        if (args.FileDetails.Name.ToUpper().EndsWith(".DOC") || args.FileDetails.Name.ToUpper().EndsWith(".DOCX") || args.FileDetails.Name.ToUpper().EndsWith(".TXT"))
        {
            DialogService.OpenAsync<WordViewer>(args.FileDetails.Name,
   new Dictionary<string, object>() { { "DocumentPath", helpers.getPath(session.Societe.id.ToString(), "Projet", this.id.ToString()) + "/" + args.FileDetails.Name } },
       new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "800px", Height = "95%" });
        }

    }
    public async Task UpdateCaution(ActionEventArgs<API_T_Caution> args, int etape)
    {
        if(form.EditContext.Validate())
        {
            if (id == 0)
            {
                await Submit(false);
            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {

                if (args.Action == "Add")
                {
                    API_T_Caution item = args.Data;
                    item.Etape = etape;
                    item.Projet = row.id;
                    db.Add(item);
                    db.SaveChanges();
                }
                if (args.Action != "Add")
                {
                    var local = db.Set<API_T_Caution>().Local.FirstOrDefault(a => a.id == args.Data.id);
                    if (local != null)
                    {
                        db.Entry(local).State = EntityState.Detached;
                    }
                    db.Entry(args.Data).State = EntityState.Modified;
                    db.SaveChanges();
                    Cautions = db.API_T_Caution.Where(a => a.Projet == id && a.Etape == 0).OrderBy(a => a.id).ToList();
                    CautionsMarche = db.API_T_Caution.Where(a => a.Projet == id && a.Etape == 1).OrderBy(a => a.id).ToList();

                }

            }
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
                var local = db.Set<API_T_Caution>().Local.FirstOrDefault(a => a.id == args.Data.id);
                if (local != null)
                {
                    db.Entry(local).State = EntityState.Detached;
                }
                db.Entry(args.Data).State = EntityState.Deleted;
                db.SaveChanges();
            }
        }
        else 
        {
            args.Cancel = true;
        }


    }
    private async Task UploadFile(string table, int id, string Col)
    {
        await DialogService.OpenAsync<Uploader>("Integrer un document",
                new Dictionary<string, object>() { { "Table", table }, { "id", id }, { "Col", Col } },
                new Radzen.DialogOptions() { Width = "800px", Height = "350px" });
        await db.Entry(row).ReloadAsync();
        await UpdateData();

    }
    private async Task ShowFile(string url)
    {
        if (url.ToUpper().EndsWith(".PDF"))
        {
            await DialogService.OpenAsync<PdfViewer>("Preview",
                new Dictionary<string, object>() { { "DocumentPath", url } },
                new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "800px", Height = "95%" });
        }
        if (url.ToUpper().EndsWith(".DOC") || url.ToUpper().EndsWith(".DOCX") || url.ToUpper().EndsWith(".TXT"))
        {
            await DialogService.OpenAsync<WordViewer>("Preview",
        new Dictionary<string, object>() { { "DocumentPath", url } },
                new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "800px", Height = "95%" });
        }
    }
    private async Task EtapeSuivante()
    {
        if(form.EditContext.Validate())
        {
            bool isConfirm = await SyncDialog.ConfirmAsync("Voulez vous vraiment passer à l'étape suivante?", "Etape suivante");
            if (isConfirm)
            {
                await Submit(false);
                IsAppelOffre = false;
                row.IsAppelOffre = false;
                db.SaveChanges();
                DialogService.Close();
            }
        }

    }
    private async Task InitBD()
    {
        var dt = db.API_T_Bordereau.Where(a => a.Projet == this.id);
        if(!(dt.Count() != 0))
        {
            var itm = new API_T_Bordereau();
            itm.Date = DateTime.Today;
            string piece = "BDR0000001";

            var lns = db.API_T_Bordereau.Where(a => a.Piece.StartsWith("BDR")).ToList();
            if (lns.Count != 0)
            {
                piece = fn.getNextCode(lns.Max(a => a.Piece));
            }
            itm.Piece = piece;
            itm.Projet = this.id;
            db.Add(itm);
            db.SaveChanges();
        }
    }
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.NumberFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.BulletFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };
    private List<TableToolbarItemModel> TableQuickToolbarItems = new List<TableToolbarItemModel>()
    {
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableHeader },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableRows },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableColumns },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableCell },
        new TableToolbarItemModel() { Command = TableToolbarCommand.HorizontalSeparator },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableRemove },
        new TableToolbarItemModel() { Command = TableToolbarCommand.BackgroundColor },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableCellVerticalAlign },
        new TableToolbarItemModel() { Command = TableToolbarCommand.Styles }
    };
}