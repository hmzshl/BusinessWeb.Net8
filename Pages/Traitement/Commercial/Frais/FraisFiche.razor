
<SfToolbar CssClass="btns">
    <ToolbarItems>
        <ToolbarItem Align="ItemAlign.Right">
            <Template>
                <SfButton IconCss="e-icons e-print" OnClick="Print">Imprimer</SfButton>
            </Template>
        </ToolbarItem>
        <ToolbarItem Align="ItemAlign.Right">
            <Template>
                <SfButton OnClick="@(args => Submit(true))" IconCss="e-icons e-save" IsPrimary="true">Enregistrer</SfButton>
            </Template>
        </ToolbarItem>
    </ToolbarItems>
</SfToolbar>
<div >
    <GridRow>
        <GridCol Xs="24" Md="24">
            <Form Model="@row" Size="@AntSizeLDSType.Small" Layout="@FormLayout.Horizontal" LabelColSpan="6" Context="row">
                <SfTab CssClass="e-fill">
                    <TabEvents Selecting="@(args => fn.DisableTabSelect(args))"/><TabItems>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Identification"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <GridRow>
                                    <GridCol Xs="24" Md="12">
                                        <Card Style="height: 67px;">
                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Numéro">
                                                <SfTextBox @bind-Value="@(row.Piece)" Readonly />
                                            </FormItem>
                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Date">
                                                <SfDatePicker TValue="DateTime?" @bind-Value="@row.Date" />
                                            </FormItem>
                                        </Card>
                                    </GridCol>
                                    <GridCol Xs="24" Md="12">
                                        <Card Style="height: 67px;">
                                            <Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Title="Montant" Value="@((row.Montant).ToString("### ### ##0.00;-### ### ##0.00;#"))" ValueStyle="color: #3f8600 ;" Suffix="@fn.getDevise(db)" />
                                        </Card>
                                        
                                    </GridCol>
                                    <GridCol Xs="24" Md="24">
                                        <Card>
                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Client">
                                                <SfDropDownList Query="@LocalDataQuery" PopupHeight="300px" AllowFiltering FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" TValue="string" TItem="F_COMPTET" DataSource="@(db.F_COMPTET.Where(a => a.CT_Type == 0))" @bind-Value="@row.CT_Num">
                                                    <DropDownListEvents TValue="string" TItem="F_COMPTET" />
                                                    <DropDownListFieldSettings Text="CT_Intitule" Value="CT_Num" />
                                                </SfDropDownList>
                                            </FormItem>
                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Représentant">
                                                <SfDropDownList Query="@LocalDataQuery" PopupHeight="300px" AllowFiltering FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" TValue="int" TItem="F_COLLABORATEUR" DataSource="@(db.F_COLLABORATEUR)" @bind-Value="@row.CO_No">
                                                    <DropDownListEvents TValue="int" TItem="F_COLLABORATEUR" />
                                                    <DropDownListFieldSettings Text="CO_Nom" Value="CO_No" />
                                                </SfDropDownList>
                                            </FormItem>
                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Affaire" LabelColSpan="6">
                                                <SfDropDownList Query="@LocalDataQuery" PopupHeight="300px" AllowFiltering FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" TValue="string" TItem="F_COMPTEA" DataSource="@db.F_COMPTEA" @bind-Value="@row.CA_Num">
                                                    <DropDownListEvents TValue="string" TItem="F_COMPTEA" />
                                                    <DropDownListFieldSettings Text="CA_Intitule" Value="CA_Num" />
                                                </SfDropDownList>
                                            </FormItem>
                                            <FormItem LabelAlign="AntLabelAlignType.Left" Label="Libelle" LabelColSpan="6">
                                                <SfTextBox @bind-Value="@row.Libelle" />
                                            </FormItem>

                                        </Card>
                                    </GridCol>
                                    
                                    <GridCol Xs="24" Md="24">
                                        <div style="height: 45vh;" class="no-border small-grid">
                                            <SfGrid  Height="100%" Toolbar="@(new List<string>() { "Add", "Delete" })" DataSource="@(lignes)">
                                                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                                                <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="Syncfusion.Blazor.Grids.EditMode.Normal">
                                                    <HeaderTemplate>
                                                        <span>@((context as API_T_FraisLigne).Libelle)</span>
                                                    </HeaderTemplate>
                                                </GridEditSettings>
                                                <GridEvents OnActionBegin="EditGrid" TValue="API_T_FraisLigne"></GridEvents>
                                                <GridTemplates>
                                                    <EmptyRecordTemplate>
                                                        <Empty></Empty>
                                                    </EmptyRecordTemplate>
                                                </GridTemplates>
                                                <GridAggregates>
                                                    <GridAggregate>
                                                        <GridAggregateColumns>
                                                            <GridAggregateColumn Field="Montant" Type="AggregateType.Sum" Format="N2">
                                                                <FooterTemplate>
                                                                    @{
                                                                        var SumValue = (context as AggregateTemplateContext);
                                                                        <div>
                                                                            @SumValue.Sum
                                                                        </div>
                                                                    }
                                                                </FooterTemplate>

                                                            </GridAggregateColumn>
                                                        </GridAggregateColumns>
                                                    </GridAggregate>
                                                </GridAggregates>
                                                <GridColumns>
                                                    <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_FraisLigne.id) HeaderText="#" IsPrimaryKey="true" Visible="false" IsIdentity="true"></GridColumn>
                                                    <GridColumn Width="250" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_FraisLigne.Libelle) HeaderText="Affectation">
                                                         <Template>
                                                             @{
                                                                <div>@db.API_T_Affectation.Where(a => a.id == (context as API_T_FraisLigne).Affectation).SingleOrDefault()?.Intitule</div>
                                                             }
                                                        </Template>
                                                        <EditTemplate>
                                                            <div class="ls-parent">
                                                                <div class="ls-child-left">
                                                                    <SfDropDownList AllowFiltering TValue="int" TItem="API_T_Affectation" DataSource="@db.API_T_Affectation.AsNoTracking().Where(a => 1 == 1)" @bind-Value="@((context as API_T_FraisLigne).Affectation)">
                                                                        <DropDownListEvents TValue="int" TItem="API_T_Affectation" />
                                                                        <DropDownListFieldSettings Text="Intitule" Value="id" />
                                                                    </SfDropDownList>
                                                                </div>
                                                                <div class="ls-child-right">
                                                                    <RadzenButton Click="AffectationsListe" Icon="reorder" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
                                                                </div>
                                                            </div>
                                                        </EditTemplate>
                                                    </GridColumn>
                                                    <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_FraisLigne.Libelle) HeaderText="Libellé"></GridColumn>
                                                    <GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(API_T_FraisLigne.Montant) HeaderText="Montant" Format="N2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" EditorSettings="@(parameters)"></GridColumn>
                                                </GridColumns>
                                            </SfGrid>
                                        </div>

                                    </GridCol>
                                </GridRow>
                            </ContentTemplate>
                        </TabItem>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Fichiers"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <Card Style="height: 100%;">
                                    <FilesManager table="Caisse" id="@id" societe="@session.Societe.id.ToString()"></FilesManager>
                                </Card>
                            </ContentTemplate>
                        </TabItem>
                    </TabItems>
                </SfTab>
            </Form>


        </GridCol>

    </GridRow>
</div>




@code {
    [CascadingParameter]
    public SessionDT session { get; set; }
    DB db = new DB();
    EditForm form = new EditForm();
    [Parameter]
    public int id { get; set; } = 0;
    [Parameter]
    public int caisse { get; set; } = 0;
    [Parameter]
    public int type { get; set; }
    [Parameter]
    public string operation { get; set; }
    private API_T_FraisEntete row { get; set; }
    List<API_T_FraisLigne> lignes = new List<API_T_FraisLigne>();
    Helpers helpers = new Helpers();
    [Parameter] public bool detail { get; set; } = false;
    NumericEditCellParams parameters = new NumericEditCellParams() { Params = new NumericTextBoxModel<object>() { Decimals = 2, Format = "N2", ShowSpinButton = false } };
    [Parameter] public bool IsList { get; set; } = true;
    [Parameter] public int Projet { get; set; } = 0;
    [Parameter] public int Materiel { get; set; } = 0;
    [Parameter] public int Personnel { get; set; } = 0;
    [Parameter] public int Tiers { get; set; } = 0;
    public Syncfusion.Blazor.Data.Query LocalDataQuery = new Syncfusion.Blazor.Data.Query().Take(10);

    protected override async Task OnInitializedAsync()
    {
        db = session.db;

        if (id == 0)
        {
            row = new API_T_FraisEntete();
            row.Date = DateTime.Today;
            row.Type = type;
            row.Libelle = null;
            string piece = "FRP0000001";

            var dt = db.API_T_FraisEntete.Where(a => a.Piece.StartsWith(("FRP"))).ToList();
            if (dt.Count != 0)
            {
                piece = fn.getNextCode(dt.Max(a => a.Piece));
            }
            row.Piece = piece;
            if (Materiel != 0)
            {
                row.Materiel = Materiel;
            }
            if (Projet != 0)
            {
                row.Projet = Projet;
            }

        }
        else
        {
            row = db.API_T_FraisEntete.Where(a => a.id == id).SingleOrDefault();
            lignes = db.API_T_FraisLigne.Where(a => a.Entete == id).OrderBy(a => a.id).ToList();
        }

    }
    private void Submit(bool close)
    {
        try
        {
            if (id == 0)
            {
                db.API_T_FraisEntete.Add(row);
            }
            db.SaveChanges();
            id = row.id;
            if (close)
            {
                DialogService.Close();
            }



        }
        catch (Exception ex)
        {
            Message.Error(ex.ToString());
        }
    }

    public void EditGrid(ActionEventArgs<API_T_FraisLigne> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

            if (args.Action == "Add")
            {
                if (id == 0)
                {
                    Submit(false);
                }
                API_T_FraisLigne item = args.Data;
                item.Entete = this.id;
                db.Add(item);
                db.SaveChanges();
            }
            if (args.Action != "Add")
            {
                var local = db.Set<API_T_FraisLigne>().Local.FirstOrDefault(a => a.id == args.Data.id);
                if (local != null)
                {
                    db.Entry(local).State = EntityState.Detached;
                }
                db.Entry(args.Data).State = EntityState.Modified;
                db.SaveChanges();


            }

        }

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            var local = db.Set<API_T_FraisLigne>().Local.FirstOrDefault(a => a.id == args.Data.id);
            if (local != null)
            {
                db.Entry(local).State = EntityState.Detached;
            }
            db.Entry(args.Data).State = EntityState.Deleted;
            db.SaveChanges();
        }

        Decimal montant = db.API_T_FraisLigne.Where(a => a.Entete == id).Sum(a => a.Montant);
        row.Montant = montant;
        string q1 = "UPDATE API_T_FraisEntete SET Montant = {0} WHERE id = {1}";
        db.Database.ExecuteSqlRaw(q1, montant, id);
    }
    private string getTiers()
    {
        string rs = "Client";
        if (type != 0)
        {
            rs = "Fournisseur";
        }
        return rs;
    }
    private void OnMenuClick(MenuClickEventArgs<FileManagerDirectoryContent> args)
    {

        if (args.Item.Text == "Ouvert")
        {

        }
    }
    private void OnFileOpen(FileOpenEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.FileDetails.Name.ToUpper().EndsWith(".PDF"))
        {
            DialogService.OpenAsync<PdfViewer>(args.FileDetails.Name,
       new Dictionary<string, object>() { { "DocumentPath", helpers.getPath(session.Societe.id.ToString(), "Projet", this.id.ToString()) + "/" + args.FileDetails.Name } },
       new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "98%", Height = "95%" });
        }
        if (args.FileDetails.Name.ToUpper().EndsWith(".DOC") || args.FileDetails.Name.ToUpper().EndsWith(".DOCX") || args.FileDetails.Name.ToUpper().EndsWith(".TXT"))
        {
            DialogService.OpenAsync<WordViewer>(args.FileDetails.Name,
       new Dictionary<string, object>() { { "DocumentPath", helpers.getPath(session.Societe.id.ToString(), "Projet", this.id.ToString()) + "/" + args.FileDetails.Name } },
       new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "98%", Height = "95%" });
        }

    }
    private async Task AffectationsListe()
    {
        await DialogService.OpenAsync<BusinessWeb.Pages.Traitement.ISC_Caisse.Structure.Affectations>($"Affectations",
        new Dictionary<string, object>(),
        new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "700px", Height = "90%" });
    }
    private async Task Print()
    {
       /* List<JSReportParameter> parameters = new List<JSReportParameter>();

        parameters.Add(new JSReportParameter { Name = "id", Values = new List<string>() { this.id.ToString() } });
        await DialogService.OpenAsync<ReportViewer>(row.Piece,
        new Dictionary<string, object>() { { "ReportName", "reports\\caisses\\DepenseCaisse" }, { "parameters", parameters } },
        new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "900px", Height = "95%" });*/
    }

}