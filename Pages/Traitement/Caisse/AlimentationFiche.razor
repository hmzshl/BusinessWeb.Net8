
<SfToolbar CssClass="btns">
    <ToolbarItems>
        <ToolbarItem Align="ItemAlign.Right" Visible=@(sc.IsInRole("Admin","Super Admin","Direction"))>
            <Template>
                <SfButton IconCss="e-icons e-circle-check" Disabled=@(row.Type == 1) OnClick="Valider">Valider</SfButton>
            </Template>
        </ToolbarItem>
        <ToolbarItem Align="ItemAlign.Right">
            <Template>
                <SfButton IconCss="e-icons e-print" OnClick="Print">Imprimer</SfButton>
            </Template>
        </ToolbarItem>
        <ToolbarItem Align="ItemAlign.Right">
            <Template>
                <SfButton OnClick="@(args => Submit(true))" IconCss="e-icons e-save" IsPrimary="true">Enregistrer</SfButton>
            </Template>
        </ToolbarItem>
    </ToolbarItems>
</SfToolbar>
<GridRow>
    <GridCol Xs="24" Md="24">
        <Form Model="@row" Size="@AntSizeLDSType.Small" Layout="@FormLayout.Horizontal" LabelColSpan="6" Context="row">
            <SfTab CssClass="e-fill">
                <TabEvents Selecting="@(args => fn.DisableTabSelect(args))"/><TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Identification"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <GridRow>
                                <GridCol Xs="24" Md="8">
                                    <Card Style="height: 100px;">
                                        <FormItem LabelAlign="AntLabelAlignType.Left" Label="Numéro" LabelColSpan="12">
                                            <SfTextBox @bind-Value="@(row.Numero)" Readonly />
                                        </FormItem>
                                        <FormItem LabelAlign="AntLabelAlignType.Left" Label="Date" LabelColSpan="12">
                                            <SfDatePicker TValue="DateTime?" @bind-Value="@row.Date" Readonly=@(row.Type == 1)/>
                                        </FormItem>
                                        <FormItem LabelAlign="AntLabelAlignType.Left" Label="Montant" LabelColSpan="12">
                                            <SfNumericTextBox @bind-Value="@row.Montant" ShowSpinButton="false" Readonly=@(row.Type == 1) />
                                        </FormItem>
                                    </Card>
                                </GridCol>
                                <GridCol Xs="24" Md="16">
                                    <Card Style="height: 100px;">
                                        <FormItem LabelAlign="AntLabelAlignType.Left" Label="Caisse" LabelColSpan="8">
                                            <SfDropDownList TValue="int" TItem="API_T_Caisse" DataSource="@(db.API_T_Caisse)" @bind-Value="@row.Caisse" Readonly>
                                                <DropDownListEvents TValue="int" TItem="API_T_Caisse" ValueChange="@CaisseChanged" />
                                                <DropDownListFieldSettings Text="C_Nom" Value="id" />
                                            </SfDropDownList>
                                        </FormItem>
                                        <FormItem LabelAlign="AntLabelAlignType.Left" Label="Bénéficiaire" LabelColSpan="8">
                                            <SfDropDownList AllowFiltering TValue="int" TItem="API_T_Personnel" DataSource="@(db.API_T_Personnel.OrderBy(a => a.Nom))" @bind-Value="@row.Personnel" Readonly=@(row.Type == 1)>
                                                <DropDownListEvents TValue="int" TItem="API_T_Personnel" />
                                                <DropDownListFieldSettings Text="Nom" Value="id" />
                                            </SfDropDownList>
                                        </FormItem>

                                    </Card>
                                </GridCol>
                                <GridCol Xs="24" Md="24">
                                    <Card>
                                        <FormItem LabelAlign="AntLabelAlignType.Left" Label="Motif" LabelColSpan="4">
                                            <SfTextBox @bind-Value="@row.Libelle" Readonly=@(row.Type == 1) />
                                        </FormItem>

                                    </Card>
                                </GridCol>
                            </GridRow>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
        </Form>


    </GridCol>

</GridRow>




@code {
    [CascadingParameter]
    public SessionDT session { get; set; }
    DB db = new DB();
    EditForm form = new EditForm();
    [Parameter]
    public int id { get; set; } = 0;
    [Parameter]
    public int caisse { get; set; } = 0;
    [Parameter]
    public int type { get; set; }
    [Parameter]
    public string operation { get; set; }
    private API_T_CaisseEntete row { get; set; }
    List<API_T_CaisseLigne> lignes = new List<API_T_CaisseLigne>();
    Helpers helpers = new Helpers();
    [Parameter] public bool detail { get; set; } = false;
    NumericEditCellParams parameters = new NumericEditCellParams() { Params = new NumericTextBoxModel<object>() { Decimals = 2, Format = "N2", ShowSpinButton = false } };
    [Parameter] public bool IsList { get; set; } = true;
    [Parameter] public int Projet { get; set; } = 0;
    [Parameter] public int Materiel { get; set; } = 0;
    [Parameter] public int Personnel { get; set; } = 0;
    [Parameter] public int Tiers { get; set; } = 0;


    protected override void OnInitialized()
    {
        db = session.db;

        if (id == 0)
        {
            row = new API_T_CaisseEntete();
            row.Date = DateTime.Today;
            row.Type = type;
            row.Libelle = null;
            
            var cs = db.API_T_Caisse;
            if (cs.Count() != 0)
            {
                row.Caisse = cs.First().id;
                string piece = (cs.First().C_Racine ?? "") + "0000001";

                var dt = db.API_T_CaisseEntete.Where(a => a.Numero.StartsWith((cs.First().C_Racine ?? ""))).ToList();
                if (dt.Count != 0)
                {
                    piece = fn.getNextCode(dt.Max(a => a.Numero));
                }
                row.Numero = piece;
            }
            if (Materiel != 0)
            {
                row.Materiel = Materiel;
            }
            if (Projet != 0)
            {
                row.Projet = Projet;
            }
            if (Personnel != 0)
            {
                row.Personnel = Personnel;
            }
            row.Caisse = caisse;
        }
        else
        {
            row = db.API_T_CaisseEntete.Where(a => a.id == id).SingleOrDefault();
            lignes = db.API_T_CaisseLigne.Where(a => a.Entete == id).OrderBy(a => a.id).ToList();
        }

    }
    private void Submit(bool close)
    {
        try
        {
            if (id == 0)
            {
                var hist = new API_T_HistoriquePiece();
                hist.DO_Type = row.Type;
                hist.Piece = row.Numero;
                hist.Date = row.Date;
                hist.CreatedAt = DateTime.Now;
                hist.Tab = "API_T_CaisseEntete";

                db.API_T_HistoriquePiece.Add(hist);
                db.API_T_CaisseEntete.Add(row);
            }
            db.SaveChanges();
            id = row.id;
            if (close)
            {
                DialogService.Close();
            }



        }
        catch (Exception ex)
        {
            Message.Error(ex.ToString());
        }
    }
    public void EditGrid(ActionEventArgs<API_T_CaisseLigne> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

            if (args.Action == "Add")
            {
                if (id == 0)
                {
                    Submit(false);
                }
                API_T_CaisseLigne item = args.Data;
                item.Entete = this.id;
                item.Montant = item.Qte * item.PU;
                db.Add(item);
                db.SaveChanges();
            }
            if (args.Action != "Add")
            {
                args.Data.Montant = args.Data.Qte * args.Data.PU;
                var local = db.Set<API_T_CaisseLigne>().Local.FirstOrDefault(a => a.id == args.Data.id);
                if (local != null)
                {
                    db.Entry(local).State = EntityState.Detached;
                }
                db.Entry(args.Data).State = EntityState.Modified;
                db.SaveChanges();


            }

        }

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            var local = db.Set<API_T_CaisseLigne>().Local.FirstOrDefault(a => a.id == args.Data.id);
            if (local != null)
            {
                db.Entry(local).State = EntityState.Detached;
            }
            db.Entry(args.Data).State = EntityState.Deleted;
            db.SaveChanges();
        }

        Decimal montant = db.API_T_CaisseLigne.Where(a => a.Entete == id).Sum(a => a.Montant);
        row.Montant = montant;
        string lettre = helpers.getMontant(montant) + " DHS";
        row.MontantLettre = lettre;
        string q1 = "UPDATE API_T_CaisseEntete SET Montant = {0}, MontantLettre = {1} WHERE id = {2}";
        db.Database.ExecuteSqlRaw(q1, montant, lettre, id);
    }
    private string getTiers()
    {
        string rs = "Client";
        if (type != 0)
        {
            rs = "Fournisseur";
        }
        return rs;
    }
    private void OnMenuClick(MenuClickEventArgs<FileManagerDirectoryContent> args)
    {

        if (args.Item.Text == "Ouvert")
        {

        }
    }
    private void OnFileOpen(FileOpenEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.FileDetails.Name.ToUpper().EndsWith(".PDF"))
        {
            DialogService.OpenAsync<PdfViewer>(args.FileDetails.Name,
       new Dictionary<string, object>() { { "DocumentPath", helpers.getPath(session.Societe.id.ToString(), "Projet", this.id.ToString()) + "/" + args.FileDetails.Name } },
       new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "95%", Height = "95%" });
        }
        if (args.FileDetails.Name.ToUpper().EndsWith(".DOC") || args.FileDetails.Name.ToUpper().EndsWith(".DOCX") || args.FileDetails.Name.ToUpper().EndsWith(".TXT"))
        {
            DialogService.OpenAsync<WordViewer>(args.FileDetails.Name,
       new Dictionary<string, object>() { { "DocumentPath", helpers.getPath(session.Societe.id.ToString(), "Projet", this.id.ToString()) + "/" + args.FileDetails.Name } },
       new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "95%", Height = "95%" });
        }

    }
    private void CaisseChanged(ChangeEventArgs<int, API_T_Caisse> args)
    {
        if (id == 0)
        {
            var cs = db.API_T_Caisse.Where(a => a.id == args.Value).SingleOrDefault();
            if (cs != null)
            {
                string piece = (cs.C_Racine ?? "") + "0000001";

                var dt = db.API_T_CaisseEntete.Where(a => a.Numero.StartsWith((cs.C_Racine ?? ""))).ToList();
                if (dt.Count != 0)
                {
                    piece = fn.getNextCode(dt.Max(a => a.Numero));
                }
                row.Numero = piece;
            }
            else
            {
                row.Numero = null;
            }
        }
    }
    private async Task Print()
    {
        List<JSReportParameter> parameters = new List<JSReportParameter>();

        parameters.Add(new JSReportParameter { Name = "id", Values = new List<string>() { this.id.ToString() } });
        await DialogService.OpenAsync<ReportViewer>(row.Numero,
        new Dictionary<string, object>() { { "ReportName", "reports\\caisses\\AlimentationCaisse" }, { "parameters", parameters } },
        new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "900px", Height = "95%" });
    }
    private async Task Valider()
    {
        bool isConfirm = await SyncDialog.ConfirmAsync("Voulez vous vraiment valider cet élément?", "Validation");
        {
            if(isConfirm)
            {
                row.Type = 1;
                row.Sense = 1;
                db.SaveChanges();
                DialogService.Close();
            }
        }
    }

}