@page "/tr-reglement"
@attribute [Authorize(Roles = "Super Admin,Admin,Direction")]

@if (IsLoaded)
{
    <Card_1 Title="REGLEMENTS">
        <RadzenContent Container="main">
            <div class="grid-90">
                <SfToolbar>
                    <ToolbarItems>
                        <ToolbarItem Align="ItemAlign.Left" Type="ItemType.Input">
                            <Template>
                                <div style="margin-left: 5px; margin-right: 10px;" id="debut">
                                    <SfDatePicker Placeholder="Date Début" Width="130px" TValue="DateTime?" @bind-Value="date1" ShowClearButton ShowTodayButton>
                                     <DatePickerEvents TValue="DateTime?" ValueChange="@(args => UpdateGrid())"> </DatePickerEvents>
                                 </SfDatePicker>
                             </div>

                         </Template>
                     </ToolbarItem>
                     <ToolbarItem Align="ItemAlign.Left" Type="ItemType.Input">
                         <Template>
                             <div style="margin-left: 5px; margin-right: 10px;" id="fin">
                                 <SfDatePicker Placeholder="Date Fin" Width="130px" TValue="DateTime?" @bind-Value="date2" ShowClearButton ShowTodayButton>
                                     <DatePickerEvents TValue="DateTime?" ValueChange="@(args => UpdateGrid())"> </DatePickerEvents>
                                 </SfDatePicker>
                             </div>

                         </Template>
                     </ToolbarItem>
                     <ToolbarItem Align="ItemAlign.Right" Type="ItemType.Input">
                         <Template>
                             <RadzenLabel Text="OPERATION" Component="operation" />
                             <div style="padding-left: 10px; margin-right: 0px;" id="operation">
                                  <SfDropDownList ShowClearButton Width="130px" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering DataSource="@operations" TValue="string" TItem="string" @bind-Value="@selected_operation">
                                       <DropDownListEvents TValue="string" TItem="string" ValueChange="@(args => UpdateGrid())"/>
                                     </SfDropDownList>
                                 </div>
                             </Template>
                         </ToolbarItem>
                     <ToolbarItem Align="ItemAlign.Right" Type="ItemType.Input">
                         <Template>
                             <RadzenLabel Text="USER" Component="user" />
                             <div style="padding-left: 10px;" id="user">
                                     <SfDropDownList ShowClearButton Width="150px" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering DataSource="@users" TValue="string" TItem="string" @bind-Value="@selected_user">
                                         <DropDownListEvents TValue="string" TItem="string" ValueChange="@(args => UpdateGrid())" />
                                     </SfDropDownList>
                                 </div>
                             </Template>
                         </ToolbarItem>
                         
                         <ToolbarItem TooltipText="CHERCHE" Align="ItemAlign.Right" Overflow="OverflowOption.Show" Type="ItemType.Input">
                             <Template>
                                 <SfTextBox Width="180px" Placeholder="CHERCHE" ValueChanged="@(args => DefaultGrid.SearchAsync(args))"></SfTextBox>
                             </Template>
                         </ToolbarItem>
                         <ToolbarItem OnClick=@(args => (DefaultGrid.PrintAsync())) TooltipText="Imprimer" Text="Imprimer" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Right" PrefixIcon="e-icons e-print"></ToolbarItem>
                         <ToolbarItem OnClick=@(args => (DefaultGrid.ExportToExcelAsync())) TooltipText="Export Excel" Text="Export Excel" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Right" PrefixIcon="e-icons e-export-excel"></ToolbarItem>
                         <ToolbarItem OnClick=@(args => (UpdateGrid())) TooltipText="Actualiser" Text="Actualiser" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Right" PrefixIcon="e-icons e-refresh"></ToolbarItem>
                    </ToolbarItems>
                </SfToolbar>
                <div class="grid-84">
                 <SfGrid AllowFiltering AllowSorting Height="100%" AllowResizing AllowSelection ShowColumnChooser="true" ID="Grid" @ref="DefaultGrid" AllowPdfExport="true" AllowExcelExport="true" DataSource="@items" AllowPaging>
                     <GridEditSettings Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" />
                     <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                     <GridPageSettings PageSize="100"></GridPageSettings>
                     <GridTemplates>
                         <EmptyRecordTemplate>
                             <Empty></Empty>
                         </EmptyRecordTemplate>
                     </GridTemplates>
                     <GridColumns>
                         <GridColumn Width="120" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.Timestamp)" HeaderText="Heure"></GridColumn>
                         <GridColumn Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.Operation)" HeaderText="Operation">
                             <Template>
                                 @{
                                        var dt = (context as API_V_AUDIT_F_CREGLEMENT);
                                        if (dt.Operation == "Insertion")
                                        {
                                            <div style="text-align: left;">
                                                <span class="statustxt e-activecolor">@dt.Operation</span>
                                            </div>
                                        }
                                        else if (dt.Operation == "Suppression")
                                        {
                                            <div style="text-align: left;">
                                                <span class="statustxt e-inactivecolor">@dt.Operation</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <div style="text-align: left;">
                                                <span class="statustxt e-infocolor">@dt.Operation</span>
                                            </div>
                                        }
                                    }
                                </Template>
                            </GridColumn>
                            <GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.Sage_Name)" HeaderText="User"></GridColumn>
                            <GridColumn Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.Host_Name)" HeaderText="Host"></GridColumn>
                            <GridColumn Width="140" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.Suser_Name)" HeaderText="Session"></GridColumn>
                            <GridColumn Format="d" Width="70" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.RG_Date)" HeaderText="Date" />
                            <GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.RG_Piece)" HeaderText="Pièce" />
                            <GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.R_Intitule)" HeaderText="Type" />
                            <GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.CT_Num)" HeaderText="Numéro"  />
                            <GridColumn Width="200" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.CT_Intitule)" HeaderText="Intitulé Tiers" />
                            <GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.JO_Num)" HeaderText="N° Jo." />
                            <GridColumn Width="200" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.JO_Intitule)" HeaderText="Journal" />
                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.RG_Libelle)" HeaderText="Libellé" />
                            <GridColumn Width="90" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.RG_Montant)" HeaderText="Montant" Format="### ### ##0.00;-### ### ##0.00;#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
                            <GridColumn Format="d" Width="70" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.RG_DateEcheance)" HeaderText="Ech" />
                            <GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_AUDIT_F_CREGLEMENT.Echeance)" HeaderText="Statut" />

                        </GridColumns>
                        <SfSpinner @bind-Visible="@loading">
                        </SfSpinner>
                    </SfGrid>
                </div>

            </div>
        </RadzenContent>
    </Card_1>
}
else
{
    <div class="center-screen">
        <Loading_1 />
    </div>
}





@code
{

    [CascadingParameter] public SessionDT session { get; set; } = new SessionDT();
    DB db = new DB();
    //Components
    private SfGrid<API_V_AUDIT_F_CREGLEMENT> DefaultGrid;
    bool IsLoaded = false;
    DateTime? date1 = DateTime.Today;
    DateTime? date2;
    private List<API_V_AUDIT_F_CREGLEMENT> items = new List<API_V_AUDIT_F_CREGLEMENT>();
    bool loading = false;

    List<string> domaines = new List<string>();
    List<string> types = new List<string>();
    List<string> users = new List<string>();
    List<string> operations = new List<string>();

    string selected_domaine;
    string selected_user;
    string selected_type;
    string selected_operation;


    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
        db = session.db;

        //domaines = db.API_V_AUDIT_F_CREGLEMENT.Select(a => a.DomaineIntitule).Distinct().ToList();
        users = db.API_V_AUDIT_F_CREGLEMENT.Select(a => a.Sage_Name).Distinct().ToList();
        operations = db.API_V_AUDIT_F_CREGLEMENT.Select(a => a.Operation).Distinct().ToList();

        await UpdateGrid();
        IsLoaded = true;

    }
    private async Task UpdateTypes()
    {
        //types = db.API_V_AUDIT_F_CREGLEMENT.Where(a => a.DomaineIntitule == selected_domaine).Select(a => a.TypeIntitule).Distinct().ToList();
        await UpdateGrid();
    }
    private async Task UpdateGrid()
    {
        items = db.API_V_AUDIT_F_CREGLEMENT
        .Where(a => (
            (date1 != null && a.Timestamp >= date1) || date1 == null)
         && ((date2 != null && a.Timestamp <= date2) || date2 == null)
               && (selected_user == null || (a.Sage_Name == selected_user))
               && (selected_operation == null || (a.Operation == selected_operation))
                )
                .OrderByDescending(a => a.Timestamp)
                .ToList();        
    }


}