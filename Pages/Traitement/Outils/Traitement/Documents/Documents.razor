@if (IsLoaded)
{
	<Card_1 Title="@title">
		<RadzenContent Container="main">
			<div class="grid-90">
				<SfToolbar>
					<ToolbarItems>
						<ToolbarItem OnClick=@(args => (DefaultGrid.OpenColumnChooserAsync(1,1))) TooltipText="Colonnes selectionnées" Text="Colonnes selectionnées" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Left" PrefixIcon="e-icons e-more-vertical-2"></ToolbarItem>
						<ToolbarItem Align="ItemAlign.Left" Type="ItemType.Separator" />
						<ToolbarItem Align="ItemAlign.Left" Type="ItemType.Input">
							<Template>
								<div style="margin-left: 5px; margin-right: 10px;" id="debut">
									<SfDatePicker ShowClearButton Placeholder="Date Début" Width="140px" TValue="DateTime?" @bind-Value="date1" ShowTodayButton>
										<DatePickerEvents TValue="DateTime?" ValueChange="@(args => UpdateGrid())"> </DatePickerEvents>
									</SfDatePicker>
								</div>

							</Template>
						</ToolbarItem>

						<ToolbarItem Align="ItemAlign.Left" Type="ItemType.Input">
							<Template>
								<div style="margin-left: 5px; margin-right: 10px;" id="fin">
									<SfDatePicker ShowClearButton Placeholder="Date Fin" Width="140px" TValue="DateTime?" @bind-Value="date2" ShowTodayButton>
										<DatePickerEvents TValue="DateTime?" ValueChange="@(args => UpdateGrid())"> </DatePickerEvents>
									</SfDatePicker>
								</div>

							</Template>
						</ToolbarItem>
						<ToolbarItem Align="ItemAlign.Right" Type="ItemType.Input">
							<Template>
								<RadzenLabel Text="Type" Component="type" />
								<div style="padding-left: 10px; margin-right: 10px;" id="type">
									<SfMultiSelect Width="200px" @bind-Value=@selected_types TValue="List<string>" Mode="@VisualMode.CheckBox" TItem="string" AllowFiltering="true" DataSource="@(types)" ShowSelectAll EnableSelectionOrder ShowDropDownIcon PopupHeight="350px">
										<MultiSelectFieldSettings Text="TypeIntitule" Value="TypeIntitule"></MultiSelectFieldSettings>
										<MultiSelectEvents TItem="string" TValue="List<string>" ValueChange="@(args => UpdateGrid())"></MultiSelectEvents>
									</SfMultiSelect>
								</div>
							</Template>
						</ToolbarItem>
						<ToolbarItem Align="ItemAlign.Right" Type="ItemType.Input">
							<Template>
								<RadzenLabel Text="Etat" Component="etat" />
								<div style="padding-left: 10px; margin-right: 10px;" id="etat">
									<SfMultiSelect Width="140px" @bind-Value=@selected_statuts TValue="List<string>" Mode="@VisualMode.CheckBox" TItem="string" AllowFiltering="true" DataSource="@(statuts)" ShowSelectAll EnableSelectionOrder ShowDropDownIcon PopupHeight="350px">
										<MultiSelectFieldSettings Text="EtatReglement" Value="EtatReglement"></MultiSelectFieldSettings>
										<MultiSelectEvents TItem="string" TValue="List<string>" ValueChange="@(args => UpdateGrid())"></MultiSelectEvents>
									</SfMultiSelect>
								</div>
							</Template>
						</ToolbarItem>
						<ToolbarItem TooltipText="CHERCHE" Align="ItemAlign.Right" Overflow="OverflowOption.Show" Type="ItemType.Input">
							<Template>
								<SfTextBox Width="180px" Placeholder="RECHERCHE" ValueChanged="@(args => DefaultGrid.SearchAsync(args))"></SfTextBox>
							</Template>
						</ToolbarItem>

						<ToolbarItem OnClick=@(args => (DefaultGrid.PrintAsync())) TooltipText="Imprimer" Text="Imprimer" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Right" PrefixIcon="e-icons e-print"></ToolbarItem>
						<ToolbarItem OnClick=@(args => (DefaultGrid.ExportToExcelAsync(fn.excelExport()))) TooltipText="Export Excel" Text="Export Excel" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Right" PrefixIcon="e-icons e-export-excel"></ToolbarItem>
						<ToolbarItem OnClick=@(args => (UpdateGrid())) TooltipText="Actualiser" Text="Actualiser" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Right" PrefixIcon="e-icons e-refresh"></ToolbarItem>
					</ToolbarItems>
				</SfToolbar>
				<div class="grid-84" style="zoom: @session.zoomLevel;">
					@if (loading)
					{
						<div class="center-screen">
							<Loading_1 />
						</div>
					}
					else
					{
						<SfGrid EnablePersistence AllowFiltering AllowReordering AllowSorting Height="100%" AllowResizing AllowSelection ShowColumnChooser="true" ID="DocumentGrid" @ref="DefaultGrid" AllowPdfExport="true" AllowExcelExport="true" DataSource="@items" AllowPaging ContextMenuItems="@(contextMenu())">
							<GridEditSettings Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" />
							<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
							<GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple" />
							<GridPageSettings PageSize="100"></GridPageSettings>
							<GridEvents Created="CreatedHandler" OnRecordDoubleClick="@(args => ShowPiece(args.RowData.DO_Piece,args.RowData.DO_Type))" ContextMenuItemClicked="OnContextMenuClick" TValue="API_V_DOCENTETE"></GridEvents>
							<GridTemplates>
								<EmptyRecordTemplate>
									<Empty></Empty>
								</EmptyRecordTemplate>
							</GridTemplates>
							<GridColumns>
								<GridColumn Width="40" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderText="Sta">
									<Template>
										@{
											var dt = (context as API_V_DOCENTETE);
											if (dt.DO_Statut == 2)
											{
												<RadzenIcon Icon="check_circle" IconStyle="IconStyle.Success" />
											}
											else if (dt.DO_Statut == 1)
											{
												<RadzenIcon Icon="watch_later" />
											}
											else
											{
												<RadzenIcon Icon="edit_note" IconStyle="IconStyle.Primary" />
											}
										}
									</Template>
								</GridColumn>
								<GridColumn Width="40" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderText="Imp">
									<Template>
										@{
											var dt = (context as API_V_DOCENTETE);
											if (dt.DO_Imprim == 1)
											{
												<RadzenIcon Icon="print" IconStyle="IconStyle.Secondary" />
											}
										}
									</Template>
								</GridColumn>
								<GridColumn Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DomaineIntitule)" HeaderText="Domaine"></GridColumn>
								<GridColumn Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.TypeIntitule)" HeaderText="Type"></GridColumn>
								<GridColumn Width="70" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DO_Date)" HeaderText="Date" Format="dd/MM/yy"></GridColumn>
								<GridColumn Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DO_Piece)" HeaderText="Pièce"></GridColumn>
								<GridColumn Width="130" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DE_Intitule)" HeaderText="Dépot"></GridColumn>
								<GridColumn Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DO_Tiers)" HeaderText="N° Tiers"></GridColumn>
								<GridColumn Width="180" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.CT_Intitule)" HeaderText="@(fn.getTiers(domaine))"></GridColumn>
								<GridColumn Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.CA_Num)" HeaderText="Affaire" Visible="false"></GridColumn>
								<GridColumn Width="150" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.CA_Intitule)" HeaderText="Intitulé Affaire" Visible="false"></GridColumn>
								<GridColumn Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DO_TotalHT)" HeaderText="HT" Format="N2"></GridColumn>
								<GridColumn Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DL_MontantTTC)" HeaderText="TTC" Format="N2"></GridColumn>
								<GridColumn Width="130" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.CO_Nom)" HeaderText="Collaborateur"></GridColumn>
								<GridColumn Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.CG_Num)" HeaderText="Compte" Visible="false"></GridColumn>
								<GridColumn Width="130" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DO_Coord01)" HeaderText="Entete 1" Visible="false"></GridColumn>
								<GridColumn Width="130" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DO_Coord02)" HeaderText="Entete 2" Visible="false"></GridColumn>
								<GridColumn Width="130" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DO_Coord03)" HeaderText="Entete 3" Visible="false"></GridColumn>
								<GridColumn Width="130" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DO_Coord04)" HeaderText="Entete 4" Visible="false"></GridColumn>
								<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.PROT_User)" HeaderText="User" Visible="false"></GridColumn>
								<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.cbCreation)" HeaderText="Creation" Visible="false" Format="dd/MM/yy"></GridColumn>
								<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.cbModification)" HeaderText="Modification" Visible="false" Format="dd/MM/yy"></GridColumn>

							</GridColumns>

						</SfGrid>
					}

				</div>

			</div>
		</RadzenContent>
	</Card_1>

	<SfDialog Target="#target" Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@dg_date" CloseOnEscape>
		<DialogTemplates>
			<Header>
				Date
			</Header>
			<Content>
				<SfDatePicker TValue="DateTime"
							  @bind-Value="@date" />
			</Content>
		</DialogTemplates>
		<DialogAnimationSettings></DialogAnimationSettings>
		<DialogEvents></DialogEvents>
		<DialogButtons>
			<DialogButton Content="OK" IsPrimary="true" OnClick="SubmitDate"></DialogButton>
			<DialogButton Content="Annuler" IsPrimary="true" OnClick="@(args => dg_date = false)"></DialogButton>
		</DialogButtons>
	</SfDialog>
	<SfDialog Target="#target" Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@dg_souche" CloseOnEscape>
		<DialogTemplates>
			<Header>
				Souche
			</Header>
			<Content>
				<SfDropDownList Query="@fn.LocalDataQuery" Width="100%" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering DataSource="@(list_souches)" TValue="short?" TItem="P_SOUCHEVENTE" @bind-Value="@souche">
					<DropDownListEvents TValue="short?" TItem="P_SOUCHEVENTE" />
					<DropDownListFieldSettings Text="S_Intitule" Value="cbIndice" />
				</SfDropDownList>
			</Content>
		</DialogTemplates>
		<DialogAnimationSettings></DialogAnimationSettings>
		<DialogEvents></DialogEvents>
		<DialogButtons>
			<DialogButton Content="OK" IsPrimary="true" OnClick="SubmitSouche"></DialogButton>
			<DialogButton Content="Annuler" IsPrimary="true" OnClick="@(args => dg_souche = false)"></DialogButton>
		</DialogButtons>
	</SfDialog>
	<SfDialog Target="#target" Width="320px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@dg_interne" CloseOnEscape>
		<DialogTemplates>
			<Header>
				Document interne
			</Header>
			<Content>
				<SfDropDownList Query="@fn.LocalDataQuery" Width="100%" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering DataSource="@(list_internes)" TValue="short?" TItem="P_INTERNE" @bind-Value="@interne">
					<DropDownListEvents TValue="short?" TItem="P_INTERNE" />
					<DropDownListFieldSettings Text="D_Intitule" Value="cbIndice" />
				</SfDropDownList>
			</Content>
		</DialogTemplates>
		<DialogAnimationSettings></DialogAnimationSettings>
		<DialogEvents></DialogEvents>
		<DialogButtons>
			<DialogButton Content="OK" IsPrimary="true" OnClick="SubmitInterne"></DialogButton>
			<DialogButton Content="Annuler" IsPrimary="true" OnClick="@(args => dg_interne = false)"></DialogButton>
		</DialogButtons>
	</SfDialog>
	<SfDialog Target="#target" Width="380px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@dg_tiers" CloseOnEscape>
		<DialogTemplates>
			<Header>
				@(fn.getTiers(domaine))
			</Header>
			<Content>
				<SfDropDownList Query="@fn.LocalDataQuery" Width="100%" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering DataSource="@(list_tiers)" TValue="string" TItem="F_COMPTET" @bind-Value="@tiers">
					<DropDownListEvents TValue="string" TItem="F_COMPTET" />
					<DropDownListFieldSettings Text="CT_Intitule" Value="CT_Num" />
				</SfDropDownList>
			</Content>
		</DialogTemplates>
		<DialogAnimationSettings></DialogAnimationSettings>
		<DialogEvents></DialogEvents>
		<DialogButtons>
			<DialogButton Content="OK" IsPrimary="true" OnClick="SubmitTiers"></DialogButton>
			<DialogButton Content="Annuler" IsPrimary="true" OnClick="@(args => dg_tiers = false)"></DialogButton>
		</DialogButtons>
	</SfDialog>
}
else
{
	<div class="center-screen">
		<Loading_1 />
	</div>
}




@code
{

	[CascadingParameter] public SessionDT session { get; set; } = new SessionDT();
	DB db = new DB();
	//Components
	[Parameter] public int domaine { get; set; } = 0;
	[Parameter] public string title { get; set; } = "";
	private SfGrid<API_V_DOCENTETE> DefaultGrid;
	bool IsLoaded = false;
	bool loading = false;
	DateTime? date1 = new DateTime(DateTime.Today.Year, 1, 1);
	DateTime? date2;
	private List<API_V_DOCENTETE> items = new List<API_V_DOCENTETE>();


	List<string> domaines = new List<string>();
	List<string> types = new List<string>();

	string selected_domaine;
	List<string> statuts = new List<string>();
	List<string> selected_types = new List<string>();
	List<string> selected_statuts = new List<string>();

	bool dg_date = false;
	bool dg_tiers = false;
	bool dg_numero = false;
	bool dg_souche = false;
	bool dg_interne = false;

	DateTime date = DateTime.Today;
	string tiers;
	short? souche = 1;
	short? interne = 5;
	List<F_COMPTET> list_tiers = new List<F_COMPTET>();
	List<P_SOUCHEVENTE> list_souches = new List<P_SOUCHEVENTE>();
	List<P_INTERNE> list_internes = new List<P_INTERNE>();
	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(1);
		db = session.db;
		GC.Collect();

		types = db.API_V_DOCENTETE.Where(a => a.DO_Domaine == domaine).Select(a => a.TypeIntitule).Distinct().ToList();
		statuts = db.API_V_DOCENTETE.Where(a => a.DO_Domaine == domaine).Select(a => a.EtatReglement).Distinct().ToList();
		selected_types = types;
		selected_statuts = statuts;
		list_tiers = db.F_COMPTET.Where(a => a.CT_Type == domaine).Select(a => new F_COMPTET { CT_Num = a.CT_Num, CT_Intitule = a.CT_Num + " - " + a.CT_Intitule }).OrderBy(a => a.CT_Intitule).ToList();
		list_souches = db.P_SOUCHEVENTE.Where(a => a.S_Intitule != "").ToList();
		list_internes = db.P_INTERNE.Where(a => a.D_Intitule != "" && a.D_MvtStock == 2).ToList();

		await UpdateGrid();
		IsLoaded = true;

	}
	public void CreatedHandler(object args)
	{
			DefaultGrid.ClearFilteringAsync();
			DefaultGrid.ClearSortingAsync();		
	}
	private async Task UpdateTypes()
	{
		await UpdateGrid();
	}
	private async Task UpdateGrid()
	{
		loading = true;
		await Task.Delay(100);

		items = db.API_V_DOCENTETE
		.Where(a => (
			(date1 != null && a.DO_Date >= date1) || date1 == null)
			&& ((date2 != null && a.DO_Date <= date2) || date2 == null)
			&& a.DO_Domaine == domaine
				)
				.OrderByDescending(a => a.DO_Date)
				.ToList();

		if (selected_types != null)
			items = items.Where(a => selected_types.Contains(a.TypeIntitule)).ToList();

		if (selected_statuts != null)
			items = items.Where(a => selected_statuts.Contains(a.EtatReglement)).ToList();

		loading = false;
		await Task.Delay(100);

	}
	private List<object> contextMenu()
	{
		var dt = DefaultGrid?.GetSelectedRecordsAsync()?.Result;
		var rs = new List<object>();

		rs = new List<object>() {
								 new ContextMenuItemModel { Text = "Changer la date", Target = ".e-content", Id = "date", IconCss = "e-icons e-timeline-today" },
								 new ContextMenuItemModel { Text = "Changer le "+fn.getTiers(domaine)?.ToLower(), Target = ".e-content", Id = "tiers", IconCss = "e-icons e-people" },
								 new ContextMenuItemModel { Text = "Changer la souche", Target = ".e-content", Id = "souche", IconCss = "e-icons e-level-4" },
								 new ContextMenuItemModel { Text = "Transformer en document interne", Target = ".e-content", Id = "interne", IconCss = "e-icons e-undo" },
							 };
		rs.Add(new ContextMenuItemModel { Text = "Dé-comptabiliser", Target = ".e-content", Id = "decomptabiliser", IconCss = "e-icons e-protect-workbook" });
		rs.Add(new ContextMenuItemModel { Text = "Dé-valider", Target = ".e-content", Id = "devalider", IconCss = "e-icons e-lock" });

		return rs;
	}
	public async Task OnContextMenuClick(ContextMenuClickEventArgs<API_V_DOCENTETE> args)
	{

		var dt = DefaultGrid.GetSelectedRecordsAsync().Result;
		if (args.Item.Id == "date")
		{
			dg_date = true;
		}
		if (args.Item.Id == "numero")
		{
			bool isConfirm = await SyncDialog.ConfirmAsync("Voulez vous vraiment changer les numéros des éléments selectionnés?");
			if (isConfirm)
			{
				await UpdateGrid();
				await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Opération réussie", Detail = "Opération réussie!", Duration = 2000 });
			}
		}
		if (args.Item.Id == "tiers")
		{
			dg_tiers = true;
		}
		if (args.Item.Id == "souche")
		{
			dg_souche = true;
		}
		if (args.Item.Id == "interne")
		{
			dg_interne = true;
		}
		if (args.Item.Id == "fusionner")
		{
			bool isConfirm = await SyncDialog.ConfirmAsync("Voulez vous vraiment fusionner les éléments selectionnés?");
			if (isConfirm)
			{
				await UpdateGrid();
				await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Opération réussie", Detail = "Opération réussie!", Duration = 2000 });
			}
		}
		if (args.Item.Id == "devalider")
		{
			bool isConfirm = await SyncDialog.ConfirmAsync("Voulez vous vraiment dévalider les éléments selectionnés?");
			if (isConfirm)
			{
				fn.DisableTriggers(db, "F_DOCENTETE", "UPD");
				fn.DisableTriggers(db, "F_DOCLIGNE", "UPD");
				foreach (API_V_DOCENTETE item in dt)
				{
					if (item.DO_Type == 17 || item.DO_Type == 16)
					{
						db.Database.ExecuteSqlRaw("update f_docentete set cbHashOrder = null, cbHashDate = null, cbHashVersion = 1, cbHash = null, DO_Valide = 0 where do_piece = {0} AND (do_type = 17 or do_type = 16)", item.DO_Piece);
						db.Database.ExecuteSqlRaw("update f_docligne set do_type = 16 where do_piece = {0} AND (do_type = 17 or do_type = 16)", item.DO_Piece);
					}
					if (item.DO_Type == 7 || item.DO_Type == 6)
					{
						db.Database.ExecuteSqlRaw("update f_docentete set cbHashOrder = null, cbHashDate = null, cbHashVersion = 1, cbHash = null, DO_Valide = 0 where do_piece = {0} AND (do_type = 7 or do_type = 6)", item.DO_Piece);
						db.Database.ExecuteSqlRaw("update f_docligne set do_type = 6 where do_piece = {0} AND (do_type = 7 or do_type = 6)", item.DO_Piece);
					}
				}
				fn.EnableTriggers(db, "F_DOCENTETE", "UPD");
				fn.EnableTriggers(db, "F_DOCLIGNE", "UPD");
				await UpdateGrid();
				await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Opération réussie", Detail = "Opération réussie!", Duration = 2000 });
			}
		}
		if (args.Item.Id == "decomptabiliser")
		{
			bool isConfirm = await SyncDialog.ConfirmAsync("Voulez vous vraiment décomptabiliser les éléments selectionnés?");
			if (isConfirm)
			{
				fn.DisableTriggers(db, "F_DOCENTETE", "UPD");
				fn.DisableTriggers(db, "F_DOCLIGNE", "UPD");
				foreach (API_V_DOCENTETE item in dt)
				{
					if (item.DO_Type == 17)
					{
						db.Database.ExecuteSqlRaw("update f_docentete set cbHashOrder = null, cbHashDate = null, cbHashVersion = 1, cbHash = null, DO_Valide = 0,do_type = 16 where do_piece = {0} AND do_type = 17", item.DO_Piece);
						db.Database.ExecuteSqlRaw("update f_docligne set do_type = 16 where do_piece = {0} AND do_type = 17", item.DO_Piece);
						db.Database.ExecuteSqlRaw("update F_DOCREGL set do_type = 16 where do_piece = {0} AND do_type = 17", item.DO_Piece);
					}
					if (item.DO_Type == 7)
					{
						db.Database.ExecuteSqlRaw("update f_docentete set cbHashOrder = null, cbHashDate = null, cbHashVersion = 1, cbHash = null, DO_Valide = 0,do_type = 6 where do_piece = {0} AND do_type = 7", item.DO_Piece);
						db.Database.ExecuteSqlRaw("update f_docligne set do_type = 6 where do_piece = {0} AND do_type = 7", item.DO_Piece);
						db.Database.ExecuteSqlRaw("update F_DOCREGL set do_type = 6 where do_piece = {0} AND do_type = 7", item.DO_Piece);
					}
				}
				fn.EnableTriggers(db, "F_DOCENTETE", "UPD");
				fn.EnableTriggers(db, "F_DOCLIGNE", "UPD");
				await UpdateGrid();
				await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Opération réussie", Detail = "Opération réussie!", Duration = 2000 });
			}
		}

	}
	private async Task ShowNotification(NotificationMessage message)
	{
		NotificationService.Notify(message);
	}
	private async Task SubmitDate()
	{
		dg_date = false;
		await Task.Delay(1);

		var dt = DefaultGrid.GetSelectedRecordsAsync().Result;
		fn.DisableTriggers(db, "F_DOCENTETE", "UPD");
		fn.DisableTriggers(db, "F_DOCLIGNE", "UPD");
		foreach (API_V_DOCENTETE item in dt)
		{


			db.Database.ExecuteSqlRaw("UPDATE F_DOCENTETE SET DO_Date = {0} WHERE DO_Piece = {1} AND DO_Type = {2}", date, item.DO_Piece, item.DO_Type);
			db.Database.ExecuteSqlRaw("UPDATE F_DOCLIGNE SET DO_Date = {0} WHERE DO_Piece = {1} AND DO_Type = {2}", date, item.DO_Piece, item.DO_Type);


		}
		fn.EnableTriggers(db, "F_DOCENTETE", "UPD");
		fn.EnableTriggers(db, "F_DOCLIGNE", "UPD");
		await UpdateGrid();
		await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Opération réussie", Detail = "Opération réussie!", Duration = 2000 });
	}
	private async Task SubmitSouche()
	{
		dg_souche = false;
		await Task.Delay(1);
		var dt = DefaultGrid.GetSelectedRecordsAsync().Result;
		fn.DisableTriggers(db, "F_DOCENTETE", "UPD");
		foreach (API_V_DOCENTETE item in dt)
		{


			db.Database.ExecuteSqlRaw("UPDATE F_DOCENTETE SET DO_Souche = {0} WHERE DO_Piece = {1} AND DO_Type = {2}", souche - 1, item.DO_Piece, item.DO_Type);


		}
		fn.EnableTriggers(db, "F_DOCENTETE", "UPD");

		await UpdateGrid();
		await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Opération réussie", Detail = "Opération réussie!", Duration = 2000 });
	}
	private async Task SubmitInterne()
	{
		dg_interne = false;
		await Task.Delay(1);
		var dt = DefaultGrid.GetSelectedRecordsAsync().Result;
		fn.DisableTriggers(db, "F_DOCENTETE", "UPD");
		fn.DisableTriggers(db, "F_DOCLIGNE", "UPD");
		fn.DisableTriggers(db, "F_DOCREGL", "UPD");
		foreach (API_V_DOCENTETE item in dt)
		{


			db.Database.ExecuteSqlRaw("UPDATE F_DOCENTETE SET DO_Domaine = 4, DO_Type = {0} WHERE DO_Piece = {1} AND DO_Type = {2}", 39 + interne, item.DO_Piece, item.DO_Type);
			db.Database.ExecuteSqlRaw("UPDATE F_DOCLIGNE SET DO_Domaine = 4, DO_Type = {0} WHERE DO_Piece = {1} AND DO_Type = {2}", 39 + interne, item.DO_Piece, item.DO_Type);
			db.Database.ExecuteSqlRaw("UPDATE F_DOCREGL SET DO_Domaine = 4, DO_Type = {0} WHERE DO_Piece = {1} AND DO_Type = {2}", 39 + interne, item.DO_Piece, item.DO_Type);


		}
		fn.EnableTriggers(db, "F_DOCENTETE", "UPD");
		fn.EnableTriggers(db, "F_DOCLIGNE", "UPD");
		fn.EnableTriggers(db, "F_DOCREGL", "UPD");
		await UpdateGrid();
		await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Opération réussie", Detail = "Opération réussie!", Duration = 2000 });
	}
	private async Task SubmitTiers()
	{
		dg_tiers = false;
		await Task.Delay(1);

		var dt = DefaultGrid.GetSelectedRecordsAsync().Result;
		fn.DisableTriggers(db, "F_DOCENTETE", "UPD");
		fn.DisableTriggers(db, "F_DOCLIGNE", "UPD");
		foreach (API_V_DOCENTETE item in dt)
		{
			db.Database.ExecuteSqlRaw("UPDATE F_DOCENTETE SET CT_NumOld = DO_Tiers,DO_Tiers = {0}, CT_NumPayeur = {0} WHERE DO_Piece = {1} AND DO_Type = {2}", tiers, item.DO_Piece, item.DO_Type);
			db.Database.ExecuteSqlRaw("UPDATE F_DOCLIGNE SET CT_Num = {0} WHERE DO_Piece = {1} AND DO_Type = {2}", tiers, item.DO_Piece, item.DO_Type);
		}
		fn.EnableTriggers(db, "F_DOCENTETE", "UPD");
		fn.EnableTriggers(db, "F_DOCLIGNE", "UPD");
		await UpdateGrid();
		await ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Opération réussie", Detail = "Opération réussie!", Duration = 2000 });
	}
	protected async Task ShowPiece(string DO_Piece, short? DO_Type)
	{
		await DialogService.OpenAsync<DetailsPiece>(DO_Piece,
		new Dictionary<string, object>() { { "DO_Piece", DO_Piece }, { "DO_Type", DO_Type } },
		new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "90%", Height = "90%" });
	}
}