
<SfToolbar CssClass="btns">
	<ToolbarItems>
		@if (sc.IsInRole("Admin", "Direction"))
		{
			<ToolbarItem Align="ItemAlign.Right">
				<Template>
					<SfButton IconCss="e-icons e-circle-check" Disabled=@(row.Valide) OnClick="Validate">Valider</SfButton>
				</Template>
			</ToolbarItem>
		}
		<ToolbarItem Align="ItemAlign.Right">
			<Template>
				<SfButton Disabled=@(row.Valide) IconCss="e-icons e-print" OnClick="Print">Imprimer</SfButton>
			</Template>
		</ToolbarItem>
		<ToolbarItem Align="ItemAlign.Right">
			<Template>
				<SfButton Disabled=@(row.Valide) OnClick="@(args => Submit(true))" IconCss="e-icons e-save" IsPrimary="true">Enregistrer</SfButton>
			</Template>
		</ToolbarItem>
	</ToolbarItems>
</SfToolbar>
<div>
	<GridRow>
		<GridCol Xs="24" Md="24">
			<Form Model="@row" Size="@AntSizeLDSType.Small" Layout="@FormLayout.Horizontal" LabelColSpan="6" Context="row">
				<SfTab CssClass="e-fill">
					<TabEvents Selecting="@(args => fn.DisableTabSelect(args))" /><TabItems>
						<TabItem>
							<ChildContent>
								<TabHeader Text="Identification"></TabHeader>
							</ChildContent>
							<ContentTemplate>
								<GridRow>
									<GridCol Xs="24" Md="24">
										<Card>
											@if (IsMV && (id == 0))
											{
												<FormItem LabelAlign="AntLabelAlignType.Left" Label="Sense">
													<SfDropDownList Readonly="(row.Valide)" TValue="int" TItem="Items" DataSource="@(fn.CaisseMV())" @bind-Value="@row.Type">
														<DropDownListEvents TValue=" int" TItem="Items" ValueChange="@(AccordionClickArgs => SenseChanged())" />
														<DropDownListFieldSettings Text="Name" Value="Id" />
													</SfDropDownList>
												</FormItem>
											}

											<FormItem LabelAlign="AntLabelAlignType.Left" Label="Caisse">
												<SfDropDownList TValue="int" TItem="API_T_Caisse" DataSource="@(db.API_T_Caisse)" @bind-Value="@row.Caisse" Readonly>
													<DropDownListEvents TValue="int" TItem="API_T_Caisse" />
													<DropDownListFieldSettings Text="C_Nom" Value="id" />
												</SfDropDownList>
											</FormItem>
											<FormItem LabelAlign="AntLabelAlignType.Left" Label="Numéro">
												<SfTextBox @bind-Value="@(row.Numero)" Readonly />
											</FormItem>
											<FormItem LabelAlign="AntLabelAlignType.Left" Label="Date">
												<SfDatePicker Readonly="(row.Valide)" TValue="DateTime?" @bind-Value="@row.Date" />
											</FormItem>
											@if (row.Type == 0)
											{
												<FormItem LabelAlign="AntLabelAlignType.Left" Label="Client">
													<SfDropDownList Readonly="(row.Valide)" Query="@fn.LocalDataQuery" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering TValue="string" TItem="F_COMPTET" 
													DataSource="@(db.F_COMPTET.Where(a => a.CT_Type == 0 && a.CT_Sommeil == 0))" @bind-Value="@row.CT_Num">
														<DropDownListEvents TValue="string" TItem="F_COMPTET" />
														<DropDownListFieldSettings Text="CT_Intitule" Value="CT_Num" />
													</SfDropDownList>
												</FormItem>
											}
											else
											{
												<FormItem LabelAlign="AntLabelAlignType.Left" Label="Fournisseur">
													<SfDropDownList Readonly="(row.Valide)" Query="@fn.LocalDataQuery" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering TValue="string" TItem="F_COMPTET"
																	DataSource="@(db.F_COMPTET.Where(a => a.CT_Type == 1 && a.CT_Sommeil == 0))" @bind-Value="@row.CT_Num">
														<DropDownListEvents TValue="string" TItem="F_COMPTET" />
														<DropDownListFieldSettings Text="CT_Intitule" Value="CT_Num" />
													</SfDropDownList>
												</FormItem>
											}
											<FormItem LabelAlign="AntLabelAlignType.Left" Label="Affaire">
												<SfDropDownList Readonly="(row.Valide)" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering TValue="string" TItem="F_COMPTEA" DataSource="@(affaires)" @bind-Value="@row.CA_Num">
													<DropDownListEvents TValue="string" TItem="F_COMPTEA" />
													<DropDownListFieldSettings Text="CA_Intitule" Value="CA_Num" />
												</SfDropDownList>
											</FormItem>
											<FormItem LabelAlign="AntLabelAlignType.Left" Label="Représentant">
												<SfDropDownList Readonly="(row.Valide)" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering TValue="int" TItem="F_COLLABORATEUR" @bind-Value="@row.Representant" DataSource="collab">
													<DropDownListEvents TValue="int" TItem="F_COLLABORATEUR" />
													<DropDownListFieldSettings Text="CO_Nom" Value="CO_No" />
												</SfDropDownList>
											</FormItem>
											<FormItem LabelAlign="AntLabelAlignType.Left" Label="Bénéficiaire">
												<div class="ls-parent">
													<div class="ls-child-left">
														<SfDropDownList Readonly="(row.Valide)" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering TValue="int" TItem="API_T_Personnel" DataSource="@(db.API_T_Personnel.AsNoTracking().Where(a => 1 == 1).OrderBy(a => a.Nom))" @bind-Value="@row.Personnel">
															<DropDownListEvents TValue="int" TItem="API_T_Personnel" />
															<DropDownListFieldSettings Text="Nom" Value="id" />
														</SfDropDownList>
													</div>
													<div class="ls-child-right">
														<RadzenButton Icon="reorder" Click="@(args => BeneficiairesListe())" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
													</div>
												</div>

											</FormItem>
											<FormItem LabelAlign="AntLabelAlignType.Left" Label="Affectation">
												<div class="ls-parent">
													<div class="ls-child-left">
														<SfDropDownList Readonly="(row.Valide)" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering TValue="int" TItem="API_T_Affectation" DataSource="@(db.API_T_Affectation.AsNoTracking().Where(a => 1 == 1).OrderBy(a => a.Intitule))" @bind-Value="@row.Affectation">
															<DropDownListEvents TValue="int" TItem="API_T_Affectation" />
															<DropDownListFieldSettings Text="Intitule" Value="id" />
														</SfDropDownList>
													</div>
													<div class="ls-child-right">
														<RadzenButton Icon="reorder" Click="@(args => AffectationsListe())" ButtonStyle="ButtonStyle.Primary" Size="Radzen.ButtonSize.ExtraSmall" Class="rz-border-radius-10 rz-shadow-4" />
													</div>
												</div>

											</FormItem>
										</Card>
									</GridCol>
									<GridCol Xs="24" Md="24">
										<Card>
											<FormItem LabelAlign="AntLabelAlignType.Left" Label="Montant">
												<SfNumericTextBox Readonly="(row.Valide)" @bind-Value="@row.Montant" ShowSpinButton="false" Format="N2" Decimals="2" />
											</FormItem>
											<FormItem LabelAlign="AntLabelAlignType.Left" Label="Montant en lettres">
												<SfTextBox Value="@(helpers.getMontant(row.Montant) + " DHS")" Readonly />
											</FormItem>
										</Card>
									</GridCol>
									<GridCol Xs="24" Md="24">
										<Card>
											<FormItem Class="multiline" LabelAlign="AntLabelAlignType.Left" Label="Libelle" LabelColSpan="6">
												<SfTextBox Readonly="(row.Valide)" @bind-Value="@row.Libelle" />
											</FormItem>
											<FormItem LabelAlign="AntLabelAlignType.Left" Label="Référence" LabelColSpan="6">
												<SfTextBox Readonly="(row.Valide)" @bind-Value="@row.Reference" />
											</FormItem>
											<FormItem Class="multiline" LabelAlign="AntLabelAlignType.Left" Label="Remarque" LabelColSpan="6">
												<SfTextBox Readonly="(row.Valide)" @bind-Value="@row.Remarque" />
											</FormItem>

										</Card>
									</GridCol>
								</GridRow>
							</ContentTemplate>
						</TabItem>
						<TabItem>
							<ChildContent>
								<TabHeader Text="Fichiers"></TabHeader>
							</ChildContent>
							<ContentTemplate>
								<Card>
									<FilesManager height="50vh" table="Caisse" id="@id" societe="@session.Societe.id.ToString()"></FilesManager>
								</Card>
							</ContentTemplate>
						</TabItem>
					</TabItems>
				</SfTab>
			</Form>


		</GridCol>

	</GridRow>
</div>




@code {
	[CascadingParameter]
	public SessionDT session { get; set; }
	DB db = new DB();
	EditForm form = new EditForm();
	[Parameter]
	public int id { get; set; } = 0;
	[Parameter]
	public int caisse { get; set; } = 0;
	[Parameter]
	public int type { get; set; }
	[Parameter]
	public string operation { get; set; }
	private API_T_CaisseEntete row { get; set; }
	List<API_T_CaisseLigne> lignes = new List<API_T_CaisseLigne>();
	Helpers helpers = new Helpers();
	[Parameter] public bool detail { get; set; } = false;
	NumericEditCellParams parameters = new NumericEditCellParams() { Params = new NumericTextBoxModel<object>() { Decimals = 2, Format = "N2", ShowSpinButton = false } };
	[Parameter] public bool IsList { get; set; } = true;
	[Parameter] public int Projet { get; set; } = 0;
	[Parameter] public int Materiel { get; set; } = 0;
	[Parameter] public int Personnel { get; set; } = 0;
	[Parameter] public int Tiers { get; set; } = 0;
	[Parameter] public bool IsMV { get; set; } = false;
	string tiers_intitule = "";
	private List<F_COLLABORATEUR> collab = new List<F_COLLABORATEUR>();
	private List<F_COMPTET> tiers = new List<F_COMPTET>();
	private List<F_COMPTEA> affaires = new List<F_COMPTEA>();
	protected override async Task OnInitializedAsync()
	{
		        db = session.db;
        GC.Collect();
		collab = db.F_COLLABORATEUR.OrderBy(a => a.CO_Prenom).Select(a => new F_COLLABORATEUR { CO_No = a.CO_No, CO_Nom = a.CO_Prenom + " " + a.CO_Nom }).ToList();
		tiers = db.F_COMPTET.Where(a => a.CT_Type == type).OrderBy(a => a.CT_Intitule).Select(a => new F_COMPTET { CT_Num = a.CT_Num, CT_Intitule = a.CT_Num + " - " + a.CT_Intitule }).ToList();
		affaires = db.F_COMPTEA.OrderBy(a => a.CA_Num).Select(a => new F_COMPTEA { CA_Num = a.CA_Num, CA_Intitule = a.CA_Num + " - " + a.CA_Intitule }).ToList();
		if (id == 0)
		{
			row = new API_T_CaisseEntete();
			row.Date = DateTime.Today;
			row.Type = type;
			row.Sense = type;
			row.Libelle = null;
			await GetPiece();
			if (Materiel != 0)
			{
				row.Materiel = Materiel;
			}
			if (Projet != 0)
			{
				row.Projet = Projet;
			}
			if (Personnel != 0)
			{
				row.Personnel = Personnel;
			}
			row.Caisse = caisse;
		}
		else
		{
			row = db.API_T_CaisseEntete.Where(a => a.id == id).SingleOrDefault();
			lignes = db.API_T_CaisseLigne.Where(a => a.Entete == id).OrderBy(a => a.id).ToList();
		}
		tiers_intitule = getTiers();

	}
	private async Task GetPiece()
	{
		var cs = db.API_T_Caisse.Where(a => a.id == caisse).SingleOrDefault();
		string piece = fn.PieceCaisse(row.Type) + (cs?.C_Racine ?? "") + "00001";
		var dt = db.API_T_CaisseEntete.Where(a => a.Numero.StartsWith(fn.PieceCaisse(row.Type) + (cs.C_Racine ?? ""))).ToList();
		if (dt.Count != 0)
		{
			piece = fn.getNextCode(dt.Max(a => a.Numero));
		}
		row.Numero = piece;
	}
	private async Task Submit(bool close)
	{
		try
		{
			row.MontantLettre = helpers.getMontant(row.Montant) + " DHS";
			if (id == 0)
			{
				db.API_T_CaisseEntete.Add(row);
			}
			db.SaveChanges();
			id = row.id;
			if (close)
			{
				DialogService.Close();
			}

		}
		catch (Exception ex)
		{
			Message.Error(ex.ToString());
		}
	}
	private string getTiers()
	{
		string rs = "Client";
		if (type == 1)
		{
			rs = "Fournisseur";
		}
		return rs;
	}
	private async Task SenseChanged()
	{
		tiers = db.F_COMPTET.Where(a => a.CT_Type == row.Sense).OrderBy(a => a.CT_Intitule).Select(a => new F_COMPTET { CT_Num = a.CT_Num, CT_Intitule = a.CT_Num + " - " + a.CT_Intitule }).ToList();
		await GetPiece();
	}
	private void OnFileOpen(FileOpenEventArgs<FileManagerDirectoryContent> args)
	{
		if (args.FileDetails.Name.ToUpper().EndsWith(".PDF"))
		{
			DialogService.OpenAsync<PdfViewer>(args.FileDetails.Name,
				new Dictionary<string, object>() { { "DocumentPath", helpers.getPath(session.Societe.id.ToString(), "Projet", this.id.ToString()) + "/" + args.FileDetails.Name } },
				new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "98%", Height = "95%" });
		}
		if (args.FileDetails.Name.ToUpper().EndsWith(".DOC") || args.FileDetails.Name.ToUpper().EndsWith(".DOCX") || args.FileDetails.Name.ToUpper().EndsWith(".TXT"))
		{
			DialogService.OpenAsync<WordViewer>(args.FileDetails.Name,
				new Dictionary<string, object>() { { "DocumentPath", helpers.getPath(session.Societe.id.ToString(), "Projet", this.id.ToString()) + "/" + args.FileDetails.Name } },
				new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "98%", Height = "95%" });
		}

	}
	private async Task Print()
	{
		await Submit(false);
		List<JSReportParameter> parameters = new List<JSReportParameter>();

		parameters.Add(new JSReportParameter { Name = "id", Values = new List<string>() { this.id.ToString() } });
		await DialogService.OpenAsync<ReportViewer>(row.Numero,
		new Dictionary<string, object>() { { "ReportName", "reports\\caisses\\isc\\FicheStandard" }, { "parameters", parameters } },
		new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "900px", Height = "95%" });
	}
	private async Task BeneficiairesListe()
	{
		await DialogService.OpenAsync<BusinessWeb.Pages.Traitement.ISC_Caisse.Structure.Beneficiaires>($"Bénéficiaires",
		new Dictionary<string, object>(),
		new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "700px", Height = "90%" });
	}
	private async Task CaissesListe()
	{
		await DialogService.OpenAsync<BusinessWeb.Pages.Traitement.ISC_Caisse.Structure.Caisses>($"Caisses",
		new Dictionary<string, object>(),
		new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "1000px", Height = "95%" });
	}
	private async Task AffectationsListe()
	{
		await DialogService.OpenAsync<BusinessWeb.Pages.Traitement.ISC_Caisse.Structure.Affectations>($"Affectations",
		new Dictionary<string, object>(),
		new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "700px", Height = "90%" });
	}
	private async Task Validate()
	{
		bool isConfirm = await SyncDialog.ConfirmAsync("Voulez vous vraiment valider cet élément?", "Validation");
		if (isConfirm)
		{
			await Submit(false);
			row.Valide = true;
			row.ValideDate = DateTime.Now;
			db.SaveChanges();
		}
	}
}