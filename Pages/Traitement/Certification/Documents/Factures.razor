@page "/cr-fa"
@attribute [Authorize]
@if (IsLoaded)
{
	<Card_1 Title="LISTE DES FACTURES">
		<RadzenContent Container="main">
			<div class="grid-90">
				<SfToolbar>
					<ToolbarItems>
						<ToolbarItem OnClick=@(args => (DefaultGrid.OpenColumnChooserAsync(1,1))) TooltipText="Colonnes selectionnées" Text="Colonnes selectionnées" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Left" PrefixIcon="e-icons e-more-vertical-2"></ToolbarItem>

						<ToolbarItem Visible=@(sc.IsInRole("Admin")) OnClick=@(args => (DefaultGrid.PrintAsync())) TooltipText="Imprimer" Text="Imprimer" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Left" PrefixIcon="e-icons e-print"></ToolbarItem>
						<ToolbarItem Visible=@(sc.IsInRole("Admin")) OnClick=@(args => (DefaultGrid.ExportToExcelAsync(fn.excelExport()))) TooltipText="Export Excel" Text="Export Excel" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Left" PrefixIcon="e-icons e-export-excel"></ToolbarItem>

						<ToolbarItem Align="ItemAlign.Left" Type="ItemType.Separator" />


						<ToolbarItem TooltipText="CHERCHE" Align="ItemAlign.Right" Overflow="OverflowOption.Show" Type="ItemType.Input">
							<Template>
								<SfTextBox Width="180px" Placeholder="RECHERCHE" ValueChanged="@(args => DefaultGrid.SearchAsync(args))"></SfTextBox>
							</Template>
						</ToolbarItem>
						<ToolbarItem Align="ItemAlign.Right" Type="ItemType.Input">
							<Template>
								@Date1
							</Template>
						</ToolbarItem>
						<ToolbarItem Align="ItemAlign.Right" Type="ItemType.Input">
							<Template>
								@Date2
							</Template>
						</ToolbarItem>

					</ToolbarItems>
				</SfToolbar>
				<div class="grid-84" style="zoom: @session.zoomLevel;">
					<SfGrid Height="100%" RowRenderingMode="RowDirection.Horizontal" AllowFiltering AllowResizing AllowSorting AllowReordering 
					AllowSelection AllowMultiSorting ShowColumnChooser="true" ID="Grid" @ref="DefaultGrid" AllowPdfExport="@(sc.IsInRole("Admin"))" 
					AllowExcelExport="@(sc.IsInRole("Admin"))" EnableVirtualization DataSource="@items">
						<GridEvents OnToolbarClick="ToolbarClickHandler" OnRecordDoubleClick="Edit" TValue="API_V_DOCENTETE"></GridEvents>
						<GridPageSettings PageSize="100"></GridPageSettings>
						<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
						<GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
						<GridTemplates>
							<EmptyRecordTemplate>
								<Empty></Empty>
							</EmptyRecordTemplate>
						</GridTemplates>
						<GridAggregates>
							<GridAggregate>
								<GridAggregateColumns>
									<GridAggregateColumn Field="@nameof(API_V_DOCENTETE.DL_MontantHT)" Type="AggregateType.Sum" Format="### ### ##0.00;-### ### ##0.00;#">
										<FooterTemplate>
											@{
												var SumValue = (context as AggregateTemplateContext);
												<div>
													@SumValue.Sum
												</div>
											}
										</FooterTemplate>

									</GridAggregateColumn>
									<GridAggregateColumn Field="@nameof(API_V_DOCENTETE.DL_MontantTVA)" Type="AggregateType.Sum" Format="### ### ##0.00;-### ### ##0.00;#">
										<FooterTemplate>
											@{
												var SumValue = (context as AggregateTemplateContext);
												<div>
													@SumValue.Sum
												</div>
											}
										</FooterTemplate>

									</GridAggregateColumn>
									<GridAggregateColumn Field="@nameof(API_V_DOCENTETE.DL_MontantTTC)" Type="AggregateType.Sum" Format="### ### ##0.00;-### ### ##0.00;#">
										<FooterTemplate>
											@{
												var SumValue = (context as AggregateTemplateContext);
												<div>
													@SumValue.Sum
												</div>
											}
										</FooterTemplate>

									</GridAggregateColumn>
								</GridAggregateColumns>
							</GridAggregate>
						</GridAggregates>
						<GridColumns>
							<GridColumn Width="70" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DO_Date)" HeaderText="Date" Format="dd/MM/yy"></GridColumn>
							<GridColumn Width="110" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DO_Piece)" HeaderText="Pièce"></GridColumn>
							<GridColumn Width="40" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderText="Sta">
								<Template>
									@{
										var dt = (context as API_V_DOCENTETE);
										if (dt.DO_Statut == 2)
										{
											<RadzenIcon Icon="check_circle" IconStyle="IconStyle.Success" />
										}
										else if (dt.DO_Statut == 1)
										{
											<RadzenIcon Icon="watch_later" />
										}
										else
										{
											<RadzenIcon Icon="edit_note" IconStyle="IconStyle.Primary" />
										}
									}
								</Template>
							</GridColumn>
							<GridColumn Width="40" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderText="Imp">
								<Template>
									@{
										var dt = (context as API_V_DOCENTETE);
										if (dt.DO_Imprim == 1)
										{
											<RadzenIcon Icon="print" IconStyle="IconStyle.Secondary" />
										}
									}
								</Template>
							</GridColumn>
							<GridColumn Width="40" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderText="Val">
								<Template>
									@{
										var dt = (context as API_V_DOCENTETE);
										if (dt.DO_Valide == 1)
										{
											<RadzenIcon Icon="lock" IconStyle="IconStyle.Success" />
										}
										else
										{
											<RadzenIcon Icon="lock_open" IconStyle="IconStyle.Primary" />
										}
									}
								</Template>
							</GridColumn>


							<GridColumn Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DO_Tiers)" HeaderText="N° Tiers"></GridColumn>
							<GridColumn TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.CT_Intitule)" HeaderText="Client"></GridColumn>

							<GridColumn Width="160" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.CO_Nom)" HeaderText="Collaborateur"></GridColumn>
							<GridColumn Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DL_MontantHT)" HeaderText="Total HT" Format="### ### ##0.00;-### ### ##0.00;#"></GridColumn>
							<GridColumn Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DL_MontantTVA)" HeaderText="Total TVA" Format="### ### ##0.00;-### ### ##0.00;#"></GridColumn>
							<GridColumn Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_DOCENTETE.DL_MontantTTC)" HeaderText="Total TTC" Format="### ### ##0.00;-### ### ##0.00;#"></GridColumn>

						</GridColumns>
						<SfSpinner @bind-Visible="@loading">
						</SfSpinner>
					</SfGrid>
				</div>

			</div>
		</RadzenContent>
	</Card_1>
}
else
{
	<div class="center-screen">
		<Loading_1 />
	</div>
}




@code
{
	[CascadingParameter]
	public SessionDT session { get; set; } = new SessionDT();
	DB db = new DB();
	[Parameter] public int type { get; set; }
	[Parameter] public bool IsList { get; set; } = true;
	[Parameter] public string Title { get; set; } = "";
	string grid_height = "80vh";
	//Components
	private SfGrid<API_V_DOCENTETE> DefaultGrid;

	//End components

	private IEnumerable<API_V_DOCENTETE> items;
	List<API_V_DOCENTETE> rows = new List<API_V_DOCENTETE>();
	string activekey = "0";
	bool loading = false;
	bool IsLoaded = false;
	int caisse = 0;
	DateTime? date1 = new DateTime(DateTime.Today.Year, 1, 1);
	DateTime? date2 = new DateTime(DateTime.Today.Year, 12, 31);
	IList<API_V_DOCENTETE> selecteditems;

	private RenderFragment Date1 => @<SfDatePicker ShowClearButton ShowTodayButton TValue="DateTime?" @bind-Value="@date1" Width="130px" Placeholder="Date Début" TValue="DateTime?">
		<DatePickerEvents TValue="DateTime?" ValueChange="@(args => (UpdateGrid()))"> </DatePickerEvents>
	</SfDatePicker>;
	private RenderFragment Date2 => @<SfDatePicker ShowClearButton ShowTodayButton TValue="DateTime?" @bind-Value="@date2" Width="130px" Placeholder="Date Fin" TValue="DateTime?">
		<DatePickerEvents TValue="DateTime?" ValueChange="@(args => (UpdateGrid()))"> </DatePickerEvents>
	</SfDatePicker>
	;
	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(1);
		        db = session.db;
        GC.Collect();
		await UpdateGrid();
		IsLoaded = true;
	}
	private async Task ShowPiece(string DO_Piece)
	{
		short? type = 6;

	}
	private async Task UpdateGrid()
	{
		loading = true;
		await Task.Delay(1);
		items = session.db.API_V_DOCENTETE.Where(a => (a.DO_Type == 6 || a.DO_Type == 7) && a.DO_Date >= (date1 ?? new DateTime(1900, 1, 1)) && a.DO_Date <= (date2 ?? new DateTime(2070, 12, 31))).OrderByDescending(a => a.DO_Date).ToList();
		loading = false;
		await Task.Delay(1);
	}

	public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
	{
		if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
		{
			await this.DefaultGrid.ExcelExport();
		}
		if (args.Item.Id == "Grid_pdfexport")  //Id is combination of Grid's ID and itemname
		{
			await this.DefaultGrid.PdfExport();
		}

	}
	protected async Task Edit(RecordDoubleClickEventArgs<API_V_DOCENTETE> args)
	{
		await DialogService.OpenAsync<DetailsPiece>(args.RowData.DO_Piece,
				new Dictionary<string, object>() { { "DO_Piece", args.RowData.DO_Piece }, { "DO_Type", args.RowData.DO_Type }, { "Src", "Certif" } },
			new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "98%", Height = "95%" });
	}


}