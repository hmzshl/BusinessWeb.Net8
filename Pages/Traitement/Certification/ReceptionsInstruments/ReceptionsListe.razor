@page "/cr-reception"
@attribute [Authorize]

@if (IsLoaded)
{
    <Card_1 Title="RECEPTIONS INSTRUMENTS">
        <RadzenContent Container="main">
            <div class="grid-90">
                <SfToolbar>
                    <ToolbarItems>
                        <ToolbarItem OnClick=@(args => (DefaultGrid.OpenColumnChooserAsync(1, 1))) TooltipText="Colonnes selectionnées" Text="Colonnes selectionnées" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Left" PrefixIcon="e-icons e-more-vertical-2"></ToolbarItem>

                        <ToolbarItem Visible=@(sc.IsInRole("Admin")) OnClick=@(args => (DefaultGrid.PrintAsync())) TooltipText="Imprimer" Text="Imprimer" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Left" PrefixIcon="e-icons e-print"></ToolbarItem>
                        <ToolbarItem Visible=@(sc.IsInRole("Admin")) OnClick=@(args => (DefaultGrid.ExportToExcelAsync(fn.ExportToExcelAsync()))) TooltipText="Export Excel" Text="Export Excel" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Left" PrefixIcon="e-icons e-export-excel"></ToolbarItem>

                        <ToolbarItem TooltipText="Supprimer" Text="Supprimer" OnClick=@(args => (DefaultGrid.DeleteRecordAsync())) ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Left" PrefixIcon="e-icons e-trash"></ToolbarItem>
                        <ToolbarItem TooltipText="Ajouter" Text="Ajouter" OnClick=@(args => (DefaultGrid.AddRecordAsync())) ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Left" PrefixIcon="e-icons e-circle-add"></ToolbarItem>
                        <ToolbarItem Align="ItemAlign.Left" Type="ItemType.Separator" />

                        <ToolbarItem TooltipText="CHERCHE" Align="ItemAlign.Right" Overflow="OverflowOption.Show" Type="ItemType.Input">
                            <Template>
                                <SfTextBox Width="180px" Placeholder="RECHERCHE" ValueChanged="@(args => DefaultGrid.SearchAsync(args))"></SfTextBox>
                            </Template>
                        </ToolbarItem>
                        <ToolbarItem Align="ItemAlign.Right" Type="ItemType.Input">
                            <Template>
                                @Date1
                            </Template>
                        </ToolbarItem>
                        <ToolbarItem Align="ItemAlign.Right" Type="ItemType.Input">
                            <Template>
                                @Date2
                            </Template>
                        </ToolbarItem>
                    </ToolbarItems>
                </SfToolbar>
                <div class="grid-84" style="zoom: @session.zoomLevel;">
                    <SfGrid Height="100%" AllowFiltering RowRenderingMode="RowDirection.Horizontal" AllowResizing AllowSorting AllowReordering
                            AllowSelection AllowMultiSorting ShowColumnChooser="true" ID="Grid" @ref="DefaultGrid" AllowPdfExport="@(sc.IsInRole("Admin"))"
                            AllowExcelExport="@(sc.IsInRole("Admin"))" EnableVirtualization DataSource="@items">
                        <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding AllowDeleting Mode="Syncfusion.Blazor.Grids.EditMode.Dialog">
                        </GridEditSettings>
                        <GridEvents OnActionBegin="OnActionBegin" OnToolbarClick="ToolbarClickHandler" OnRecordDoubleClick="Edit" TValue="API_T_CertifReception"></GridEvents>
                        <GridPageSettings PageSize="100"></GridPageSettings>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                        <GridTemplates>
                            <EmptyRecordTemplate>
                                <Empty></Empty>
                            </EmptyRecordTemplate>
                        </GridTemplates>
                        <GridColumns>
                            <GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_T_CertifReception.DateReception)" HeaderText="Date Réception" Format="dd/MM/yy"></GridColumn>
                            <GridColumn Width="130" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_T_CertifReception.NumeroEnregistrement)" HeaderText="N° Enregistrement"></GridColumn>
                            <GridColumn Width="130" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_T_CertifReception.CT_Num)" HeaderText="N° Client"></GridColumn>
                            <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_T_CertifReception.ClientNom)" HeaderText="Client"></GridColumn>
                            <GridColumn Width="130" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_T_CertifReception.NumeroDossier)" HeaderText="N° Dossier"></GridColumn>
                            <GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_T_CertifReception.Priorite)" HeaderText="Priorité"></GridColumn>
                            <GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_T_CertifReception.Livreur)" HeaderText="Livreur"></GridColumn>
                        </GridColumns>
                        <SfSpinner @bind-Visible="@loading">
                        </SfSpinner>
                    </SfGrid>
                </div>
            </div>
        </RadzenContent>
    </Card_1>
}
else
{
    <div class="center-screen">
        <Loading_1 />
    </div>
}

@code {
    [CascadingParameter]
    public SessionDT session { get; set; } = new SessionDT();
    DB db = new DB();
    [Parameter] public int type { get; set; }
    [Parameter] public bool IsList { get; set; } = true;
    [Parameter] public string Title { get; set; } = "";
    string grid_height = "80vh";

    private SfGrid<API_T_CertifReception> DefaultGrid;
    private IEnumerable<API_T_CertifReception> items;
    List<API_T_CertifReception> rows = new List<API_T_CertifReception>();
    bool loading = false;
    bool IsLoaded = false;
    DateTime? date1 = new DateTime(DateTime.Today.Year, 1, 1);
    DateTime? date2 = new DateTime(DateTime.Today.Year, 12, 31);
    IList<API_T_CertifReception> selecteditems;

    private RenderFragment Date1 => @<SfDatePicker ShowClearButton ShowTodayButton TValue="DateTime ?" @bind-Value="@date1" Width="130px" Placeholder="Date Début" TValue="DateTime?">
        <DatePickerEvents TValue="DateTime ?" ValueChange="@(args => (UpdateGrid()))"> </DatePickerEvents>
    </SfDatePicker>;

    private RenderFragment Date2 => @<SfDatePicker ShowClearButton ShowTodayButton TValue="DateTime ?" @bind-Value="@date2" Width="130px" Placeholder="Date Fin" TValue="DateTime?">
        <DatePickerEvents TValue="DateTime ?" ValueChange="@(args => (UpdateGrid()))"> </DatePickerEvents>
    </SfDatePicker>;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
        db = session.db;
        GC.Collect();
        await UpdateGrid();
        IsLoaded = true;
    }

    private async Task UpdateGrid()
    {
        loading = true;
        await Task.Delay(1);
        items = session.db.API_T_CertifReception
            .Where(a => a.DateReception >= (date1 ?? new DateTime(1900, 1, 1))
            && a.DateReception <= (date2 ?? new DateTime(2070, 12, 31)))
            .OrderByDescending(a => a.id)
            .ToList();
        loading = false;
        await Task.Delay(1);
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport")
        {
            await this.DefaultGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "Grid_pdfexport")
        {
            await this.DefaultGrid.ExportToPdfAsync();
        }
    }

    private async Task OnActionBegin(ActionEventArgs<API_T_CertifReception> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add
            || args.RequestType == Syncfusion.Blazor.Grids.Action.Print
            || args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            args.Cancel = true;
        }

        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            await Add();
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            db.API_T_CertifReception.Remove(args.Data);
            db.SaveChanges();
            await UpdateGrid();
        }
    }

    protected async Task Edit(RecordDoubleClickEventArgs<API_T_CertifReception> args)
    {
        await DialogService.OpenAsync<ReceptionsFiche>(args.RowData.NumeroEnregistrement,
            new Dictionary<string, object>() { { "id", args.RowData.id } },
            new Radzen.DialogOptions() { CloseDialogOnEsc = false, Width = "98%", Height = "98%" });
        await UpdateGrid();
    }

    private async Task Add()
    {
        await DialogService.OpenAsync<ReceptionsFiche>("Ajouter un élément",
            new Dictionary<string, object>() { { "id", 0 } },
            new Radzen.DialogOptions() { CloseDialogOnEsc = false, Width = "98%", Height = "98%" });
        await UpdateGrid();
    }
}