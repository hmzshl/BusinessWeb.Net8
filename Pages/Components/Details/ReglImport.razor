@using System.Globalization
<GridRow>
    <SfUploader @ref=sfUploader AutoUpload="false" AllowedExtensions=".xls, .xlsx">
        <UploaderEvents ValueChange="Import"></UploaderEvents>
    </SfUploader>
    <div>Charger un fichier excel...</div>

</GridRow>

@code 
{
    [CascadingParameter] public SessionDT session { get; set; } = new SessionDT();
    SfUploader sfUploader;
    DB db = new DB();
    [Parameter] public int id { get; set; } = 0;
    bool loading = true;
    protected override void OnInitialized()
    {
        db = session.db;
        GC.Collect();
    }
    private void OnUploadSuccess(Syncfusion.Blazor.Inputs.SuccessEventArgs args)
    {

    }
    private async Task Import(Syncfusion.Blazor.Inputs.UploadChangeEventArgs args)
    {

        try
        {
            SfGrid<ExpandoObject> Grid2;

            foreach (var file in args.Files)
            {
                DataTable table = new DataTable();

                System.IO.Directory.CreateDirectory(Path.Combine(sg.GetRoot(), "data" + "\\" + "Reglements" + "\\" + "Import"));
                var path = Path.Combine(sg.GetRoot(), "data" + "\\" + "Reglements" + "\\" + "Import" + "\\" + file.FileInfo.Name);

                //var path = file.FileInfo.Name;
                ExcelEngine excelEngine = new ExcelEngine();
                IApplication application = excelEngine.Excel;

                application.DefaultVersion = ExcelVersion.Excel2016;

                FileStream openFileStream = new FileStream(path, FileMode.OpenOrCreate);

                await file.File.OpenReadStream(long.MaxValue).CopyToAsync(openFileStream);
                FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                //access the workbook from that filtestream
                IWorkbook workbook = application.Workbooks.Open(fileStream);
                IWorksheet worksheet = workbook.Worksheets[0];
                //get datatable from workbook
                table = worksheet.ExportDataTable(worksheet.UsedRange, ExcelExportDataTableOptions.ColumnNames);
                //convert to dynamic list and append to Grid.
                GenerateListFromTable(table);
                openFileStream.Close();

            }
        }
        catch(Exception ex)
        {
            await Message.Error(ex.ToString(), 20);
        }




        DialogService.Close();

    }
    private void GenerateListFromTable(DataTable input)
    {
        int line = 1;
        string[] Columns;
        var list = new List<ExpandoObject>();
        Columns = input.Columns.Cast<DataColumn>()
                             .Select(x => x.ColumnName)
                             .ToArray();
        db.Database.ExecuteSqlRaw("DISABLE TRIGGER ALL ON F_CREGLEMENT");
        foreach (DataRow row in input.Rows)
        {
            line = line + 1;
            API_T_ImportLog log = new API_T_ImportLog();
            log.TableName = "F_CREGLEMENT";
            log.TableID = this.id;
            log.Date = DateTime.Now;

            try
            {
                System.Dynamic.ExpandoObject e = new System.Dynamic.ExpandoObject();
                foreach (DataColumn col in input.Columns)
                {
                    var value = row[col.Ordinal];
                    if (col.DataType == typeof(string) && DateTime.TryParseExact(value?.ToString(), "dd/MM/yyyy",
                        CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedDate))
                    {
                        e.TryAdd(col.ColumnName, parsedDate);
                    }
                    else
                    {
                        e.TryAdd(col.ColumnName, value);
                    }
                }

                string json = Newtonsoft.Json.JsonConvert.SerializeObject(e);
                F_CREGLEMENT ln = Newtonsoft.Json.JsonConvert.DeserializeObject<F_CREGLEMENT>(json);
                {
                    ln.RG_MontantEcart = 0;
                    ln.RG_MontantDev = 0;
                    ln.RG_Type = 0;
                    ln.RG_Souche = 0;
                    ln.RG_Ticket = 0;
                    ln.RG_Cloture = 0;
                    ln.RG_Transfere = 0;
                    ln.RG_Banque = 0;
                    ln.CA_No = 0;
                    ln.N_Devise = 0;
                    ln.RG_Cours = 0;
                    ln.EC_No = 0;
                    ln.RG_Impute = 0;
                    if (db.F_CREGLEMENT.Any())
                    {
                        ln.RG_No = db.F_CREGLEMENT.Max(a => a.RG_No) + 1;
                    }
                    else
                    {
                        ln.RG_No = 1;
                    }


                    db.F_CREGLEMENT.Add(ln);
                    db.SaveChanges();
                }

                log.Libelle = "Ligne importée avec succès.";
            }
            catch (Exception ex)
            {
                log.Libelle = ex.Message;
            }
            db.API_T_ImportLog.Add(log);
            db.SaveChanges();
        }

        db.SaveChanges();
        db.Database.ExecuteSqlRaw("ENABLE TRIGGER ALL ON F_CREGLEMENT");
    }

    void ShowNotification(Exception ex)
    {
        string key = $"open{DateTime.Now}";
        RenderFragment btn =
    @<Button Type="@AntDesign.ButtonType.Primary" OnClick="() => { _notice.Close(key); }">
        OK
    </Button>;
        _ = _notice.Error(new()
            {
                Message = ex.Message,
                Duration = 0,
                Description = ex.StackTrace,
                Placement = NotificationPlacement.BottomRight,
                Btn = btn,
                Key = key
            });

    }
}