
@if (IsLoaded)
{
    <div class="@ClassHeight" style=" zoom: @session.zoomLevel;">
        @if (CT_Num != null)
        {
            <SfToolbar CssClass="btns">
                <ToolbarItems>
                    <ToolbarItem Align="ItemAlign.Left" Type="ItemType.Input">
                        <Template>
                            <SfDatePicker Width="140px" TValue="DateTime?" @bind-Value="date1" Placeholder="Date Début" ShowClearButton ShowTodayButton>
                                <DatePickerEvents TValue="DateTime?" ValueChange="@(args => (UpdateGrid()))"> </DatePickerEvents>
                            </SfDatePicker>
                        </Template>
                    </ToolbarItem>
                    <ToolbarItem Align="ItemAlign.Left" Type="ItemType.Input">
                        <Template>
                            <SfDatePicker Width="140px" TValue="DateTime?" @bind-Value="date2" Placeholder="Date Fin" ShowClearButton ShowTodayButton>
                                <DatePickerEvents TValue="DateTime?" ValueChange="@(args => (UpdateGrid()))"> </DatePickerEvents>
                            </SfDatePicker>
                        </Template>
                    </ToolbarItem>
                    <ToolbarItem Align="ItemAlign.Right" Type="ItemType.Input">
                        <Template>
                            <RadzenLabel Text="Type" Component="type" />
                            <div style="padding-left: 10px; margin-right: 10px;" id="type">
                                <SfMultiSelect Width="230px" @bind-Value=@types ShowClearButton="false" TValue="List<string>" Mode="@VisualMode.CheckBox" TItem="string" AllowFiltering="true" DataSource="@(db.API_V_RELEVE.OrderBy(a => a.TypeIntitule).Select(a => a.TypeIntitule).Distinct().ToList())" ShowSelectAll EnableSelectionOrder ShowDropDownIcon PopupHeight="350px">
                                     <MultiSelectFieldSettings Text="TypeIntitule" Value="TypeIntitule"></MultiSelectFieldSettings>
                                     <MultiSelectEvents TItem="string" TValue="List<string>" ValueChange="@(args => UpdateGrid())"></MultiSelectEvents>
                                 </SfMultiSelect>
                             </div>
                         </Template>
                     </ToolbarItem>

                 
                 <ToolbarItem TooltipText="CHERCHE" Align="ItemAlign.Right" Overflow="OverflowOption.Show" Type="ItemType.Input">
                     <Template>
                         <SfTextBox Width="180px" Placeholder="CHERCHE" ValueChanged="@(args => DefaultGrid.SearchAsync(args))"></SfTextBox>
                     </Template>
                 </ToolbarItem>
                 <ToolbarItem OnClick=@(args => (Print())) TooltipText="Imprimer" Text="Imprimer" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Right" PrefixIcon="e-icons e-print"></ToolbarItem>
                 <ToolbarItem OnClick=@(args => (DefaultGrid.ExportToExcelAsync())) TooltipText="Export Excel" Text="Export Excel" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Right" PrefixIcon="e-icons e-export-excel"></ToolbarItem>
             </ToolbarItems>
         </SfToolbar>
        }
        <SfGrid  @ref=DefaultGrid Height="100%" AllowSelection EnableHover DataSource="@(items)">
             <GridPageSettings PageSize="100" />
         <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
             <GridAggregates>
                 <GridAggregate>
                     <GridAggregateColumns>
                         <GridAggregateColumn Field="@nameof(V_ReleveStandard.Debit)" Type="AggregateType.Sum" Format="### ### ##0.00;-### ### ##0.00;#">
                             <FooterTemplate>
                                 @{
                                    var value = (context as AggregateTemplateContext);
                                    <div>
                                        @value.Sum
                                    </div>
                                }
                            </FooterTemplate>
                        </GridAggregateColumn>
                        <GridAggregateColumn Field="@nameof(V_ReleveStandard.Credit)" Type="AggregateType.Sum" Format="### ### ##0.00;-### ### ##0.00;#">
                            <FooterTemplate>
                                @{
                                    var value = (context as AggregateTemplateContext);
                                    <div>
                                        @value.Sum
                                    </div>
                                }
                            </FooterTemplate>
                        </GridAggregateColumn>
                        <GridAggregateColumn Field="@nameof(V_ReleveStandard.Solde)" Type="AggregateType.Sum" Format="### ### ##0.00;-### ### ##0.00;#">
                            <FooterTemplate>
                                @{
                                    var value = (context as AggregateTemplateContext);
                                    <div>
                                        @value.Sum
                                    </div>
                                }
                            </FooterTemplate>
                        </GridAggregateColumn>
                        <GridAggregateColumn Field="@nameof(V_ReleveStandard.SoldeCalucl)" Type="AggregateType.Custom" Format="N2">
                            <FooterTemplate>
                                @{
                                    var Value = (context as AggregateTemplateContext);
                                    <div style="text-align: right;">
                                        @(((items.Sum(a => a.Debit)??0) - (items.Sum(a => a.Credit)??0)).ToString("N2"))
                                    </div>
                                }
                            </FooterTemplate>
                        </GridAggregateColumn>
                    </GridAggregateColumns>
                </GridAggregate>
            </GridAggregates>
            <GridEvents OnRecordDoubleClick="@(args => ShowPiece(args.RowData.DO_Piece,args.RowData.DO_Type))" TValue="V_ReleveStandard"></GridEvents>
            <GridColumns>
                @if (session.IsMobile)
                {
                    <GridColumn HeaderText="Article" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center">
                        <Template>
                            @{
                                var dt = (context as V_ReleveStandard);
                                <div style="padding: 5px;">
                                    <table>
                                        <Tr Title="Pièce" TitleClass="tr-intitule" ContentClass="tr-intitule">@dt.DO_Piece</Tr>
                                        <Tr Title="Date">@dt.DO_Date?.ToShortDateString()</Tr>

                                        <Tr Title="Type">@dt.TypeIntitule</Tr>
                                        <Tr Title="Libellé">@dt.DO_Libelle</Tr>
                                        <Tr Title="Collaborateur">@dt.CO_Nom</Tr>
                                        <Tr Title="Débit" Align="right">@dt.Debit?.ToString("N2")</Tr>
                                        <Tr Title="Crédit" Align="right">@dt.Credit?.ToString("N2")</Tr>
                                        <Tr Title="Solde" Align="right">@dt.SoldeCalucl.ToString("N2")</Tr>

                                    </table>
                                </div>

                            }
                        </Template>
                    </GridColumn>
                }
                else
                {
                    <GridColumn Format="dd/MM/yy" Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(V_ReleveStandard.DO_Date)" HeaderText="Date" />
                    <GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(V_ReleveStandard.DO_Piece)" HeaderText="Pièce" />
                    <GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(V_ReleveStandard.Groupe)" HeaderText="Document" />
                    <GridColumn Width="130" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(V_ReleveStandard.TypeIntitule)" HeaderText="Type" />
                    <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(V_ReleveStandard.DO_Libelle)" HeaderText="Libellé" />
                    <GridColumn Width="180" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(V_ReleveStandard.CO_Nom)" HeaderText="Collaborateur" />
                    <GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(V_ReleveStandard.Debit)" HeaderText="Debit" Format="### ### ##0.00;-### ### ##0.00;#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
                    <GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(V_ReleveStandard.Credit)" HeaderText="Crédit" Format="### ### ##0.00;-### ### ##0.00;#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
                    <GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(V_ReleveStandard.SoldeCalucl)" HeaderText="Solde" Format="### ### ##0.00;-### ### ##0.00;#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
                }

            </GridColumns>

        </SfGrid>
    </div>
}
else
{
    <div class="center-screen">
        <Loading_1 />
    </div>
}
@code
{
    [CascadingParameter]
    public SessionDT session { get; set; } = new SessionDT();
    DB db = new DB();
    bool IsLoaded = false;
    [Parameter] public bool IsLivraison { get; set; } = true;
    [Parameter] public int DO_Domaine { get; set; }
    [Parameter] public int DO_Type { get; set; }
    [Parameter] public string CA_Num { get; set; }
    [Parameter] public string CT_Num { get; set; }
    [Parameter] public string DO_Piece { get; set; }
    [Parameter] public string AR_Ref { get; set; }
    [Parameter] public int CO_No { get; set; }
    [Parameter] public int DE_No { get; set; }
    [Parameter] public string ClassHeight { get; set; }
    [Parameter] public string Periode { get; set; }
    DateTime? date1;
    DateTime? date2;
    int domaine = 0;
    int type = 0;
    SfGrid<V_ReleveStandard> DefaultGrid;
    List<string> types = new List<string>();
    private List<API_V_RELEVE> data = new List<API_V_RELEVE>();
    private List<V_ReleveStandard> items = new List<V_ReleveStandard>();

    private Func<double, string> _fortmat1 = (p) => $"{(p / 100).ToString("### ### ##0 %")}";
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);
        db = session.db;
        types = db.API_V_RELEVE.OrderBy(a => a.TypeIntitule).Select(a => a.TypeIntitule).Distinct().ToList();
        await UpdateGrid();
        IsLoaded = true;
    }
    int[] liv = { 3, 4, 5, 6, 7, 13, 14, 15, 16, 17 };
    private async Task UpdateGrid()
    {
        items = new List<V_ReleveStandard>();
        Decimal solde = 0;
        data = db.API_V_RELEVE.Where(a =>
            ((a.CT_Num == CT_Num && CT_Num != null) || (CT_Num == null))
            && (
                (Periode == "_30J" && a.Jours <= 30)
                || (Periode == "_60J" && a.Jours > 30 && a.Jours <= 60)
                || (Periode == "_90J" && a.Jours > 60 && a.Jours <= 90)
                || (Periode == "_120J" && a.Jours > 90 && a.Jours <= 120)
                || (Periode == "_150J" && a.Jours > 120 && a.Jours <= 150)
                || (Periode == "AN" && a.Jours > 150)
                || (Periode == "Encours")
            )
            && ((date1 != null && a.DO_Date >= date1) || date1 == null)
            && ((date2 != null && a.DO_Date <= date2) || date2 == null)
            && ((types != null) || (types.Contains(a.TypeIntitule)))
        )
            .OrderBy(a => a.DO_Date).ToList();

        var reports = db.API_V_RELEVE.Where(a =>
            ((a.CT_Num == CT_Num && CT_Num != null) || (CT_Num == null))
            && a.DO_Date < date1
            && ((types != null) || (types.Contains(a.TypeIntitule)))
        )
            .OrderBy(a => a.DO_Date).ToList();
        solde = (reports?.Sum(a => a.Debit)??0) - (reports?.Sum(a => a.Credit)??0);
        if (solde != 0)
        {
            var rp = new V_ReleveStandard();
            rp.DO_Libelle = "Solde reporté";
            rp.DO_Date = date1;
            rp.Solde = solde;
            rp.SoldeCalucl = solde;
            if (solde < 0)
            {
                rp.Credit = -solde;
            }
            else
            {
                rp.Debit = solde;
            }
            items.Add(rp);

        }
        foreach(API_V_RELEVE itm in data)
        {
            var ln = new V_ReleveStandard();
            fn.CopyData(itm, ln);
            solde = (ln.Debit??0) - (ln.Credit??0) + solde;
            ln.Solde = solde;
            items.Add(ln);
        }

    }
    private string getTiers()
    {
        string rs = "Tiers";
        if (DO_Domaine == 0)
        {
            rs = "Client";
        }
        if (DO_Domaine == 1)
        {
            rs = "Fournisseur";
        }

        return rs;
    }
    protected async Task ShowPiece(string DO_Piece, short? DO_Type)
    {
        await DialogService.OpenAsync<DetailsPiece>(DO_Piece,
        new Dictionary<string, object>() { { "DO_Piece", DO_Piece }, { "DO_Type", DO_Type } },
        new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "90%", Height = "90%" });
    }
    protected async Task Print()
    {
        List<JSReportParameter> parameters = new List<JSReportParameter>();
        var dt = new List<API_V_RELEVE>();
        foreach(V_ReleveStandard item in items)
        {
            var ln = new API_V_RELEVE();
            fn.CopyData(item, ln);
            {
                dt.Add(ln);
            }
        }
        string data = JsonSerializer.Serialize(dt);
        var emailConfig = new EmailConfiguration();
        var stes = db.API_T_Config;
        if (stes.Any())
        {
            var ste = stes.First();
            emailConfig = new EmailConfiguration
                {
                    SmtpServer = ste.EmailSmtpServer,
                    Port = ste.EmailPort,
                    SenderEmail = ste.EmailSenderEmail,
                    Password = ste.EmailPassword,
                    RecipientEmail = db.F_COMPTET.Where(a => a.CT_Num == CT_Num).SingleOrDefault()?.CT_EMail,
                    Visible = true,
                    FileName = "Extrait de compte",
                    Objet = "Extrait de compte"
                };
        }



        await DialogService.OpenAsync<ReportViewerJSON>("",
        new Dictionary<string, object>() { { "ReportName", "reports\\commercial\\ReleveStandard" }, { "data", data }, { "emailConfig", emailConfig } },
        new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "1000px", Height = "95%" });
    }
    protected async Task Download()
    {
        try
        {
            List<JSReportParameter> parameters = new List<JSReportParameter>();
            var dt = new List<API_V_RELEVE>();
            foreach (V_ReleveStandard item in items)
            {
                var ln = new API_V_RELEVE();
                fn.CopyData(item, ln);
                {
                    dt.Add(ln);
                }
            }
            string data = JsonSerializer.Serialize(dt);
            await JSRuntime.InvokeVoidAsync("downloadFile", "reports\\commercial\\ReleveStandard",data);
        }
        catch(Exception ex)
        {
            await Message.Error(ex.ToString(), 20);
        }

    }
}
