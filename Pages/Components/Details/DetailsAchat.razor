
@if (IsLoaded)
{
    <SfToolbar CssClass="btns">
        <ToolbarItems>
            <ToolbarItem OnClick=@(args => (DefaultGrid.OpenColumnChooserAsync(1,1))) TooltipText="Colonnes selectionnées" Text="Colonnes selectionnées" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Left" PrefixIcon="e-icons e-more-vertical-2"></ToolbarItem>
            <ToolbarItem Align="ItemAlign.Left" Type="ItemType.Separator" />
            <ToolbarItem Align="ItemAlign.Right">
                <Template>
                    <SfDropDownList PopupHeight="300px" Width="160px" Placeholder="Grouper par" AllowFiltering FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" TValue="int" TItem="Items" DataSource="@(groupes)" @bind-Value="@grouped">
                        <DropDownListEvents TValue="int" TItem="Items" />
                        <DropDownListFieldSettings Text="Name" Value="Id" />
                    </SfDropDownList>
                </Template>
            </ToolbarItem>
            <ToolbarItem TooltipText="CHERCHE" Align="ItemAlign.Right" Overflow="OverflowOption.Show" Type="ItemType.Input">
                <Template>
                    <SfTextBox Width="180px" Placeholder="CHERCHE" ValueChanged="@(args => DefaultGrid.SearchAsync(args))"></SfTextBox>
                </Template>
            </ToolbarItem>
            <ToolbarItem OnClick=@(args => (DefaultGrid.PrintAsync())) TooltipText="Imprimer" Text="Imprimer" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Right" PrefixIcon="e-icons e-print"></ToolbarItem>
            <ToolbarItem OnClick=@(args => (DefaultGrid.ExportToExcelAsync())) TooltipText="Export Excel" Text="Export Excel" ShowTextOn="DisplayMode.Overflow" Align="ItemAlign.Right" PrefixIcon="e-icons e-export-excel"></ToolbarItem>

        </ToolbarItems>
    </SfToolbar>
    <div style="height: @Height; zoom: @session.zoomLevel;">
        <SfGrid  @ref=DefaultGrid AllowExcelExport AllowReordering ShowColumnChooser ID="DetailAchatGRID" Height="100%" AllowGrouping=@(grouped > 0) AllowSelection EnableHover DataSource="@(items)" AllowSorting AllowFiltering>
             <GridPageSettings PageSize="100" />
         <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
            <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="API_V_ACHAT"></GridEvents>
         <GridGroupSettings Columns="@(getGroups())" ShowDropArea="false" ShowToggleButton DisablePageWiseAggregates EnableLazyLoading>
             <CaptionTemplate>
                 @{
                        var ag = (context as CaptionTemplateContext);
                        <div style="margin-left: 5px;">@ag.Key</div>
                    }
                </CaptionTemplate>
            </GridGroupSettings>
            <GridAggregates>
                 <GridAggregate>
                     <GridAggregateColumns>
                        @if (AR_Ref != null)
                        {
                            <GridAggregateColumn Field="@nameof(API_V_ACHAT.DL_Qte)" Type="AggregateType.Sum" Format="### ### ##0.00;-### ### ##0.00;#">
                                <FooterTemplate>
                                    @{
                                        var value = (context as AggregateTemplateContext);
                                        <div>
                                            @value.Sum
                                        </div>
                                    }
                                </FooterTemplate>
                                <GroupCaptionTemplate>
                                    @{
                                        var value = (context as AggregateTemplateContext);
                                        <div>
                                            @value.Sum
                                        </div>
                                    }
                                </GroupCaptionTemplate>

                            </GridAggregateColumn>
                        }

                        <GridAggregateColumn Field="@nameof(API_V_ACHAT.DL_MontantHT)" Type="AggregateType.Sum" Format="### ### ##0.00;-### ### ##0.00;#">
                             <FooterTemplate>
                                 @{
                                    var value = (context as AggregateTemplateContext);
                                    <div>
                                        @value.Sum
                                    </div>
                                }
                            </FooterTemplate>
                            <GroupCaptionTemplate>
                                @{
                                    var value = (context as AggregateTemplateContext);
                                    <div>
                                        @value.Sum
                                    </div>
                                }
                            </GroupCaptionTemplate>
                        </GridAggregateColumn>
                        <GridAggregateColumn Field="@nameof(API_V_ACHAT.DL_MontantTTC)" Type="AggregateType.Sum" Format="### ### ##0.00;-### ### ##0.00;#">
                            <FooterTemplate>
                                @{
                                    var value = (context as AggregateTemplateContext);
                                    <div>
                                        @value.Sum
                                    </div>
                                }
                            </FooterTemplate>
                            <GroupCaptionTemplate>
                                @{
                                    var value = (context as AggregateTemplateContext);
                                    <div>
                                        @value.Sum
                                    </div>
                                }
                            </GroupCaptionTemplate>
                        </GridAggregateColumn>
                    </GridAggregateColumns>
                </GridAggregate>
            </GridAggregates>
            <GridColumns>
                <GridColumn Width="300" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.CT_Intitule)" HeaderText="Tiers" Visible=@(CT_Num == null) />
                <GridColumn Width="300" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.AR_Design)" HeaderText="Désignation" Visible=@(AR_Ref == null) />
                <GridColumn Width="200" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.CA_Intitule)" HeaderText="Affaire" Visible=@(CA_Num == null) />
                <GridColumn Width="200" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.CO_Nom)" HeaderText="Collaborateur" />
                <GridColumn Width="90" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.DO_Piece)" HeaderText="Pièce" />
                <GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.CT_Num)" HeaderText="N° Tiers" Visible=@(CT_Num == null) />
                <GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.CA_Num)" HeaderText="N° Affaire" Visible=@(CA_Num == null) />
                <GridColumn Width="90" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.AR_Ref)" HeaderText="Référence" Visible=@(AR_Ref == null) />
                <GridColumn Format="dd/MM/yy" Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.DO_Date)" HeaderText="Date" />
                <GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.DL_Qte)" HeaderText="Qté" Format="### ### ##0.00;-### ### ##0.00;#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
                <GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.PUNet)" HeaderText="PU" Format="### ### ##0.00;-### ### ##0.00;#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
                <GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.DL_MontantHT)" HeaderText="HT" Format="### ### ##0.00;-### ### ##0.00;#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
                <GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.DL_MontantTTC)" HeaderText="TTC" Format="### ### ##0.00;-### ### ##0.00;#" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
            </GridColumns>

        </SfGrid>
    </div>
}
else
{
    <div class="center-screen">
        <Loading_1 />
    </div>
}
@code
{
    [CascadingParameter]
    public SessionDT session { get; set; } = new SessionDT();
    DB db = new DB();
    [Parameter] public bool IsLivraison { get; set; } = true;
    [Parameter] public int DO_Domaine { get; set; }
    [Parameter] public int DO_Type { get; set; }
    [Parameter] public string CA_Num { get; set; }
    [Parameter] public string CT_Num { get; set; }
    [Parameter] public string DO_Piece { get; set; }
    [Parameter] public string AR_Ref { get; set; }
    [Parameter] public string CO_Nom { get; set; }
    [Parameter] public string MoisAnnee { get; set; }
    [Parameter] public string Annee { get; set; }
    [Parameter] public int CO_No { get; set; } = 0;
    [Parameter] public int DE_No { get; set; }
    [Parameter] public string Height { get; set; }
    [Parameter] public string Periode { get; set; }
    [Parameter] public DateTime? Date1 { get; set; }
    [Parameter] public DateTime? Date2 { get; set; }
    List<Items> groupes = new List<Items>();
    bool IsLoaded = false;
    int grouped = 0;
    private List<API_V_ACHAT> items = new List<API_V_ACHAT>();
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);
        db = session.db;
        groupes = fn.GroupedBy();
        await UpdateGrid();
        IsLoaded = true;
    }
    private SfGrid<API_V_ACHAT> DefaultGrid;
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "DetailAchatGRID_excelexport") //Id is combination of Grid's ID and itemname
        {
            await this.DefaultGrid.ExcelExport();
        }
    }
    int[] liv = { 3, 4, 5, 6, 7, 13, 14, 15, 16, 17 };
    private async Task UpdateGrid()
    {
        items = db.API_V_ACHAT.Where(a =>
            ((a.CT_Num == CT_Num && CT_Num != null) || (CT_Num == null))
            && ((a.Annee == Annee && Annee != null) || (Annee == null))
            && ((a.MoisAnnee == MoisAnnee && MoisAnnee != null) || (MoisAnnee == null))
            && ((a.AR_Ref == AR_Ref && AR_Ref != null) || (AR_Ref == null))
                                    && ((a.CA_Num == CA_Num && CA_Num != null) || (CA_Num == null))
                        && ((a.CO_Nom == CO_Nom && CO_Nom != null) || (CO_Nom == null))
            && ((Date1 != null && a.DO_Date >= Date1) || Date1 == null)
            && ((Date2 != null && a.DO_Date <= Date2) || Date2 == null)        
        ).OrderBy(a => a.DO_Date).ToList();
    }
    private string getTiers()
    {
        string rs = "Tiers";
        if (DO_Domaine == 0)
        {
            rs = "Client";
        }
        if (DO_Domaine == 1)
        {
            rs = "Fournisseur";
        }

        return rs;
    }
    private string getDateWidth()
    {
        if(!(grouped > 0))
        {
            return "80px";
        }
        else
        {
            return "320px";
        }
    }
    private new string[] getGroups()
    {
        string[] rs = new string[] { "DO_Piece" };

        if(grouped == 1)
        {
            rs = new string[] { "DO_Piece" };
        }
        if (grouped == 2)
        {
            rs = new string[] { "CT_Intitule" };
        }
        if (grouped == 3)
        {
         rs = new string[] { "AR_Design" };
        }
        if (grouped == 4)
        {
            rs = new string[] { "CO_Nom" };
        }
        if (grouped == 5)
        {
            rs = new string[] { "CA_Intitule" };
        }
        return rs;
    }
}
