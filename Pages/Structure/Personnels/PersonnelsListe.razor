@page "/personnels"
@page "/cr-responsables"
@attribute [Authorize(Roles = "Super Admin,Admin,Direction, Responsable RH,Responsable Materiel")]
@if (IsLoaded)
{
	<Card_1 Title="LISTE DES PERSONNELS">
		<RadzenContent Container="main">
			<div class="grid-90">
				<div style="zoom: @session.zoomLevel; height: 100%;" >
					<SfGrid Height="100%" AllowResizing AllowSorting AllowSelection ShowColumnChooser="true" ID="Grid" @ref="DefaultGrid" AllowPdfExport="true" AllowExcelExport="true" AllowPaging DataSource="@items"
							Toolbar="@(new List<object>() { "ColumnChooser", "Search", "ExcelExport", "Add", "Delete" })">
						<GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="false" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog" />
						<GridEvents OnActionBegin="OnActionBegin" OnRecordDoubleClick="Edit" TValue="API_V_PERSONNEL"></GridEvents>
						<GridPageSettings PageSize="100"></GridPageSettings>
						<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
						<GridTemplates>
							<EmptyRecordTemplate>
								<Empty></Empty>
							</EmptyRecordTemplate>
						</GridTemplates>
						<GridColumns>
							<GridColumn Width="200" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.Nom)" HeaderText="Nom"></GridColumn>
							<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.Matricule)" HeaderText="Matricule"></GridColumn>
							<GridColumn Width="60" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.CIN)" HeaderText="CIN"></GridColumn>
							<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.DateNaissance)" HeaderText="Naissance" Format="dd/MM/yy"></GridColumn>
							<GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.TelephonePerso)" HeaderText="Tél Person"></GridColumn>
							<GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.TelephonePro)" HeaderText="Tél Pro"></GridColumn>
							<GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.TelephoneAutre)" HeaderText="Autre Tél"></GridColumn>
							<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.NationaliteIntitule)" HeaderText="Nationalité" />
							<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.ContratIntitule)" HeaderText="Contrat" />
							<GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.SituationFamilialeIntitule)" HeaderText="Sit. Fam." />
							<GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.AgenceIntitule)" HeaderText="Agence" />
							<GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.DepartementIntitule)" HeaderText="Département" />
							<GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_PERSONNEL.FonctionIntitule)" HeaderText="Fonction" />
						</GridColumns>
						<SfSpinner @bind-Visible="@loading">
						</SfSpinner>
					</SfGrid>
				</div>
			</div>
		</RadzenContent>
	</Card_1>
}
else
{
	<div class="center-screen">
		<Loading_1 />
	</div>
}




@code
{

	[CascadingParameter] public SessionDT session { get; set; } = new SessionDT();
	DB db = new DB();
	//Components
	private SfGrid<API_V_PERSONNEL> DefaultGrid;


	private List<API_V_PERSONNEL> items = new List<API_V_PERSONNEL>();
	bool loading = false;
	bool IsLoaded = false;
	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(1);
		db = session.db;
		GC.Collect();
		await LoadData();
		IsLoaded = true;

	}
	private async Task LoadData()
	{
		items = session.db.API_V_PERSONNEL.Where(a => a.Agence != 0).OrderBy(a => a.Nom).ToList();
	}

	protected async Task Edit(RecordDoubleClickEventArgs<API_V_PERSONNEL> args)
	{

		await DialogService.OpenAsync<PersonnelsFiche>(args.RowData.Nom,
	new Dictionary<string, object>() { { "id", args.RowData.id } },
	new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "1000px", Height = "95%" });
		await LoadData();
	}
	private async Task Add()
	{
		await DialogService.OpenAsync<PersonnelsFiche>($"Ajouter un élément",
		new Dictionary<string, object>() { { "id", 0 } },
		new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "1000px", Height = "95%" });
		await LoadData();
	}
	private async Task OnActionBegin(ActionEventArgs<API_V_PERSONNEL> args)
	{
		if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add
	|| args.RequestType == Syncfusion.Blazor.Grids.Action.Print
	|| args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
		{
			args.Cancel = true;
		}

		if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
		{
			await Add();
		}
		if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
		{
			db.Database.ExecuteSqlRaw("DELETE FROM API_T_PERSONNEL WHERE id = {0}", args.Data.id);
			db.SaveChanges();
			await LoadData();
		}

	}




}