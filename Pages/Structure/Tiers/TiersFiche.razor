@if (IsLoaded)
{
	<div>
		<GridRow>
			<GridCol Xs="24" Md="24">
				<Form Model="@row" Size="@AntSizeLDSType.Small" Layout="@FormLayout.Horizontal" LabelColSpan="6" Context="FormContext">
					<SfTab CssClass="e-fill">
						<TabEvents Selecting="@(args => fn.DisableTabSelect(args))" /><TabItems>
							<TabItem>
								<ChildContent>
									<TabHeader Text="Accueil"></TabHeader>
								</ChildContent>
								<ContentTemplate>
									<GridRow>
										<GridCol Xs="24" Md="12">
											<Card>
												<FormItem LabelAlign="AntLabelAlignType.Left" Label="Intitulé" LabelColSpan="4">
													<SfTextBox @bind-Value="@row.CT_Intitule" Readonly />
												</FormItem>
												<FormItem LabelAlign="AntLabelAlignType.Left" Label="Numéro" LabelColSpan="4">
													<SfTextBox @bind-Value="@row.CT_Num" Readonly />
												</FormItem>
												<FormItem LabelAlign="AntLabelAlignType.Left" Label="Ville" LabelColSpan="4">
													<SfTextBox @bind-Value="@row.CT_Ville" Readonly />
												</FormItem>
											</Card>
										</GridCol>
										<GridCol Xs="24" Md="12">
											<Card>
												<FormItem LabelAlign="AntLabelAlignType.Left" Label="Adresse" LabelColSpan="4">
													<SfTextBox @bind-Value="@row.CT_Adresse" Readonly />
												</FormItem>
												<FormItem LabelAlign="AntLabelAlignType.Left" Label="Téléphone" LabelColSpan="4">
													<SfTextBox @bind-Value="@row.CT_Telephone" Readonly />
												</FormItem>
												<FormItem LabelAlign="AntLabelAlignType.Left" Label="Email" LabelColSpan="4">
													<SfTextBox @bind-Value="@row.CT_EMail" Readonly />
												</FormItem>
											</Card>
										</GridCol>

										<GridCol Xs="12" Md="3">
											<Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card st st-white" Title="CA TTC" Value="@((row.DL_MontantTTC ?? 0).ToString("### ### ##0.00;-### ### ##0.00;0.00"))" ValueStyle="color: #3f8600;" Suffix="@fn.getDevise(db)" />
										</GridCol>
										<GridCol Xs="12" Md="3">
											<Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card st st-white" Title="Réglements" Value="@((row.RG_Montant ?? 0).ToString("### ### ##0.00;-### ### ##0.00;0.00"))" ValueStyle="color: #3f8600;" Suffix="@fn.getDevise(db)" />
										</GridCol>
										<GridCol Xs="12" Md="3">
											<Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card st st-white" Title="Solde Commercial" Value="@((row.SoldeCommercial ?? 0).ToString("### ### ##0.00;-### ### ##0.00;0.00"))" ValueStyle="color: #3f8600;" Suffix="@fn.getDevise(db)" />
										</GridCol>
										<GridCol Xs="12" Md="3">
											<Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card st st-white" Title="Plafond" Value="@((row.CT_Encours ?? 0).ToString("### ### ##0.00;-### ### ##0.00;0.00"))" ValueStyle="color: #3f8600;" Suffix="@fn.getDevise(db)" />
										</GridCol>
										@if (((row.SoldeCommercial ?? 0) - (row.CT_Encours ?? 0)) > 0)
										{
											<GridCol Xs="12" Md="3">
												<Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card st st-red" Title="Dépassement" Value="@(((row.SoldeCommercial??0) - (row.CT_Encours??0)).ToString("### ### ##0.00;-### ### ##0.00;0.00"))" ValueStyle="color: #3f8600;" Suffix="@fn.getDevise(db)" />
											</GridCol>
										}
										else
										{
											<GridCol Xs="12" Md="3">
												<Statistic CultureInfo=@(new System.Globalization.CultureInfo("en-US")) Class="ant-card st st-green" Title="Reste" Value="@(((row.SoldeCommercial??0) - (row.CT_Encours??0)).ToString("### ### ##0.00;-### ### ##0.00;0.00"))" ValueStyle="color: #3f8600;" Suffix="@fn.getDevise(db)" />
											</GridCol>
										}

										<GridCol Xs="24" Md="12">
											<Card title="CA PAR ARTICLE">
												<div style="zoom: @session.zoomLevel" class="no-border small-grid grid-50">
													@if (row.CT_Type == 0)
													{
														<SfGrid AllowTextWrap Height="100%" DataSource="@(dt_article)"
																Toolbar="@(new List<object>() { "Print","ExcelExport","Search"})" AllowSorting>
															<GridAggregates>
																<GridAggregate>
																	<GridAggregateColumns>
																		<GridAggregateColumn Field="@nameof(API_V_MARGE.DL_MontantHT)" Type="AggregateType.Sum" Format="N2">
																			<FooterTemplate>
																				@{
																					var SumValue = (context as AggregateTemplateContext);
																					<div>
																						@SumValue.Sum
																					</div>
																				}
																			</FooterTemplate>
																		</GridAggregateColumn>
																		<GridAggregateColumn Field="@nameof(API_V_MARGE.DL_MontantTTC)" Type="AggregateType.Sum" Format="N2">
																			<FooterTemplate>
																				@{
																					var SumValue = (context as AggregateTemplateContext);
																					<div>
																						@SumValue.Sum
																					</div>
																				}
																			</FooterTemplate>

																		</GridAggregateColumn>
																		<GridAggregateColumn Field="@nameof(API_V_MARGE.CMUPCoutTotal)" Type="AggregateType.Sum" Format="N2">
																			<FooterTemplate>
																				@{
																					var SumValue = (context as AggregateTemplateContext);
																					<div>
																						@SumValue.Sum
																					</div>
																				}
																			</FooterTemplate>

																		</GridAggregateColumn>
																		<GridAggregateColumn Field="@nameof(API_V_MARGE.CMUPMarge)" Type="AggregateType.Sum" Format="N2">
																			<FooterTemplate>
																				@{
																					var SumValue = (context as AggregateTemplateContext);
																					<div>
																						@SumValue.Sum
																					</div>
																				}
																			</FooterTemplate>

																		</GridAggregateColumn>
																	</GridAggregateColumns>
																</GridAggregate>
															</GridAggregates>
															<GridPageSettings PageSize="100" />
															<GridEvents OnRecordDoubleClick=@(args => ShowDetail(args, "article")) TValue="API_V_MARGE"></GridEvents>

															<GridColumns>
																<GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_MARGE.AR_Ref)" HeaderText="Référence" />
																<GridColumn Width="300" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_MARGE.AR_Design)" HeaderText="Désignation" />
																<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_MARGE.DL_Qte)" HeaderText="Qté" Format="N2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
																<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_MARGE.DL_MontantHT)" HeaderText="CA HT" Format="N2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
																<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_MARGE.DL_MontantTTC)" HeaderText="CA TTC" Format="N2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
																<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_MARGE.CMUPMarge)" HeaderText="Marge" Format="N2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right">
																	<Template>
																		@{
																			var dt = (context as API_V_MARGE);
																			if (dt.CMUPMarge > 0)
																			{
																				<div style="text-align: right;">
																					<span class="statustxt e-activecolor">@dt.CMUPMarge?.ToString("N2")</span>
																				</div>
																			}
																			if (dt.CMUPMarge < 0)
																			{
																				<div style="text-align: right;">
																					<span class="statustxt e-inactivecolor">@dt.CMUPMarge?.ToString("N2")</span>
																				</div>
																			}
																		}
																	</Template>
																</GridColumn>
																<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_MARGE.CMUPMargeP)" HeaderText="%" Format="P2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right">
																	<Template>
																		@{
																			var dt = (context as API_V_MARGE);
																			if (dt.CMUPMargeP > 0)
																			{
																				<div style="text-align: right;">
																					<span class="statustxt e-activecolor">@dt.CMUPMargeP?.ToString("P2")<RadzenIcon Icon="arrow_upward" /></span>
																				</div>
																			}
																			if (dt.CMUPMargeP < 0)
																			{
																				<div style="text-align: right;">
																					<span class="statustxt e-inactivecolor">@dt.CMUPMargeP?.ToString("P2")<RadzenIcon Icon="arrow_downward" /></span>
																				</div>
																			}
																		}
																	</Template>
																</GridColumn>
															</GridColumns>

														</SfGrid>
													}
													@if (row.CT_Type == 1)
													{
														<SfGrid AllowTextWrap Height="100%" DataSource="@(achat_dt_article)" Toolbar="@(new List<object>() { "Print","ExcelExport","Search"})" AllowSorting>
															<GridAggregates>
																<GridAggregate>
																	<GridAggregateColumns>
																		<GridAggregateColumn Field="@nameof(API_V_ACHAT.DL_MontantHT)" Type="AggregateType.Sum" Format="N2">
																			<FooterTemplate>
																				@{
																					var SumValue = (context as AggregateTemplateContext);
																					<div>
																						@SumValue.Sum
																					</div>
																				}
																			</FooterTemplate>

																		</GridAggregateColumn>
																		<GridAggregateColumn Field="@nameof(API_V_ACHAT.DL_MontantTTC)" Type="AggregateType.Sum" Format="N2">
																			<FooterTemplate>
																				@{
																					var SumValue = (context as AggregateTemplateContext);
																					<div>
																						@SumValue.Sum
																					</div>
																				}
																			</FooterTemplate>

																		</GridAggregateColumn>
																	</GridAggregateColumns>
																</GridAggregate>
															</GridAggregates>
															<GridPageSettings PageSize="100" />
															<GridEvents OnRecordDoubleClick=@(args => ShowDetailAchat(args, "article")) TValue="API_V_ACHAT"></GridEvents>
															<GridColumns>
																<GridColumn Width="100" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.AR_Ref)" HeaderText="Référence" />
																<GridColumn Width="400" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.AR_Design)" HeaderText="Désignation" />
																<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.DL_Qte)" HeaderText="Qté" Format="N2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
																<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.DL_MontantHT)" HeaderText="CA HT" Format="N2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
																<GridColumn Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.DL_MontantTTC)" HeaderText="CA TTC" Format="N2" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" />
															</GridColumns>
														</SfGrid>
													}
												</div>
											</Card>
										</GridCol>
										<GridCol Xs="24" Md="12">
											<Card Title="CA PAR ANNEE">
												<div style="zoom: @session.zoomLevel" class="no-border small-grid grid-50">
													@if (row.CT_Type == 0)
													{
														<SfGrid GridLines="GridLine.Both" AllowTextWrap Height="100%" DataSource="@(dt_mois)" EnableHover="false">
															<GridEvents TValue="API_V_MARGE"></GridEvents>
															<GridAggregates>
																<GridAggregate>
																	<GridAggregateColumns>
																		@foreach (string item in annees)
																		{
																			<GridAggregateColumn Field="@(item+"_CA")" Type="AggregateType.Custom" Format="N2">
																				<FooterTemplate>
																					@{

																						<div style="text-align: right; font-weight: 700;">

																							@items.Where(a => a.Annee == item).Sum(a => a.DL_MontantHT)?.ToString("### ### ##0.00;-### ### ##0.00;#")
																						</div>
																					}
																				</FooterTemplate>

																			</GridAggregateColumn>
																			<GridAggregateColumn Field="@(item+"_Diff")" Type="AggregateType.Custom" Format="N2">
																				<FooterTemplate>
																					@{
																						var currentValue = items.Where(a => a.Annee == item).Sum(a => a.DL_MontantHT);

																						var previousYear = (int.Parse(item) - 1).ToString();
																						var previousValue = items.Where(a => a.Annee == previousYear).Sum(a => a.DL_MontantHT);
																						var differenceValue = currentValue - previousValue;
																					}
																					@if (@differenceValue > 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-activecolor">+@differenceValue?.ToString("N2")</span>
																						</div>
																					}
																					@if (@differenceValue < 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-inactivecolor">@differenceValue?.ToString("N2")</span>
																						</div>
																					}
																				</FooterTemplate>
																			</GridAggregateColumn>
																			<GridAggregateColumn Field="@(item+"_Per")" Type="AggregateType.Custom" Format="N2">
																				<FooterTemplate>
																					@{
																						var currentValue = items.Where(a => a.Annee == item).Sum(a => a.DL_MontantHT);
																						var previousYear = (int.Parse(item) - 1).ToString();
																						var previousValue = items.Where(a => a.Annee == previousYear).Sum(a => a.DL_MontantHT);
																						var differenceValue = currentValue - previousValue;
																						var percentageDifference = previousValue != 0 ? (differenceValue / previousValue) : (currentValue != 0 ? 1 : 0);
																					}
																					@if (@percentageDifference > 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-activecolor">+@percentageDifference?.ToString("P2")</span>
																						</div>
																					}
																					@if (@percentageDifference < 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-inactivecolor">@percentageDifference?.ToString("P2")</span>
																						</div>
																					}
																				</FooterTemplate>
																			</GridAggregateColumn>
																		}
																	</GridAggregateColumns>
																</GridAggregate>
															</GridAggregates>

															<GridColumns>
																<GridColumn MinWidth="70" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_MARGE.Mois)" HeaderText="Mois">
																	<Template>
																		@{
																			var dt = (context as API_V_MARGE);
																			<div style="text-align: left;">@fn.GetFrenchMonth(dt.Mois)</div>
																		}
																	</Template>
																</GridColumn>
																@foreach (string item in annees)
																{

																	<GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderText="@(item)">
																		<GridColumns>
																			<GridColumn Field="@(item+"_CA")" HeaderText="CA" Width="90" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center">
																				<Template>
																					@{
																						var dt = (context as API_V_MARGE);
																						var currentValue = items.Where(a => a.Mois == dt.Mois && a.Annee == item).Sum(a => a.DL_MontantHT);
																					}
																					<div style="text-align: right;">
																						@currentValue?.ToString("### ### ##0.00;-### ### ##0.00;#")
																					</div>
																				</Template>
																			</GridColumn>
																			<GridColumn Field="@(item+"_Diff")" HeaderText="Diff" Width="90" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center">
																				<Template>
																					@{
																						var dt = (context as API_V_MARGE);
																						var currentValue = items.Where(a => a.Mois == dt.Mois && a.Annee == item).Sum(a => a.DL_MontantHT);

																						var previousYear = (int.Parse(item) - 1).ToString();
																						var previousValue = items.Where(a => a.Mois == dt.Mois && a.Annee == previousYear).Sum(a => a.DL_MontantHT);
																						var differenceValue = currentValue - previousValue;
																					}
																					@if (@differenceValue > 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-activecolor">+@differenceValue?.ToString("N2")</span>
																						</div>
																					}
																					@if (@differenceValue < 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-inactivecolor">@differenceValue?.ToString("N2")</span>
																						</div>
																					}
																				</Template>
																			</GridColumn>
																			<GridColumn Field="@(item+"_Per")" HeaderText="%" Width="90" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center">
																				<Template>
																					@{
																						var dt = (context as API_V_MARGE);
																						var currentValue = items.Where(a => a.Mois == dt.Mois && a.Annee == item).Sum(a => a.DL_MontantHT);

																						var previousYear = (int.Parse(item) - 1).ToString();
																						var previousValue = items.Where(a => a.Mois == dt.Mois && a.Annee == previousYear).Sum(a => a.DL_MontantHT);

																						var differenceValue = currentValue - previousValue;
																						var percentageDifference = previousValue != 0 ? (differenceValue / previousValue) : (currentValue != 0 ? 1 : 0);
																					}

																					@if (@percentageDifference > 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-activecolor">+@percentageDifference?.ToString("P2")</span>
																						</div>
																					}
																					@if (@percentageDifference < 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-inactivecolor">@percentageDifference?.ToString("P2")</span>
																						</div>
																					}
																				</Template>
																			</GridColumn>
																		</GridColumns>

																	</GridColumn>
																}

															</GridColumns>

														</SfGrid>
													}
													@if (row.CT_Type == 1)
													{
														<SfGrid GridLines="GridLine.Both" AllowTextWrap Height="100%" DataSource="@(achat_dt_mois)" EnableHover="false">
															<GridEvents TValue="API_V_ACHAT"></GridEvents>
															<GridAggregates>
																<GridAggregate>
																	<GridAggregateColumns>
																		@foreach (string item in achat_annees)
																		{
																			<GridAggregateColumn Field="@(item+"_CA")" Type="AggregateType.Custom" Format="N2">
																				<FooterTemplate>
																					@{

																						<div style="text-align: right; font-weight: 700;">

																							@achat_items.Where(a => a.Annee == item).Sum(a => a.DL_MontantHT)?.ToString("### ### ##0.00;-### ### ##0.00;#")
																						</div>
																					}
																				</FooterTemplate>

																			</GridAggregateColumn>
																			<GridAggregateColumn Field="@(item+"_Diff")" Type="AggregateType.Custom" Format="N2">
																				<FooterTemplate>
																					@{
																						var currentValue = achat_items.Where(a => a.Annee == item).Sum(a => a.DL_MontantHT);

																						var previousYear = (int.Parse(item) - 1).ToString();
																						var previousValue = achat_items.Where(a => a.Annee == previousYear).Sum(a => a.DL_MontantHT);
																						var differenceValue = currentValue - previousValue;
																					}
																					@if (@differenceValue > 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-activecolor">+@differenceValue?.ToString("N2")</span>
																						</div>
																					}
																					@if (@differenceValue < 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-inactivecolor">@differenceValue?.ToString("N2")</span>
																						</div>
																					}
																				</FooterTemplate>
																			</GridAggregateColumn>
																			<GridAggregateColumn Field="@(item+"_Per")" Type="AggregateType.Custom" Format="N2">
																				<FooterTemplate>
																					@{
																						var currentValue = achat_items.Where(a => a.Annee == item).Sum(a => a.DL_MontantHT);
																						var previousYear = (int.Parse(item) - 1).ToString();
																						var previousValue = achat_items.Where(a => a.Annee == previousYear).Sum(a => a.DL_MontantHT);
																						var differenceValue = currentValue - previousValue;
																						var percentageDifference = previousValue != 0 ? (differenceValue / previousValue) : (currentValue != 0 ? 1 : 0);
																					}
																					@if (@percentageDifference > 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-activecolor">+@percentageDifference?.ToString("P2")</span>
																						</div>
																					}
																					@if (@percentageDifference < 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-inactivecolor">@percentageDifference?.ToString("P2")</span>
																						</div>
																					}
																				</FooterTemplate>
																			</GridAggregateColumn>
																		}
																	</GridAggregateColumns>
																</GridAggregate>
															</GridAggregates>
															<GridColumns>
																<GridColumn MinWidth="70" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field="@nameof(API_V_ACHAT.Mois)" HeaderText="Mois">
																	<Template>
																		@{
																			var dt = (context as API_V_ACHAT);
																			<div style="text-align: left;">@fn.GetFrenchMonth(dt.Mois)</div>
																		}
																	</Template>
																</GridColumn>
																@foreach (string item in achat_annees)
																{

																	<GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" HeaderText="@(item)">
																		<GridColumns>
																			<GridColumn Field="@(item+"_CA")" HeaderText="CA" Width="90" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center">
																				<Template>
																					@{
																						var dt = (context as API_V_ACHAT);
																						var currentValue = achat_items.Where(a => a.Mois == dt.Mois && a.Annee == item).Sum(a => a.DL_MontantHT);
																					}
																					<div style="text-align: right;">
																						@currentValue?.ToString("### ### ##0.00;-### ### ##0.00;#")
																					</div>
																				</Template>
																			</GridColumn>
																			<GridColumn Field="@(item+"_Diff")" HeaderText="Diff" Width="90" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center">
																				<Template>
																					@{
																						var dt = (context as API_V_ACHAT);
																						var currentValue = achat_items.Where(a => a.Mois == dt.Mois && a.Annee == item).Sum(a => a.DL_MontantHT);

																						var previousYear = (int.Parse(item) - 1).ToString();
																						var previousValue = achat_items.Where(a => a.Mois == dt.Mois && a.Annee == previousYear).Sum(a => a.DL_MontantHT);
																						var differenceValue = currentValue - previousValue;
																					}
																					@if (@differenceValue > 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-activecolor">+@differenceValue?.ToString("N2")</span>
																						</div>
																					}
																					@if (@differenceValue < 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-inactivecolor">@differenceValue?.ToString("N2")</span>
																						</div>
																					}
																				</Template>
																			</GridColumn>
																			<GridColumn Field="@(item+"_Per")" HeaderText="%" Width="90" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center">
																				<Template>
																					@{
																						var dt = (context as API_V_ACHAT);
																						var currentValue = achat_items.Where(a => a.Mois == dt.Mois && a.Annee == item).Sum(a => a.DL_MontantHT);

																						var previousYear = (int.Parse(item) - 1).ToString();
																						var previousValue = achat_items.Where(a => a.Mois == dt.Mois && a.Annee == previousYear).Sum(a => a.DL_MontantHT);

																						var differenceValue = currentValue - previousValue;
																						var percentageDifference = previousValue != 0 ? (differenceValue / previousValue) : (currentValue != 0 ? 1 : 0);
																					}

																					@if (@percentageDifference > 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-activecolor">+@percentageDifference?.ToString("P2")</span>
																						</div>
																					}
																					@if (@percentageDifference < 0)
																					{
																						<div style="text-align: right;">
																							<span class="statustxt e-inactivecolor">@percentageDifference?.ToString("P2")</span>
																						</div>
																					}
																				</Template>
																			</GridColumn>
																		</GridColumns>

																	</GridColumn>
																}

															</GridColumns>

														</SfGrid>
													}
												</div>
											</Card>

										</GridCol>
									</GridRow>
								</ContentTemplate>
							</TabItem>
							<TabItem>
								<ChildContent>
									<TabHeader Text="Relevé standard"></TabHeader>
								</ChildContent>
								<ContentTemplate>
									<div class="no-border small-grid">
										<DetailsReleveStandard ClassHeight="grid-78" CT_Num="@row.CT_Num" Periode="Encours"></DetailsReleveStandard>
									</div>

								</ContentTemplate>
							</TabItem>
							<TabItem>
								<ChildContent>
									<TabHeader Text="Relevé par document"></TabHeader>
								</ChildContent>
								<ContentTemplate>
									<div class="no-border small-grid">
										<DetailsReleve ClassHeight="grid-78" CT_Num="@row.CT_Num" Periode="Encours"></DetailsReleve>
									</div>

								</ContentTemplate>
							</TabItem>
							<TabItem>
								<ChildContent>
									<TabHeader Text="Documents"></TabHeader>
								</ChildContent>
								<ContentTemplate>
									<div class="no-border small-grid">
										<DetailsEntete ClassHeight="grid-78" CT_Num="@row.CT_Num" DO_Domaine="row.CT_Type"></DetailsEntete>
									</div>

								</ContentTemplate>
							</TabItem>
							<TabItem>
								<ChildContent>
									<TabHeader Text="Réglements"></TabHeader>
								</ChildContent>
								<ContentTemplate>
									<div class="no-border small-grid">
										<DetailsReglement Style="@("zoom: "+ @session.zoomLevel)" ClassHeight="grid-78" CT_Num="@row.CT_Num" DO_Domaine="row.CT_Type"></DetailsReglement>
									</div>

								</ContentTemplate>
							</TabItem>

						</TabItems>
					</SfTab>
				</Form>

			</GridCol>

		</GridRow>
	</div>
}
else
{
	<div class="center-screen">
		<Loading_1 />
	</div>
}






@code {
	[CascadingParameter]
	public SessionDT session { get; set; } = new SessionDT();
	DB db = new DB();
	[Parameter] public int cbMarq { get; set; }
	private API_V_COMPTET row = new API_V_COMPTET();
	[Parameter] public string type { get; set; }
	DateTime? date1;
	DateTime? date2;
	bool IsLoaded = false;

	private string zoomLevel = "1"; // Default zoom level
	private List<API_V_MARGE> items = new List<API_V_MARGE>();
	private List<API_V_MARGE> dt_mois = new List<API_V_MARGE>();
	private List<API_V_MARGE> dt_annee = new List<API_V_MARGE>();
	private List<API_V_MARGE> dt_article = new List<API_V_MARGE>();

	private List<API_V_ACHAT> achat_items = new List<API_V_ACHAT>();
	private List<API_V_ACHAT> achat_dt_mois = new List<API_V_ACHAT>();
	private List<API_V_ACHAT> achat_dt_annee = new List<API_V_ACHAT>();
	private List<API_V_ACHAT> achat_dt_article = new List<API_V_ACHAT>();
	private List<string> annees = new List<string>();
	private List<string> achat_annees = new List<string>();
	protected override async Task OnInitializedAsync()
	{



		await Task.Delay(100);
		db = session.db;
		if (cbMarq != 0)
		{
			row = db.API_V_COMPTET.Where(a => a.cbMarq == cbMarq).SingleOrDefault();
		}
		await LoadData();
		IsLoaded = true;
	}
	private async Task LoadData()
	{
		items = db.API_V_MARGE.Where(a => ((date1 != null && a.DO_Date >= date1) || date1 == null) && ((date2 != null && a.DO_Date <= date2) || date2 == null) && a.CT_Num == row.CT_Num).ToList();
		dt_mois = items.Where(a => ((date1 != null && a.DO_Date >= date1) || date1 == null) && ((date2 != null && a.DO_Date <= date2) || date2 == null) && a.CT_Num == row.CT_Num)
		.GroupBy(a => new { a.Mois })
		.Select(a => new API_V_MARGE
			{
				Mois = a.Key.Mois,
				DL_MontantHT = a.Sum(a => a.DL_MontantHT),
				DL_MontantTTC = a.Sum(a => a.DL_MontantTTC),
				CMUPCoutTotal = a.Sum(a => a.CMUPCoutTotal),
				CMUPMarge = a.Sum(a => a.CMUPMarge),
				CMUPMargeP = a.Sum(a => a.DL_MontantHT) != 0.0m ? a.Sum(a => a.CMUPMarge) / a.Sum(a => a.DL_MontantHT) : 0.0m
			}).OrderBy(a => a.Mois).Take(12).ToList();
		annees = items.OrderBy(a => a.Annee).Select(a => a.Annee).Distinct().ToList();
		dt_annee = items.Where(a => ((date1 != null && a.DO_Date >= date1) || date1 == null) && ((date2 != null && a.DO_Date <= date2) || date2 == null) && a.CT_Num == row.CT_Num).GroupBy(a => new { a.Annee })
	.Select(a => new API_V_MARGE
		{
			Annee = a.Key.Annee,
			DL_MontantHT = a.Sum(a => a.DL_MontantHT),
			DL_MontantTTC = a.Sum(a => a.DL_MontantTTC),
			CMUPCoutTotal = a.Sum(a => a.CMUPCoutTotal),
			CMUPMarge = a.Sum(a => a.CMUPMarge),
			CMUPMargeP = a.Sum(a => a.DL_MontantHT) != 0.0m ? a.Sum(a => a.CMUPMarge) / a.Sum(a => a.DL_MontantHT) : 0.0m
		}).OrderByDescending(a => a.Annee).Take(12).ToList();
		dt_article = db.API_V_MARGE.Where(a => ((date1 != null && a.DO_Date >= date1) || date1 == null) && ((date2 != null && a.DO_Date <= date2) || date2 == null) && a.CT_Num == row.CT_Num).GroupBy(a => new { a.AR_Design, a.AR_Ref })
				.Select(a => new API_V_MARGE
					{
						AR_Ref = a.Key.AR_Ref,
						AR_Design = a.Key.AR_Design,
						DL_Qte = a.Sum(a => a.DL_Qte),
						DL_MontantHT = a.Sum(a => a.DL_MontantHT),
						DL_MontantTTC = a.Sum(a => a.DL_MontantTTC),
						CMUPCoutTotal = a.Sum(a => a.CMUPCoutTotal),
						CMUPMarge = a.Sum(a => a.CMUPMarge),
						CMUPMargeP = a.Sum(a => a.DL_MontantHT) != 0.0m ? a.Sum(a => a.CMUPMarge) / a.Sum(a => a.DL_MontantHT) : 0.0m
					}).OrderByDescending(a => a.DL_MontantTTC).ToList();





		achat_items = db.API_V_ACHAT.Where(a => ((date1 != null && a.DO_Date >= date1) || date1 == null) && ((date2 != null && a.DO_Date <= date2) || date2 == null) && a.CT_Num == row.CT_Num).ToList();
		achat_dt_mois = achat_items.Where(a => ((date1 != null && a.DO_Date >= date1) || date1 == null) && ((date2 != null && a.DO_Date <= date2) || date2 == null) && a.CT_Num == row.CT_Num).GroupBy(a => new { a.Mois })
		.Select(a => new API_V_ACHAT
			{
				Mois = a.Key.Mois,
				DL_MontantHT = a.Sum(a => a.DL_MontantHT),
				DL_MontantTTC = a.Sum(a => a.DL_MontantTTC)
			}).OrderBy(a => a.Mois).Take(12).ToList();
		achat_annees = achat_items.OrderBy(a => a.Annee).Select(a => a.Annee).Distinct().ToList();
		achat_dt_annee = achat_items.Where(a => ((date1 != null && a.DO_Date >= date1) || date1 == null) && ((date2 != null && a.DO_Date <= date2) || date2 == null) && a.CT_Num == row.CT_Num).GroupBy(a => new { a.Annee })
	.Select(a => new API_V_ACHAT
		{
			Annee = a.Key.Annee,
			DL_MontantHT = a.Sum(a => a.DL_MontantHT),
			DL_MontantTTC = a.Sum(a => a.DL_MontantTTC)
		}).OrderByDescending(a => a.Annee).Take(12).ToList();
		achat_dt_article = achat_items.Where(a => ((date1 != null && a.DO_Date >= date1) || date1 == null) && ((date2 != null && a.DO_Date <= date2) || date2 == null) && a.CT_Num == row.CT_Num).GroupBy(a => new { a.AR_Design, a.AR_Ref })
				.Select(a => new API_V_ACHAT
					{
						AR_Ref = a.Key.AR_Ref,
						AR_Design = a.Key.AR_Design,
						DL_Qte = a.Sum(a => a.DL_Qte),
						DL_MontantHT = a.Sum(a => a.DL_MontantHT),
						DL_MontantTTC = a.Sum(a => a.DL_MontantTTC)
					}).OrderByDescending(a => a.DL_MontantTTC).ToList();
	}


	protected async Task ShowPiece(string DO_Piece, short? DO_Type)
	{
		await DialogService.OpenAsync<DetailsPiece>(DO_Piece,
		new Dictionary<string, object>() { { "DO_Piece", DO_Piece }, { "DO_Type", DO_Type } },
		new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "90%", Height = "90%" });
	}
	SfPivotView<API_V_ACHAT> ACsfPivot;
	public void ACColummRender(ColumnRenderEventArgs args)
	{
		args.Columns[0].Width = "80";
		ACsfPivot.LayoutRefreshAsync();
	}
	SfPivotView<API_V_MARGE> VEsfPivot;
	public void VEColummRender(ColumnRenderEventArgs args)
	{
		args.Columns[0].Width = "80";
		VEsfPivot.LayoutRefreshAsync();
	}
	protected async Task ShowDetail(RecordDoubleClickEventArgs<API_V_MARGE> args, string type)
	{
		if (type == "article")
		{
			await DialogService.OpenAsync<DetailsMarge>(args.RowData.AR_Design,
			new Dictionary<string, object>() { { "Date1", date1 }, { "Date2", date2 }, { "AR_Ref", args.RowData.AR_Ref }, { "CT_Num", row.CT_Num }, { "ClassHeight", "grid-84" } },
			new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "98%", Height = "95%" });
		}
		if (type == "mois")
		{
			await DialogService.OpenAsync<DetailsMarge>(args.RowData.MoisAnnee,
			new Dictionary<string, object>() { { "Date1", date1 }, { "Date2", date2 }, { "MoisAnnee", args.RowData.MoisAnnee }, { "CT_Num", row.CT_Num }, { "ClassHeight", "grid-84" } },
			new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "98%", Height = "95%" });
		}

	}
	protected async Task ShowDetailAchat(RecordDoubleClickEventArgs<API_V_ACHAT> args, string type)
	{
		if (type == "article")
		{
			await DialogService.OpenAsync<DetailsAchat>(args.RowData.AR_Design,
			new Dictionary<string, object>() { { "Date1", date1 }, { "Date2", date2 }, { "AR_Ref", args.RowData.AR_Ref }, { "CT_Num", row.CT_Num }, { "ClassHeight", "grid-84" } },
			new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "98%", Height = "95%" });
		}
		if (type == "mois")
		{
			await DialogService.OpenAsync<DetailsAchat>(args.RowData.MoisAnnee,
			new Dictionary<string, object>() { { "Date1", date1 }, { "Date2", date2 }, { "MoisAnnee", args.RowData.MoisAnnee }, { "CT_Num", row.CT_Num }, { "ClassHeight", "grid-84" } },
			new Radzen.DialogOptions() { CloseDialogOnEsc = true, Width = "98%", Height = "95%" });
		}

	}
}