<RadzenContent Container="main">
    <div class="grid-80">
        <SfGrid Height="100%" Toolbar="@(new List<string>() { "Add", "Delete" })" DataSource="@(items)" AllowPaging>
            <GridPageSettings PageSize="100"></GridPageSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
            <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="false" AllowDeleting="false" AllowEditing="false" Mode="Syncfusion.Blazor.Grids.EditMode.Normal">
            </GridEditSettings>
            <GridEvents OnActionBegin="UpdateListe" TValue="ApplicationRole"></GridEvents>
            <GridTemplates>
                <EmptyRecordTemplate>
                    <Empty></Empty>
                </EmptyRecordTemplate>
            </GridTemplates>
            <GridColumns>
                <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(ApplicationRole.Id) HeaderText="#" IsPrimaryKey="true" Visible="false" IsIdentity="true"></GridColumn>
                <GridColumn HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Field=@nameof(ApplicationRole.Name) HeaderText="Description"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>

    </RadzenContent>



    @code
    {
    private IEnumerable<ApplicationRole> items;
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadData);
    }
    private async Task LoadData()
    {
        await Task.Delay(1);
        items = await sc.GetRoles();
        await Task.Delay(1);
    }

    public async Task UpdateListe(ActionEventArgs<ApplicationRole> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                await sc.CreateRole(args.Data);
            }
        }

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await sc.DeleteRole(args.Data.Id);
        }
    }

}